{
  "service": {
    "service": "all-tracker",
    "serviceObject": {
      "name": "all-tracker"
    },
    "provider": {
      "name": "aws",
      "runtime": "nodejs14.x",
      "region": "ca-central-1",
      "environment": {
        "ALL_TRACKER_TABLE_NAME": "dev-all-tracker-table",
        "ACCESS_TOKEN_SECRET": "d3340691248ce92a2271fe059bfa813fcd7d2dhdhfgabenr58274019ulmgnsqifc9f8eaf48f5a70ada7403a503600243adbb40ed3976d68b75773313ca1ea",
        "ENCRYPTER": "MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAivL/9KLDKgqIXHhwtM6qzBqq60Fc4ayrvmKVk76Wgeeo0ElxMrAZqKqNFyQsn9bWTvR2FBs+0P1T+KS75WM7pDiN/4DQerxfkGJOY6R0v+mseYc8ZVMYcQ5Py9euDWo4hGL220lMI0R9Yd/dVBCkhbW+HMebk/tPRlWC1J22w3RiK0q3wsMaG1E97Bei9vJZ+BhLk5SvEE5ggYLhiG8ft7oWBEAaCIISq1whfZstvidPvhu4rLiKZXGpKpr9m53AzUi+zJKeiqbE0fcviGdGfQvDpkriyJ1Udq5pxnfJX79PlaG6EUyeFwd3LeOTGIZ/FJY1ZnHT5LAInjMKTC2NgwIDAQAB",
        "DECRYPTER": "MIIEvAIBADANBgkqhkiG9w0BAQEFAASCBKYwggSiAgEAAoIBAQCK8v/0osMqCohceHC0zqrMGqrrQVzhrKu+YpWTvpaB56jQSXEysBmoqo0XJCyf1tZO9HYUGz7Q/VP4pLvlYzukOI3/gNB6vF+QYk5jpHS/6ax5hzxlUxhxDk/L164NajiEYvbbSUwjRH1h391UEKSFtb4cx5uT+09GVYLUnbbDdGIrSrfCwxobUT3sF6L28ln4GEuTlK8QTmCBguGIbx+3uhYEQBoIghKrXCF9my2+J0++G7isuIplcakqmv2bncDNSL7Mkp6KpsTR9y+IZ0Z9C8OmSuLInVR2rmnGd8lfv0+VoboRTJ4XB3ct45MYhn8UljVmcdPksAieMwpMLY2DAgMBAAECggEAMNK5xUf7s6YHzBY15BJKSXWFYSySamm13yvcyxFI6VRxKN7le54NJgrnkJ4RYAipPQ0BAIeiRuT8wH2B2FRJ/KYynviwSLAwFBe226RJsbV1+S3ftuq/x9nzh/i9G9GbEkmD3AGhUzMZq25x4rwGU0VNC+fHbvP7Iweg9PyF359YQfkzqWytuf/UsssJ4MU/g5ZzoyN/87dPlhvVspdJVRD1MX0LoL9VBIVY0LBiRbp8GIiiyWWQF7NqcE2jor4CH6fZIzMZqlx7I37dFhOcMRNVsvJNjTGikNNhqpMuRsSkhMdh7djPSYUxDKM4KKX1kcQfvBKPyJJ2/1NjBhEowQKBgQD1gi8MzODnCrlq4v2BxI5ybLaYRMXlD1cdhUVlKDWso5pR0FV05pqncYYhEIgXJNQKhUQrouvyaypikoMercnI1VkQjRcASnk3r1QWvLnqoZZre9pTM0x0V2wcRayY/xd+Up/xw7A1CQ28HdjyNq2XScKQjF23sQ5yU4h6D6nkOwKBgQCQ4xPeKHCBV63wcaX5C3JDrAshb7kwHDAwHYIlXspezCZpVAqxm5+VhCjUeC2aPngz4/1bH37ZBQuIL9w9jUVDMG7Cn+4zmePDTA8DZXA8ME7N+sU4vl5aEcN/doMkWYId6HjWKdQdnJPqcd4EwgeG/UdU/GHL8oFxGMqklh1PWQKBgFiwZcTPAnQUaLUXORM26WqmoTPSrFa6OvM8ILyRUQqDs4zYoPZxE+9nUFgDe9Y4hK0kRWMqIOhbFF21pc5gY6O8hsc24NdHEBEwskTgep0rMIa1oEIsJvNkXXa9KMPAa0FEIemZkr8l/SM2+RdO71jW2YWUX4qrWJeuW4AUxn/fAoGAPmInmc4bsvVHpXGpnvO4vT6EhF8Qg5B/hxgNg32u8OZB27Qd7p8tNTl0QxeDuxgOtXkDC4siGNs9PeQtlisPmYBvEEnATGOEWACVrkas7p12MOY6qNX+1hUz8dvbV3latvnznXLhK+bRIW7pw26vwwWnAwawLRo7dbDQ/9DKyfECgYAGZ9NgSXxEjGqyltrXbto9j4t9XagsD7bhDqtlaJuIy9p5RG9f0AhOuvibKbGJYDAulm8Wa41xm9nimAMPlzDc1qLYWPD1rOUSg5hmBz52Y2lEH31iwZxde+gnA/rB1+fQbstmP7eDCFT1s4+Gr+xK7hc8ceexfuo6KO8fI8rSYw==",
        "NOTION_CLIENT_ID": "48daaa94-6352-4aef-ac2b-8ba6cdfcfc0b",
        "NOTION_CLIENT_SECRET": "secret_wPW0WE1YOEIAVaUv6PFxscbzZs1A0cY9xUOc22LZiXj",
        "SEND_OTP_URL": {
          "Ref": "sendOTPEmailQueue"
        },
        "INTEGRATE_URL": {
          "Ref": "integrationQueue"
        },
        "OTP_TEMPLATE_NAME": "all-tracker-otp-template-dev",
        "CONFIGURATION_SET_NAME": "all-tracker-fakeShop-configurationSet-dev"
      },
      "stage": "dev",
      "versionFunctions": true,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          },
          "InitiateIntegrationLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/all-tracker-dev-initiateIntegration"
            }
          },
          "IntegrateLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/all-tracker-dev-integrate"
            }
          },
          "CheckIntegrationLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/all-tracker-dev-checkIntegration"
            }
          },
          "CreateEntryLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/all-tracker-dev-createEntry"
            }
          },
          "LoginAppleLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/all-tracker-dev-loginApple"
            }
          },
          "LoginGoogleLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/all-tracker-dev-loginGoogle"
            }
          },
          "LoginOTPLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/all-tracker-dev-loginOTP"
            }
          },
          "RequestOTPLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/all-tracker-dev-requestOTP"
            }
          },
          "UserExistsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/all-tracker-dev-userExists"
            }
          },
          "RefreshTokenLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/all-tracker-dev-refreshToken"
            }
          },
          "SendOTPEmailLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/all-tracker-dev-sendOTPEmail"
            }
          },
          "ProcessFailedOTPEmailLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/all-tracker-dev-processFailedOTPEmail"
            }
          },
          "HealthInfoLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/all-tracker-dev-healthInfo"
            }
          },
          "FoodEntriesLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/all-tracker-dev-foodEntries"
            }
          },
          "FoodItemsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/all-tracker-dev-foodItems"
            }
          },
          "HabitsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/all-tracker-dev-habits"
            }
          },
          "HabitStatusesLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/all-tracker-dev-habitStatuses"
            }
          },
          "SleepReportsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/all-tracker-dev-sleepReports"
            }
          },
          "WellnessReportsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/all-tracker-dev-wellnessReports"
            }
          },
          "TasksLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/all-tracker-dev-tasks"
            }
          },
          "ToDosLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/all-tracker-dev-toDos"
            }
          },
          "ExerciseEntriesLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/all-tracker-dev-exerciseEntries"
            }
          },
          "ExercisesLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/all-tracker-dev-exercises"
            }
          },
          "WorkoutEntriesLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/all-tracker-dev-workoutEntries"
            }
          },
          "WorkoutPlansLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/all-tracker-dev-workoutPlans"
            }
          },
          "InitiateIntegrationLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/all-tracker/dev/1682874024478-2023-04-30T17:00:24.478Z/all-tracker.zip"
              },
              "Handler": "notion/initiateIntegration/index.handler",
              "Runtime": "nodejs14.x",
              "FunctionName": "all-tracker-dev-initiateIntegration",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "ALL_TRACKER_TABLE_NAME": "dev-all-tracker-table",
                  "ACCESS_TOKEN_SECRET": "d3340691248ce92a2271fe059bfa813fcd7d2dhdhfgabenr58274019ulmgnsqifc9f8eaf48f5a70ada7403a503600243adbb40ed3976d68b75773313ca1ea",
                  "ENCRYPTER": "MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAivL/9KLDKgqIXHhwtM6qzBqq60Fc4ayrvmKVk76Wgeeo0ElxMrAZqKqNFyQsn9bWTvR2FBs+0P1T+KS75WM7pDiN/4DQerxfkGJOY6R0v+mseYc8ZVMYcQ5Py9euDWo4hGL220lMI0R9Yd/dVBCkhbW+HMebk/tPRlWC1J22w3RiK0q3wsMaG1E97Bei9vJZ+BhLk5SvEE5ggYLhiG8ft7oWBEAaCIISq1whfZstvidPvhu4rLiKZXGpKpr9m53AzUi+zJKeiqbE0fcviGdGfQvDpkriyJ1Udq5pxnfJX79PlaG6EUyeFwd3LeOTGIZ/FJY1ZnHT5LAInjMKTC2NgwIDAQAB",
                  "DECRYPTER": "MIIEvAIBADANBgkqhkiG9w0BAQEFAASCBKYwggSiAgEAAoIBAQCK8v/0osMqCohceHC0zqrMGqrrQVzhrKu+YpWTvpaB56jQSXEysBmoqo0XJCyf1tZO9HYUGz7Q/VP4pLvlYzukOI3/gNB6vF+QYk5jpHS/6ax5hzxlUxhxDk/L164NajiEYvbbSUwjRH1h391UEKSFtb4cx5uT+09GVYLUnbbDdGIrSrfCwxobUT3sF6L28ln4GEuTlK8QTmCBguGIbx+3uhYEQBoIghKrXCF9my2+J0++G7isuIplcakqmv2bncDNSL7Mkp6KpsTR9y+IZ0Z9C8OmSuLInVR2rmnGd8lfv0+VoboRTJ4XB3ct45MYhn8UljVmcdPksAieMwpMLY2DAgMBAAECggEAMNK5xUf7s6YHzBY15BJKSXWFYSySamm13yvcyxFI6VRxKN7le54NJgrnkJ4RYAipPQ0BAIeiRuT8wH2B2FRJ/KYynviwSLAwFBe226RJsbV1+S3ftuq/x9nzh/i9G9GbEkmD3AGhUzMZq25x4rwGU0VNC+fHbvP7Iweg9PyF359YQfkzqWytuf/UsssJ4MU/g5ZzoyN/87dPlhvVspdJVRD1MX0LoL9VBIVY0LBiRbp8GIiiyWWQF7NqcE2jor4CH6fZIzMZqlx7I37dFhOcMRNVsvJNjTGikNNhqpMuRsSkhMdh7djPSYUxDKM4KKX1kcQfvBKPyJJ2/1NjBhEowQKBgQD1gi8MzODnCrlq4v2BxI5ybLaYRMXlD1cdhUVlKDWso5pR0FV05pqncYYhEIgXJNQKhUQrouvyaypikoMercnI1VkQjRcASnk3r1QWvLnqoZZre9pTM0x0V2wcRayY/xd+Up/xw7A1CQ28HdjyNq2XScKQjF23sQ5yU4h6D6nkOwKBgQCQ4xPeKHCBV63wcaX5C3JDrAshb7kwHDAwHYIlXspezCZpVAqxm5+VhCjUeC2aPngz4/1bH37ZBQuIL9w9jUVDMG7Cn+4zmePDTA8DZXA8ME7N+sU4vl5aEcN/doMkWYId6HjWKdQdnJPqcd4EwgeG/UdU/GHL8oFxGMqklh1PWQKBgFiwZcTPAnQUaLUXORM26WqmoTPSrFa6OvM8ILyRUQqDs4zYoPZxE+9nUFgDe9Y4hK0kRWMqIOhbFF21pc5gY6O8hsc24NdHEBEwskTgep0rMIa1oEIsJvNkXXa9KMPAa0FEIemZkr8l/SM2+RdO71jW2YWUX4qrWJeuW4AUxn/fAoGAPmInmc4bsvVHpXGpnvO4vT6EhF8Qg5B/hxgNg32u8OZB27Qd7p8tNTl0QxeDuxgOtXkDC4siGNs9PeQtlisPmYBvEEnATGOEWACVrkas7p12MOY6qNX+1hUz8dvbV3latvnznXLhK+bRIW7pw26vwwWnAwawLRo7dbDQ/9DKyfECgYAGZ9NgSXxEjGqyltrXbto9j4t9XagsD7bhDqtlaJuIy9p5RG9f0AhOuvibKbGJYDAulm8Wa41xm9nimAMPlzDc1qLYWPD1rOUSg5hmBz52Y2lEH31iwZxde+gnA/rB1+fQbstmP7eDCFT1s4+Gr+xK7hc8ceexfuo6KO8fI8rSYw==",
                  "NOTION_CLIENT_ID": "48daaa94-6352-4aef-ac2b-8ba6cdfcfc0b",
                  "NOTION_CLIENT_SECRET": "secret_wPW0WE1YOEIAVaUv6PFxscbzZs1A0cY9xUOc22LZiXj",
                  "SEND_OTP_URL": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"SEND_OTP_URL\"]"
                  },
                  "INTEGRATE_URL": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"INTEGRATE_URL\"]"
                  },
                  "OTP_TEMPLATE_NAME": "all-tracker-otp-template-dev",
                  "CONFIGURATION_SET_NAME": "all-tracker-fakeShop-configurationSet-dev"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "initiateIntegrationRole",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "InitiateIntegrationLogGroup",
              "initiateIntegrationRole"
            ]
          },
          "IntegrateLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/all-tracker/dev/1682874024478-2023-04-30T17:00:24.478Z/all-tracker.zip"
              },
              "Handler": "notion/integrate/index.handler",
              "Runtime": "nodejs14.x",
              "FunctionName": "all-tracker-dev-integrate",
              "MemorySize": 1024,
              "Timeout": 150,
              "Environment": {
                "Variables": {
                  "ALL_TRACKER_TABLE_NAME": "dev-all-tracker-table",
                  "ACCESS_TOKEN_SECRET": "d3340691248ce92a2271fe059bfa813fcd7d2dhdhfgabenr58274019ulmgnsqifc9f8eaf48f5a70ada7403a503600243adbb40ed3976d68b75773313ca1ea",
                  "ENCRYPTER": "MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAivL/9KLDKgqIXHhwtM6qzBqq60Fc4ayrvmKVk76Wgeeo0ElxMrAZqKqNFyQsn9bWTvR2FBs+0P1T+KS75WM7pDiN/4DQerxfkGJOY6R0v+mseYc8ZVMYcQ5Py9euDWo4hGL220lMI0R9Yd/dVBCkhbW+HMebk/tPRlWC1J22w3RiK0q3wsMaG1E97Bei9vJZ+BhLk5SvEE5ggYLhiG8ft7oWBEAaCIISq1whfZstvidPvhu4rLiKZXGpKpr9m53AzUi+zJKeiqbE0fcviGdGfQvDpkriyJ1Udq5pxnfJX79PlaG6EUyeFwd3LeOTGIZ/FJY1ZnHT5LAInjMKTC2NgwIDAQAB",
                  "DECRYPTER": "MIIEvAIBADANBgkqhkiG9w0BAQEFAASCBKYwggSiAgEAAoIBAQCK8v/0osMqCohceHC0zqrMGqrrQVzhrKu+YpWTvpaB56jQSXEysBmoqo0XJCyf1tZO9HYUGz7Q/VP4pLvlYzukOI3/gNB6vF+QYk5jpHS/6ax5hzxlUxhxDk/L164NajiEYvbbSUwjRH1h391UEKSFtb4cx5uT+09GVYLUnbbDdGIrSrfCwxobUT3sF6L28ln4GEuTlK8QTmCBguGIbx+3uhYEQBoIghKrXCF9my2+J0++G7isuIplcakqmv2bncDNSL7Mkp6KpsTR9y+IZ0Z9C8OmSuLInVR2rmnGd8lfv0+VoboRTJ4XB3ct45MYhn8UljVmcdPksAieMwpMLY2DAgMBAAECggEAMNK5xUf7s6YHzBY15BJKSXWFYSySamm13yvcyxFI6VRxKN7le54NJgrnkJ4RYAipPQ0BAIeiRuT8wH2B2FRJ/KYynviwSLAwFBe226RJsbV1+S3ftuq/x9nzh/i9G9GbEkmD3AGhUzMZq25x4rwGU0VNC+fHbvP7Iweg9PyF359YQfkzqWytuf/UsssJ4MU/g5ZzoyN/87dPlhvVspdJVRD1MX0LoL9VBIVY0LBiRbp8GIiiyWWQF7NqcE2jor4CH6fZIzMZqlx7I37dFhOcMRNVsvJNjTGikNNhqpMuRsSkhMdh7djPSYUxDKM4KKX1kcQfvBKPyJJ2/1NjBhEowQKBgQD1gi8MzODnCrlq4v2BxI5ybLaYRMXlD1cdhUVlKDWso5pR0FV05pqncYYhEIgXJNQKhUQrouvyaypikoMercnI1VkQjRcASnk3r1QWvLnqoZZre9pTM0x0V2wcRayY/xd+Up/xw7A1CQ28HdjyNq2XScKQjF23sQ5yU4h6D6nkOwKBgQCQ4xPeKHCBV63wcaX5C3JDrAshb7kwHDAwHYIlXspezCZpVAqxm5+VhCjUeC2aPngz4/1bH37ZBQuIL9w9jUVDMG7Cn+4zmePDTA8DZXA8ME7N+sU4vl5aEcN/doMkWYId6HjWKdQdnJPqcd4EwgeG/UdU/GHL8oFxGMqklh1PWQKBgFiwZcTPAnQUaLUXORM26WqmoTPSrFa6OvM8ILyRUQqDs4zYoPZxE+9nUFgDe9Y4hK0kRWMqIOhbFF21pc5gY6O8hsc24NdHEBEwskTgep0rMIa1oEIsJvNkXXa9KMPAa0FEIemZkr8l/SM2+RdO71jW2YWUX4qrWJeuW4AUxn/fAoGAPmInmc4bsvVHpXGpnvO4vT6EhF8Qg5B/hxgNg32u8OZB27Qd7p8tNTl0QxeDuxgOtXkDC4siGNs9PeQtlisPmYBvEEnATGOEWACVrkas7p12MOY6qNX+1hUz8dvbV3latvnznXLhK+bRIW7pw26vwwWnAwawLRo7dbDQ/9DKyfECgYAGZ9NgSXxEjGqyltrXbto9j4t9XagsD7bhDqtlaJuIy9p5RG9f0AhOuvibKbGJYDAulm8Wa41xm9nimAMPlzDc1qLYWPD1rOUSg5hmBz52Y2lEH31iwZxde+gnA/rB1+fQbstmP7eDCFT1s4+Gr+xK7hc8ceexfuo6KO8fI8rSYw==",
                  "NOTION_CLIENT_ID": "48daaa94-6352-4aef-ac2b-8ba6cdfcfc0b",
                  "NOTION_CLIENT_SECRET": "secret_wPW0WE1YOEIAVaUv6PFxscbzZs1A0cY9xUOc22LZiXj",
                  "SEND_OTP_URL": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"SEND_OTP_URL\"]"
                  },
                  "INTEGRATE_URL": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"INTEGRATE_URL\"]"
                  },
                  "OTP_TEMPLATE_NAME": "all-tracker-otp-template-dev",
                  "CONFIGURATION_SET_NAME": "all-tracker-fakeShop-configurationSet-dev"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "integrateRole",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "IntegrateLogGroup",
              "integrateRole"
            ]
          },
          "CheckIntegrationLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/all-tracker/dev/1682874024478-2023-04-30T17:00:24.478Z/all-tracker.zip"
              },
              "Handler": "notion/checkIntegration/index.handler",
              "Runtime": "nodejs14.x",
              "FunctionName": "all-tracker-dev-checkIntegration",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "ALL_TRACKER_TABLE_NAME": "dev-all-tracker-table",
                  "ACCESS_TOKEN_SECRET": "d3340691248ce92a2271fe059bfa813fcd7d2dhdhfgabenr58274019ulmgnsqifc9f8eaf48f5a70ada7403a503600243adbb40ed3976d68b75773313ca1ea",
                  "ENCRYPTER": "MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAivL/9KLDKgqIXHhwtM6qzBqq60Fc4ayrvmKVk76Wgeeo0ElxMrAZqKqNFyQsn9bWTvR2FBs+0P1T+KS75WM7pDiN/4DQerxfkGJOY6R0v+mseYc8ZVMYcQ5Py9euDWo4hGL220lMI0R9Yd/dVBCkhbW+HMebk/tPRlWC1J22w3RiK0q3wsMaG1E97Bei9vJZ+BhLk5SvEE5ggYLhiG8ft7oWBEAaCIISq1whfZstvidPvhu4rLiKZXGpKpr9m53AzUi+zJKeiqbE0fcviGdGfQvDpkriyJ1Udq5pxnfJX79PlaG6EUyeFwd3LeOTGIZ/FJY1ZnHT5LAInjMKTC2NgwIDAQAB",
                  "DECRYPTER": "MIIEvAIBADANBgkqhkiG9w0BAQEFAASCBKYwggSiAgEAAoIBAQCK8v/0osMqCohceHC0zqrMGqrrQVzhrKu+YpWTvpaB56jQSXEysBmoqo0XJCyf1tZO9HYUGz7Q/VP4pLvlYzukOI3/gNB6vF+QYk5jpHS/6ax5hzxlUxhxDk/L164NajiEYvbbSUwjRH1h391UEKSFtb4cx5uT+09GVYLUnbbDdGIrSrfCwxobUT3sF6L28ln4GEuTlK8QTmCBguGIbx+3uhYEQBoIghKrXCF9my2+J0++G7isuIplcakqmv2bncDNSL7Mkp6KpsTR9y+IZ0Z9C8OmSuLInVR2rmnGd8lfv0+VoboRTJ4XB3ct45MYhn8UljVmcdPksAieMwpMLY2DAgMBAAECggEAMNK5xUf7s6YHzBY15BJKSXWFYSySamm13yvcyxFI6VRxKN7le54NJgrnkJ4RYAipPQ0BAIeiRuT8wH2B2FRJ/KYynviwSLAwFBe226RJsbV1+S3ftuq/x9nzh/i9G9GbEkmD3AGhUzMZq25x4rwGU0VNC+fHbvP7Iweg9PyF359YQfkzqWytuf/UsssJ4MU/g5ZzoyN/87dPlhvVspdJVRD1MX0LoL9VBIVY0LBiRbp8GIiiyWWQF7NqcE2jor4CH6fZIzMZqlx7I37dFhOcMRNVsvJNjTGikNNhqpMuRsSkhMdh7djPSYUxDKM4KKX1kcQfvBKPyJJ2/1NjBhEowQKBgQD1gi8MzODnCrlq4v2BxI5ybLaYRMXlD1cdhUVlKDWso5pR0FV05pqncYYhEIgXJNQKhUQrouvyaypikoMercnI1VkQjRcASnk3r1QWvLnqoZZre9pTM0x0V2wcRayY/xd+Up/xw7A1CQ28HdjyNq2XScKQjF23sQ5yU4h6D6nkOwKBgQCQ4xPeKHCBV63wcaX5C3JDrAshb7kwHDAwHYIlXspezCZpVAqxm5+VhCjUeC2aPngz4/1bH37ZBQuIL9w9jUVDMG7Cn+4zmePDTA8DZXA8ME7N+sU4vl5aEcN/doMkWYId6HjWKdQdnJPqcd4EwgeG/UdU/GHL8oFxGMqklh1PWQKBgFiwZcTPAnQUaLUXORM26WqmoTPSrFa6OvM8ILyRUQqDs4zYoPZxE+9nUFgDe9Y4hK0kRWMqIOhbFF21pc5gY6O8hsc24NdHEBEwskTgep0rMIa1oEIsJvNkXXa9KMPAa0FEIemZkr8l/SM2+RdO71jW2YWUX4qrWJeuW4AUxn/fAoGAPmInmc4bsvVHpXGpnvO4vT6EhF8Qg5B/hxgNg32u8OZB27Qd7p8tNTl0QxeDuxgOtXkDC4siGNs9PeQtlisPmYBvEEnATGOEWACVrkas7p12MOY6qNX+1hUz8dvbV3latvnznXLhK+bRIW7pw26vwwWnAwawLRo7dbDQ/9DKyfECgYAGZ9NgSXxEjGqyltrXbto9j4t9XagsD7bhDqtlaJuIy9p5RG9f0AhOuvibKbGJYDAulm8Wa41xm9nimAMPlzDc1qLYWPD1rOUSg5hmBz52Y2lEH31iwZxde+gnA/rB1+fQbstmP7eDCFT1s4+Gr+xK7hc8ceexfuo6KO8fI8rSYw==",
                  "NOTION_CLIENT_ID": "48daaa94-6352-4aef-ac2b-8ba6cdfcfc0b",
                  "NOTION_CLIENT_SECRET": "secret_wPW0WE1YOEIAVaUv6PFxscbzZs1A0cY9xUOc22LZiXj",
                  "SEND_OTP_URL": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"SEND_OTP_URL\"]"
                  },
                  "INTEGRATE_URL": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"INTEGRATE_URL\"]"
                  },
                  "OTP_TEMPLATE_NAME": "all-tracker-otp-template-dev",
                  "CONFIGURATION_SET_NAME": "all-tracker-fakeShop-configurationSet-dev"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "LambdaExecutionRole",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CheckIntegrationLogGroup",
              "LambdaExecutionRole"
            ]
          },
          "CreateEntryLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/all-tracker/dev/1682874024478-2023-04-30T17:00:24.478Z/all-tracker.zip"
              },
              "Handler": "notion/createEntry/index.handler",
              "Runtime": "nodejs14.x",
              "FunctionName": "all-tracker-dev-createEntry",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "ALL_TRACKER_TABLE_NAME": "dev-all-tracker-table",
                  "ACCESS_TOKEN_SECRET": "d3340691248ce92a2271fe059bfa813fcd7d2dhdhfgabenr58274019ulmgnsqifc9f8eaf48f5a70ada7403a503600243adbb40ed3976d68b75773313ca1ea",
                  "ENCRYPTER": "MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAivL/9KLDKgqIXHhwtM6qzBqq60Fc4ayrvmKVk76Wgeeo0ElxMrAZqKqNFyQsn9bWTvR2FBs+0P1T+KS75WM7pDiN/4DQerxfkGJOY6R0v+mseYc8ZVMYcQ5Py9euDWo4hGL220lMI0R9Yd/dVBCkhbW+HMebk/tPRlWC1J22w3RiK0q3wsMaG1E97Bei9vJZ+BhLk5SvEE5ggYLhiG8ft7oWBEAaCIISq1whfZstvidPvhu4rLiKZXGpKpr9m53AzUi+zJKeiqbE0fcviGdGfQvDpkriyJ1Udq5pxnfJX79PlaG6EUyeFwd3LeOTGIZ/FJY1ZnHT5LAInjMKTC2NgwIDAQAB",
                  "DECRYPTER": "MIIEvAIBADANBgkqhkiG9w0BAQEFAASCBKYwggSiAgEAAoIBAQCK8v/0osMqCohceHC0zqrMGqrrQVzhrKu+YpWTvpaB56jQSXEysBmoqo0XJCyf1tZO9HYUGz7Q/VP4pLvlYzukOI3/gNB6vF+QYk5jpHS/6ax5hzxlUxhxDk/L164NajiEYvbbSUwjRH1h391UEKSFtb4cx5uT+09GVYLUnbbDdGIrSrfCwxobUT3sF6L28ln4GEuTlK8QTmCBguGIbx+3uhYEQBoIghKrXCF9my2+J0++G7isuIplcakqmv2bncDNSL7Mkp6KpsTR9y+IZ0Z9C8OmSuLInVR2rmnGd8lfv0+VoboRTJ4XB3ct45MYhn8UljVmcdPksAieMwpMLY2DAgMBAAECggEAMNK5xUf7s6YHzBY15BJKSXWFYSySamm13yvcyxFI6VRxKN7le54NJgrnkJ4RYAipPQ0BAIeiRuT8wH2B2FRJ/KYynviwSLAwFBe226RJsbV1+S3ftuq/x9nzh/i9G9GbEkmD3AGhUzMZq25x4rwGU0VNC+fHbvP7Iweg9PyF359YQfkzqWytuf/UsssJ4MU/g5ZzoyN/87dPlhvVspdJVRD1MX0LoL9VBIVY0LBiRbp8GIiiyWWQF7NqcE2jor4CH6fZIzMZqlx7I37dFhOcMRNVsvJNjTGikNNhqpMuRsSkhMdh7djPSYUxDKM4KKX1kcQfvBKPyJJ2/1NjBhEowQKBgQD1gi8MzODnCrlq4v2BxI5ybLaYRMXlD1cdhUVlKDWso5pR0FV05pqncYYhEIgXJNQKhUQrouvyaypikoMercnI1VkQjRcASnk3r1QWvLnqoZZre9pTM0x0V2wcRayY/xd+Up/xw7A1CQ28HdjyNq2XScKQjF23sQ5yU4h6D6nkOwKBgQCQ4xPeKHCBV63wcaX5C3JDrAshb7kwHDAwHYIlXspezCZpVAqxm5+VhCjUeC2aPngz4/1bH37ZBQuIL9w9jUVDMG7Cn+4zmePDTA8DZXA8ME7N+sU4vl5aEcN/doMkWYId6HjWKdQdnJPqcd4EwgeG/UdU/GHL8oFxGMqklh1PWQKBgFiwZcTPAnQUaLUXORM26WqmoTPSrFa6OvM8ILyRUQqDs4zYoPZxE+9nUFgDe9Y4hK0kRWMqIOhbFF21pc5gY6O8hsc24NdHEBEwskTgep0rMIa1oEIsJvNkXXa9KMPAa0FEIemZkr8l/SM2+RdO71jW2YWUX4qrWJeuW4AUxn/fAoGAPmInmc4bsvVHpXGpnvO4vT6EhF8Qg5B/hxgNg32u8OZB27Qd7p8tNTl0QxeDuxgOtXkDC4siGNs9PeQtlisPmYBvEEnATGOEWACVrkas7p12MOY6qNX+1hUz8dvbV3latvnznXLhK+bRIW7pw26vwwWnAwawLRo7dbDQ/9DKyfECgYAGZ9NgSXxEjGqyltrXbto9j4t9XagsD7bhDqtlaJuIy9p5RG9f0AhOuvibKbGJYDAulm8Wa41xm9nimAMPlzDc1qLYWPD1rOUSg5hmBz52Y2lEH31iwZxde+gnA/rB1+fQbstmP7eDCFT1s4+Gr+xK7hc8ceexfuo6KO8fI8rSYw==",
                  "NOTION_CLIENT_ID": "48daaa94-6352-4aef-ac2b-8ba6cdfcfc0b",
                  "NOTION_CLIENT_SECRET": "secret_wPW0WE1YOEIAVaUv6PFxscbzZs1A0cY9xUOc22LZiXj",
                  "SEND_OTP_URL": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"SEND_OTP_URL\"]"
                  },
                  "INTEGRATE_URL": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"INTEGRATE_URL\"]"
                  },
                  "OTP_TEMPLATE_NAME": "all-tracker-otp-template-dev",
                  "CONFIGURATION_SET_NAME": "all-tracker-fakeShop-configurationSet-dev"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "LambdaExecutionRole",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CreateEntryLogGroup",
              "LambdaExecutionRole"
            ]
          },
          "LoginAppleLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/all-tracker/dev/1682874024478-2023-04-30T17:00:24.478Z/all-tracker.zip"
              },
              "Handler": "authentication/loginApple/index.handler",
              "Runtime": "nodejs14.x",
              "FunctionName": "all-tracker-dev-loginApple",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "ALL_TRACKER_TABLE_NAME": "dev-all-tracker-table",
                  "ACCESS_TOKEN_SECRET": "d3340691248ce92a2271fe059bfa813fcd7d2dhdhfgabenr58274019ulmgnsqifc9f8eaf48f5a70ada7403a503600243adbb40ed3976d68b75773313ca1ea",
                  "ENCRYPTER": "MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAivL/9KLDKgqIXHhwtM6qzBqq60Fc4ayrvmKVk76Wgeeo0ElxMrAZqKqNFyQsn9bWTvR2FBs+0P1T+KS75WM7pDiN/4DQerxfkGJOY6R0v+mseYc8ZVMYcQ5Py9euDWo4hGL220lMI0R9Yd/dVBCkhbW+HMebk/tPRlWC1J22w3RiK0q3wsMaG1E97Bei9vJZ+BhLk5SvEE5ggYLhiG8ft7oWBEAaCIISq1whfZstvidPvhu4rLiKZXGpKpr9m53AzUi+zJKeiqbE0fcviGdGfQvDpkriyJ1Udq5pxnfJX79PlaG6EUyeFwd3LeOTGIZ/FJY1ZnHT5LAInjMKTC2NgwIDAQAB",
                  "DECRYPTER": "MIIEvAIBADANBgkqhkiG9w0BAQEFAASCBKYwggSiAgEAAoIBAQCK8v/0osMqCohceHC0zqrMGqrrQVzhrKu+YpWTvpaB56jQSXEysBmoqo0XJCyf1tZO9HYUGz7Q/VP4pLvlYzukOI3/gNB6vF+QYk5jpHS/6ax5hzxlUxhxDk/L164NajiEYvbbSUwjRH1h391UEKSFtb4cx5uT+09GVYLUnbbDdGIrSrfCwxobUT3sF6L28ln4GEuTlK8QTmCBguGIbx+3uhYEQBoIghKrXCF9my2+J0++G7isuIplcakqmv2bncDNSL7Mkp6KpsTR9y+IZ0Z9C8OmSuLInVR2rmnGd8lfv0+VoboRTJ4XB3ct45MYhn8UljVmcdPksAieMwpMLY2DAgMBAAECggEAMNK5xUf7s6YHzBY15BJKSXWFYSySamm13yvcyxFI6VRxKN7le54NJgrnkJ4RYAipPQ0BAIeiRuT8wH2B2FRJ/KYynviwSLAwFBe226RJsbV1+S3ftuq/x9nzh/i9G9GbEkmD3AGhUzMZq25x4rwGU0VNC+fHbvP7Iweg9PyF359YQfkzqWytuf/UsssJ4MU/g5ZzoyN/87dPlhvVspdJVRD1MX0LoL9VBIVY0LBiRbp8GIiiyWWQF7NqcE2jor4CH6fZIzMZqlx7I37dFhOcMRNVsvJNjTGikNNhqpMuRsSkhMdh7djPSYUxDKM4KKX1kcQfvBKPyJJ2/1NjBhEowQKBgQD1gi8MzODnCrlq4v2BxI5ybLaYRMXlD1cdhUVlKDWso5pR0FV05pqncYYhEIgXJNQKhUQrouvyaypikoMercnI1VkQjRcASnk3r1QWvLnqoZZre9pTM0x0V2wcRayY/xd+Up/xw7A1CQ28HdjyNq2XScKQjF23sQ5yU4h6D6nkOwKBgQCQ4xPeKHCBV63wcaX5C3JDrAshb7kwHDAwHYIlXspezCZpVAqxm5+VhCjUeC2aPngz4/1bH37ZBQuIL9w9jUVDMG7Cn+4zmePDTA8DZXA8ME7N+sU4vl5aEcN/doMkWYId6HjWKdQdnJPqcd4EwgeG/UdU/GHL8oFxGMqklh1PWQKBgFiwZcTPAnQUaLUXORM26WqmoTPSrFa6OvM8ILyRUQqDs4zYoPZxE+9nUFgDe9Y4hK0kRWMqIOhbFF21pc5gY6O8hsc24NdHEBEwskTgep0rMIa1oEIsJvNkXXa9KMPAa0FEIemZkr8l/SM2+RdO71jW2YWUX4qrWJeuW4AUxn/fAoGAPmInmc4bsvVHpXGpnvO4vT6EhF8Qg5B/hxgNg32u8OZB27Qd7p8tNTl0QxeDuxgOtXkDC4siGNs9PeQtlisPmYBvEEnATGOEWACVrkas7p12MOY6qNX+1hUz8dvbV3latvnznXLhK+bRIW7pw26vwwWnAwawLRo7dbDQ/9DKyfECgYAGZ9NgSXxEjGqyltrXbto9j4t9XagsD7bhDqtlaJuIy9p5RG9f0AhOuvibKbGJYDAulm8Wa41xm9nimAMPlzDc1qLYWPD1rOUSg5hmBz52Y2lEH31iwZxde+gnA/rB1+fQbstmP7eDCFT1s4+Gr+xK7hc8ceexfuo6KO8fI8rSYw==",
                  "NOTION_CLIENT_ID": "48daaa94-6352-4aef-ac2b-8ba6cdfcfc0b",
                  "NOTION_CLIENT_SECRET": "secret_wPW0WE1YOEIAVaUv6PFxscbzZs1A0cY9xUOc22LZiXj",
                  "SEND_OTP_URL": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"SEND_OTP_URL\"]"
                  },
                  "INTEGRATE_URL": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"INTEGRATE_URL\"]"
                  },
                  "OTP_TEMPLATE_NAME": "all-tracker-otp-template-dev",
                  "CONFIGURATION_SET_NAME": "all-tracker-fakeShop-configurationSet-dev"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "LambdaExecutionRole",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "LoginAppleLogGroup",
              "LambdaExecutionRole"
            ]
          },
          "LoginGoogleLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/all-tracker/dev/1682874024478-2023-04-30T17:00:24.478Z/all-tracker.zip"
              },
              "Handler": "authentication/loginGoogle/index.handler",
              "Runtime": "nodejs14.x",
              "FunctionName": "all-tracker-dev-loginGoogle",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "ALL_TRACKER_TABLE_NAME": "dev-all-tracker-table",
                  "ACCESS_TOKEN_SECRET": "d3340691248ce92a2271fe059bfa813fcd7d2dhdhfgabenr58274019ulmgnsqifc9f8eaf48f5a70ada7403a503600243adbb40ed3976d68b75773313ca1ea",
                  "ENCRYPTER": "MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAivL/9KLDKgqIXHhwtM6qzBqq60Fc4ayrvmKVk76Wgeeo0ElxMrAZqKqNFyQsn9bWTvR2FBs+0P1T+KS75WM7pDiN/4DQerxfkGJOY6R0v+mseYc8ZVMYcQ5Py9euDWo4hGL220lMI0R9Yd/dVBCkhbW+HMebk/tPRlWC1J22w3RiK0q3wsMaG1E97Bei9vJZ+BhLk5SvEE5ggYLhiG8ft7oWBEAaCIISq1whfZstvidPvhu4rLiKZXGpKpr9m53AzUi+zJKeiqbE0fcviGdGfQvDpkriyJ1Udq5pxnfJX79PlaG6EUyeFwd3LeOTGIZ/FJY1ZnHT5LAInjMKTC2NgwIDAQAB",
                  "DECRYPTER": "MIIEvAIBADANBgkqhkiG9w0BAQEFAASCBKYwggSiAgEAAoIBAQCK8v/0osMqCohceHC0zqrMGqrrQVzhrKu+YpWTvpaB56jQSXEysBmoqo0XJCyf1tZO9HYUGz7Q/VP4pLvlYzukOI3/gNB6vF+QYk5jpHS/6ax5hzxlUxhxDk/L164NajiEYvbbSUwjRH1h391UEKSFtb4cx5uT+09GVYLUnbbDdGIrSrfCwxobUT3sF6L28ln4GEuTlK8QTmCBguGIbx+3uhYEQBoIghKrXCF9my2+J0++G7isuIplcakqmv2bncDNSL7Mkp6KpsTR9y+IZ0Z9C8OmSuLInVR2rmnGd8lfv0+VoboRTJ4XB3ct45MYhn8UljVmcdPksAieMwpMLY2DAgMBAAECggEAMNK5xUf7s6YHzBY15BJKSXWFYSySamm13yvcyxFI6VRxKN7le54NJgrnkJ4RYAipPQ0BAIeiRuT8wH2B2FRJ/KYynviwSLAwFBe226RJsbV1+S3ftuq/x9nzh/i9G9GbEkmD3AGhUzMZq25x4rwGU0VNC+fHbvP7Iweg9PyF359YQfkzqWytuf/UsssJ4MU/g5ZzoyN/87dPlhvVspdJVRD1MX0LoL9VBIVY0LBiRbp8GIiiyWWQF7NqcE2jor4CH6fZIzMZqlx7I37dFhOcMRNVsvJNjTGikNNhqpMuRsSkhMdh7djPSYUxDKM4KKX1kcQfvBKPyJJ2/1NjBhEowQKBgQD1gi8MzODnCrlq4v2BxI5ybLaYRMXlD1cdhUVlKDWso5pR0FV05pqncYYhEIgXJNQKhUQrouvyaypikoMercnI1VkQjRcASnk3r1QWvLnqoZZre9pTM0x0V2wcRayY/xd+Up/xw7A1CQ28HdjyNq2XScKQjF23sQ5yU4h6D6nkOwKBgQCQ4xPeKHCBV63wcaX5C3JDrAshb7kwHDAwHYIlXspezCZpVAqxm5+VhCjUeC2aPngz4/1bH37ZBQuIL9w9jUVDMG7Cn+4zmePDTA8DZXA8ME7N+sU4vl5aEcN/doMkWYId6HjWKdQdnJPqcd4EwgeG/UdU/GHL8oFxGMqklh1PWQKBgFiwZcTPAnQUaLUXORM26WqmoTPSrFa6OvM8ILyRUQqDs4zYoPZxE+9nUFgDe9Y4hK0kRWMqIOhbFF21pc5gY6O8hsc24NdHEBEwskTgep0rMIa1oEIsJvNkXXa9KMPAa0FEIemZkr8l/SM2+RdO71jW2YWUX4qrWJeuW4AUxn/fAoGAPmInmc4bsvVHpXGpnvO4vT6EhF8Qg5B/hxgNg32u8OZB27Qd7p8tNTl0QxeDuxgOtXkDC4siGNs9PeQtlisPmYBvEEnATGOEWACVrkas7p12MOY6qNX+1hUz8dvbV3latvnznXLhK+bRIW7pw26vwwWnAwawLRo7dbDQ/9DKyfECgYAGZ9NgSXxEjGqyltrXbto9j4t9XagsD7bhDqtlaJuIy9p5RG9f0AhOuvibKbGJYDAulm8Wa41xm9nimAMPlzDc1qLYWPD1rOUSg5hmBz52Y2lEH31iwZxde+gnA/rB1+fQbstmP7eDCFT1s4+Gr+xK7hc8ceexfuo6KO8fI8rSYw==",
                  "NOTION_CLIENT_ID": "48daaa94-6352-4aef-ac2b-8ba6cdfcfc0b",
                  "NOTION_CLIENT_SECRET": "secret_wPW0WE1YOEIAVaUv6PFxscbzZs1A0cY9xUOc22LZiXj",
                  "SEND_OTP_URL": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"SEND_OTP_URL\"]"
                  },
                  "INTEGRATE_URL": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"INTEGRATE_URL\"]"
                  },
                  "OTP_TEMPLATE_NAME": "all-tracker-otp-template-dev",
                  "CONFIGURATION_SET_NAME": "all-tracker-fakeShop-configurationSet-dev"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "LambdaExecutionRole",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "LoginGoogleLogGroup",
              "LambdaExecutionRole"
            ]
          },
          "LoginOTPLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/all-tracker/dev/1682874024478-2023-04-30T17:00:24.478Z/all-tracker.zip"
              },
              "Handler": "authentication/loginOTP/index.handler",
              "Runtime": "nodejs14.x",
              "FunctionName": "all-tracker-dev-loginOTP",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "ALL_TRACKER_TABLE_NAME": "dev-all-tracker-table",
                  "ACCESS_TOKEN_SECRET": "d3340691248ce92a2271fe059bfa813fcd7d2dhdhfgabenr58274019ulmgnsqifc9f8eaf48f5a70ada7403a503600243adbb40ed3976d68b75773313ca1ea",
                  "ENCRYPTER": "MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAivL/9KLDKgqIXHhwtM6qzBqq60Fc4ayrvmKVk76Wgeeo0ElxMrAZqKqNFyQsn9bWTvR2FBs+0P1T+KS75WM7pDiN/4DQerxfkGJOY6R0v+mseYc8ZVMYcQ5Py9euDWo4hGL220lMI0R9Yd/dVBCkhbW+HMebk/tPRlWC1J22w3RiK0q3wsMaG1E97Bei9vJZ+BhLk5SvEE5ggYLhiG8ft7oWBEAaCIISq1whfZstvidPvhu4rLiKZXGpKpr9m53AzUi+zJKeiqbE0fcviGdGfQvDpkriyJ1Udq5pxnfJX79PlaG6EUyeFwd3LeOTGIZ/FJY1ZnHT5LAInjMKTC2NgwIDAQAB",
                  "DECRYPTER": "MIIEvAIBADANBgkqhkiG9w0BAQEFAASCBKYwggSiAgEAAoIBAQCK8v/0osMqCohceHC0zqrMGqrrQVzhrKu+YpWTvpaB56jQSXEysBmoqo0XJCyf1tZO9HYUGz7Q/VP4pLvlYzukOI3/gNB6vF+QYk5jpHS/6ax5hzxlUxhxDk/L164NajiEYvbbSUwjRH1h391UEKSFtb4cx5uT+09GVYLUnbbDdGIrSrfCwxobUT3sF6L28ln4GEuTlK8QTmCBguGIbx+3uhYEQBoIghKrXCF9my2+J0++G7isuIplcakqmv2bncDNSL7Mkp6KpsTR9y+IZ0Z9C8OmSuLInVR2rmnGd8lfv0+VoboRTJ4XB3ct45MYhn8UljVmcdPksAieMwpMLY2DAgMBAAECggEAMNK5xUf7s6YHzBY15BJKSXWFYSySamm13yvcyxFI6VRxKN7le54NJgrnkJ4RYAipPQ0BAIeiRuT8wH2B2FRJ/KYynviwSLAwFBe226RJsbV1+S3ftuq/x9nzh/i9G9GbEkmD3AGhUzMZq25x4rwGU0VNC+fHbvP7Iweg9PyF359YQfkzqWytuf/UsssJ4MU/g5ZzoyN/87dPlhvVspdJVRD1MX0LoL9VBIVY0LBiRbp8GIiiyWWQF7NqcE2jor4CH6fZIzMZqlx7I37dFhOcMRNVsvJNjTGikNNhqpMuRsSkhMdh7djPSYUxDKM4KKX1kcQfvBKPyJJ2/1NjBhEowQKBgQD1gi8MzODnCrlq4v2BxI5ybLaYRMXlD1cdhUVlKDWso5pR0FV05pqncYYhEIgXJNQKhUQrouvyaypikoMercnI1VkQjRcASnk3r1QWvLnqoZZre9pTM0x0V2wcRayY/xd+Up/xw7A1CQ28HdjyNq2XScKQjF23sQ5yU4h6D6nkOwKBgQCQ4xPeKHCBV63wcaX5C3JDrAshb7kwHDAwHYIlXspezCZpVAqxm5+VhCjUeC2aPngz4/1bH37ZBQuIL9w9jUVDMG7Cn+4zmePDTA8DZXA8ME7N+sU4vl5aEcN/doMkWYId6HjWKdQdnJPqcd4EwgeG/UdU/GHL8oFxGMqklh1PWQKBgFiwZcTPAnQUaLUXORM26WqmoTPSrFa6OvM8ILyRUQqDs4zYoPZxE+9nUFgDe9Y4hK0kRWMqIOhbFF21pc5gY6O8hsc24NdHEBEwskTgep0rMIa1oEIsJvNkXXa9KMPAa0FEIemZkr8l/SM2+RdO71jW2YWUX4qrWJeuW4AUxn/fAoGAPmInmc4bsvVHpXGpnvO4vT6EhF8Qg5B/hxgNg32u8OZB27Qd7p8tNTl0QxeDuxgOtXkDC4siGNs9PeQtlisPmYBvEEnATGOEWACVrkas7p12MOY6qNX+1hUz8dvbV3latvnznXLhK+bRIW7pw26vwwWnAwawLRo7dbDQ/9DKyfECgYAGZ9NgSXxEjGqyltrXbto9j4t9XagsD7bhDqtlaJuIy9p5RG9f0AhOuvibKbGJYDAulm8Wa41xm9nimAMPlzDc1qLYWPD1rOUSg5hmBz52Y2lEH31iwZxde+gnA/rB1+fQbstmP7eDCFT1s4+Gr+xK7hc8ceexfuo6KO8fI8rSYw==",
                  "NOTION_CLIENT_ID": "48daaa94-6352-4aef-ac2b-8ba6cdfcfc0b",
                  "NOTION_CLIENT_SECRET": "secret_wPW0WE1YOEIAVaUv6PFxscbzZs1A0cY9xUOc22LZiXj",
                  "SEND_OTP_URL": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"SEND_OTP_URL\"]"
                  },
                  "INTEGRATE_URL": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"INTEGRATE_URL\"]"
                  },
                  "OTP_TEMPLATE_NAME": "all-tracker-otp-template-dev",
                  "CONFIGURATION_SET_NAME": "all-tracker-fakeShop-configurationSet-dev"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "LambdaExecutionRole",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "LoginOTPLogGroup",
              "LambdaExecutionRole"
            ]
          },
          "RequestOTPLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/all-tracker/dev/1682874024478-2023-04-30T17:00:24.478Z/all-tracker.zip"
              },
              "Handler": "authentication/requestOTP/index.handler",
              "Runtime": "nodejs14.x",
              "FunctionName": "all-tracker-dev-requestOTP",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "ALL_TRACKER_TABLE_NAME": "dev-all-tracker-table",
                  "ACCESS_TOKEN_SECRET": "d3340691248ce92a2271fe059bfa813fcd7d2dhdhfgabenr58274019ulmgnsqifc9f8eaf48f5a70ada7403a503600243adbb40ed3976d68b75773313ca1ea",
                  "ENCRYPTER": "MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAivL/9KLDKgqIXHhwtM6qzBqq60Fc4ayrvmKVk76Wgeeo0ElxMrAZqKqNFyQsn9bWTvR2FBs+0P1T+KS75WM7pDiN/4DQerxfkGJOY6R0v+mseYc8ZVMYcQ5Py9euDWo4hGL220lMI0R9Yd/dVBCkhbW+HMebk/tPRlWC1J22w3RiK0q3wsMaG1E97Bei9vJZ+BhLk5SvEE5ggYLhiG8ft7oWBEAaCIISq1whfZstvidPvhu4rLiKZXGpKpr9m53AzUi+zJKeiqbE0fcviGdGfQvDpkriyJ1Udq5pxnfJX79PlaG6EUyeFwd3LeOTGIZ/FJY1ZnHT5LAInjMKTC2NgwIDAQAB",
                  "DECRYPTER": "MIIEvAIBADANBgkqhkiG9w0BAQEFAASCBKYwggSiAgEAAoIBAQCK8v/0osMqCohceHC0zqrMGqrrQVzhrKu+YpWTvpaB56jQSXEysBmoqo0XJCyf1tZO9HYUGz7Q/VP4pLvlYzukOI3/gNB6vF+QYk5jpHS/6ax5hzxlUxhxDk/L164NajiEYvbbSUwjRH1h391UEKSFtb4cx5uT+09GVYLUnbbDdGIrSrfCwxobUT3sF6L28ln4GEuTlK8QTmCBguGIbx+3uhYEQBoIghKrXCF9my2+J0++G7isuIplcakqmv2bncDNSL7Mkp6KpsTR9y+IZ0Z9C8OmSuLInVR2rmnGd8lfv0+VoboRTJ4XB3ct45MYhn8UljVmcdPksAieMwpMLY2DAgMBAAECggEAMNK5xUf7s6YHzBY15BJKSXWFYSySamm13yvcyxFI6VRxKN7le54NJgrnkJ4RYAipPQ0BAIeiRuT8wH2B2FRJ/KYynviwSLAwFBe226RJsbV1+S3ftuq/x9nzh/i9G9GbEkmD3AGhUzMZq25x4rwGU0VNC+fHbvP7Iweg9PyF359YQfkzqWytuf/UsssJ4MU/g5ZzoyN/87dPlhvVspdJVRD1MX0LoL9VBIVY0LBiRbp8GIiiyWWQF7NqcE2jor4CH6fZIzMZqlx7I37dFhOcMRNVsvJNjTGikNNhqpMuRsSkhMdh7djPSYUxDKM4KKX1kcQfvBKPyJJ2/1NjBhEowQKBgQD1gi8MzODnCrlq4v2BxI5ybLaYRMXlD1cdhUVlKDWso5pR0FV05pqncYYhEIgXJNQKhUQrouvyaypikoMercnI1VkQjRcASnk3r1QWvLnqoZZre9pTM0x0V2wcRayY/xd+Up/xw7A1CQ28HdjyNq2XScKQjF23sQ5yU4h6D6nkOwKBgQCQ4xPeKHCBV63wcaX5C3JDrAshb7kwHDAwHYIlXspezCZpVAqxm5+VhCjUeC2aPngz4/1bH37ZBQuIL9w9jUVDMG7Cn+4zmePDTA8DZXA8ME7N+sU4vl5aEcN/doMkWYId6HjWKdQdnJPqcd4EwgeG/UdU/GHL8oFxGMqklh1PWQKBgFiwZcTPAnQUaLUXORM26WqmoTPSrFa6OvM8ILyRUQqDs4zYoPZxE+9nUFgDe9Y4hK0kRWMqIOhbFF21pc5gY6O8hsc24NdHEBEwskTgep0rMIa1oEIsJvNkXXa9KMPAa0FEIemZkr8l/SM2+RdO71jW2YWUX4qrWJeuW4AUxn/fAoGAPmInmc4bsvVHpXGpnvO4vT6EhF8Qg5B/hxgNg32u8OZB27Qd7p8tNTl0QxeDuxgOtXkDC4siGNs9PeQtlisPmYBvEEnATGOEWACVrkas7p12MOY6qNX+1hUz8dvbV3latvnznXLhK+bRIW7pw26vwwWnAwawLRo7dbDQ/9DKyfECgYAGZ9NgSXxEjGqyltrXbto9j4t9XagsD7bhDqtlaJuIy9p5RG9f0AhOuvibKbGJYDAulm8Wa41xm9nimAMPlzDc1qLYWPD1rOUSg5hmBz52Y2lEH31iwZxde+gnA/rB1+fQbstmP7eDCFT1s4+Gr+xK7hc8ceexfuo6KO8fI8rSYw==",
                  "NOTION_CLIENT_ID": "48daaa94-6352-4aef-ac2b-8ba6cdfcfc0b",
                  "NOTION_CLIENT_SECRET": "secret_wPW0WE1YOEIAVaUv6PFxscbzZs1A0cY9xUOc22LZiXj",
                  "SEND_OTP_URL": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"SEND_OTP_URL\"]"
                  },
                  "INTEGRATE_URL": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"INTEGRATE_URL\"]"
                  },
                  "OTP_TEMPLATE_NAME": "all-tracker-otp-template-dev",
                  "CONFIGURATION_SET_NAME": "all-tracker-fakeShop-configurationSet-dev"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "requestOTPRole",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "RequestOTPLogGroup",
              "requestOTPRole"
            ]
          },
          "UserExistsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/all-tracker/dev/1682874024478-2023-04-30T17:00:24.478Z/all-tracker.zip"
              },
              "Handler": "authentication/userExists/index.handler",
              "Runtime": "nodejs14.x",
              "FunctionName": "all-tracker-dev-userExists",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "ALL_TRACKER_TABLE_NAME": "dev-all-tracker-table",
                  "ACCESS_TOKEN_SECRET": "d3340691248ce92a2271fe059bfa813fcd7d2dhdhfgabenr58274019ulmgnsqifc9f8eaf48f5a70ada7403a503600243adbb40ed3976d68b75773313ca1ea",
                  "ENCRYPTER": "MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAivL/9KLDKgqIXHhwtM6qzBqq60Fc4ayrvmKVk76Wgeeo0ElxMrAZqKqNFyQsn9bWTvR2FBs+0P1T+KS75WM7pDiN/4DQerxfkGJOY6R0v+mseYc8ZVMYcQ5Py9euDWo4hGL220lMI0R9Yd/dVBCkhbW+HMebk/tPRlWC1J22w3RiK0q3wsMaG1E97Bei9vJZ+BhLk5SvEE5ggYLhiG8ft7oWBEAaCIISq1whfZstvidPvhu4rLiKZXGpKpr9m53AzUi+zJKeiqbE0fcviGdGfQvDpkriyJ1Udq5pxnfJX79PlaG6EUyeFwd3LeOTGIZ/FJY1ZnHT5LAInjMKTC2NgwIDAQAB",
                  "DECRYPTER": "MIIEvAIBADANBgkqhkiG9w0BAQEFAASCBKYwggSiAgEAAoIBAQCK8v/0osMqCohceHC0zqrMGqrrQVzhrKu+YpWTvpaB56jQSXEysBmoqo0XJCyf1tZO9HYUGz7Q/VP4pLvlYzukOI3/gNB6vF+QYk5jpHS/6ax5hzxlUxhxDk/L164NajiEYvbbSUwjRH1h391UEKSFtb4cx5uT+09GVYLUnbbDdGIrSrfCwxobUT3sF6L28ln4GEuTlK8QTmCBguGIbx+3uhYEQBoIghKrXCF9my2+J0++G7isuIplcakqmv2bncDNSL7Mkp6KpsTR9y+IZ0Z9C8OmSuLInVR2rmnGd8lfv0+VoboRTJ4XB3ct45MYhn8UljVmcdPksAieMwpMLY2DAgMBAAECggEAMNK5xUf7s6YHzBY15BJKSXWFYSySamm13yvcyxFI6VRxKN7le54NJgrnkJ4RYAipPQ0BAIeiRuT8wH2B2FRJ/KYynviwSLAwFBe226RJsbV1+S3ftuq/x9nzh/i9G9GbEkmD3AGhUzMZq25x4rwGU0VNC+fHbvP7Iweg9PyF359YQfkzqWytuf/UsssJ4MU/g5ZzoyN/87dPlhvVspdJVRD1MX0LoL9VBIVY0LBiRbp8GIiiyWWQF7NqcE2jor4CH6fZIzMZqlx7I37dFhOcMRNVsvJNjTGikNNhqpMuRsSkhMdh7djPSYUxDKM4KKX1kcQfvBKPyJJ2/1NjBhEowQKBgQD1gi8MzODnCrlq4v2BxI5ybLaYRMXlD1cdhUVlKDWso5pR0FV05pqncYYhEIgXJNQKhUQrouvyaypikoMercnI1VkQjRcASnk3r1QWvLnqoZZre9pTM0x0V2wcRayY/xd+Up/xw7A1CQ28HdjyNq2XScKQjF23sQ5yU4h6D6nkOwKBgQCQ4xPeKHCBV63wcaX5C3JDrAshb7kwHDAwHYIlXspezCZpVAqxm5+VhCjUeC2aPngz4/1bH37ZBQuIL9w9jUVDMG7Cn+4zmePDTA8DZXA8ME7N+sU4vl5aEcN/doMkWYId6HjWKdQdnJPqcd4EwgeG/UdU/GHL8oFxGMqklh1PWQKBgFiwZcTPAnQUaLUXORM26WqmoTPSrFa6OvM8ILyRUQqDs4zYoPZxE+9nUFgDe9Y4hK0kRWMqIOhbFF21pc5gY6O8hsc24NdHEBEwskTgep0rMIa1oEIsJvNkXXa9KMPAa0FEIemZkr8l/SM2+RdO71jW2YWUX4qrWJeuW4AUxn/fAoGAPmInmc4bsvVHpXGpnvO4vT6EhF8Qg5B/hxgNg32u8OZB27Qd7p8tNTl0QxeDuxgOtXkDC4siGNs9PeQtlisPmYBvEEnATGOEWACVrkas7p12MOY6qNX+1hUz8dvbV3latvnznXLhK+bRIW7pw26vwwWnAwawLRo7dbDQ/9DKyfECgYAGZ9NgSXxEjGqyltrXbto9j4t9XagsD7bhDqtlaJuIy9p5RG9f0AhOuvibKbGJYDAulm8Wa41xm9nimAMPlzDc1qLYWPD1rOUSg5hmBz52Y2lEH31iwZxde+gnA/rB1+fQbstmP7eDCFT1s4+Gr+xK7hc8ceexfuo6KO8fI8rSYw==",
                  "NOTION_CLIENT_ID": "48daaa94-6352-4aef-ac2b-8ba6cdfcfc0b",
                  "NOTION_CLIENT_SECRET": "secret_wPW0WE1YOEIAVaUv6PFxscbzZs1A0cY9xUOc22LZiXj",
                  "SEND_OTP_URL": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"SEND_OTP_URL\"]"
                  },
                  "INTEGRATE_URL": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"INTEGRATE_URL\"]"
                  },
                  "OTP_TEMPLATE_NAME": "all-tracker-otp-template-dev",
                  "CONFIGURATION_SET_NAME": "all-tracker-fakeShop-configurationSet-dev"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "LambdaExecutionRole",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UserExistsLogGroup",
              "LambdaExecutionRole"
            ]
          },
          "RefreshTokenLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/all-tracker/dev/1682874024478-2023-04-30T17:00:24.478Z/all-tracker.zip"
              },
              "Handler": "authentication/refreshToken/index.handler",
              "Runtime": "nodejs14.x",
              "FunctionName": "all-tracker-dev-refreshToken",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "ALL_TRACKER_TABLE_NAME": "dev-all-tracker-table",
                  "ACCESS_TOKEN_SECRET": "d3340691248ce92a2271fe059bfa813fcd7d2dhdhfgabenr58274019ulmgnsqifc9f8eaf48f5a70ada7403a503600243adbb40ed3976d68b75773313ca1ea",
                  "ENCRYPTER": "MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAivL/9KLDKgqIXHhwtM6qzBqq60Fc4ayrvmKVk76Wgeeo0ElxMrAZqKqNFyQsn9bWTvR2FBs+0P1T+KS75WM7pDiN/4DQerxfkGJOY6R0v+mseYc8ZVMYcQ5Py9euDWo4hGL220lMI0R9Yd/dVBCkhbW+HMebk/tPRlWC1J22w3RiK0q3wsMaG1E97Bei9vJZ+BhLk5SvEE5ggYLhiG8ft7oWBEAaCIISq1whfZstvidPvhu4rLiKZXGpKpr9m53AzUi+zJKeiqbE0fcviGdGfQvDpkriyJ1Udq5pxnfJX79PlaG6EUyeFwd3LeOTGIZ/FJY1ZnHT5LAInjMKTC2NgwIDAQAB",
                  "DECRYPTER": "MIIEvAIBADANBgkqhkiG9w0BAQEFAASCBKYwggSiAgEAAoIBAQCK8v/0osMqCohceHC0zqrMGqrrQVzhrKu+YpWTvpaB56jQSXEysBmoqo0XJCyf1tZO9HYUGz7Q/VP4pLvlYzukOI3/gNB6vF+QYk5jpHS/6ax5hzxlUxhxDk/L164NajiEYvbbSUwjRH1h391UEKSFtb4cx5uT+09GVYLUnbbDdGIrSrfCwxobUT3sF6L28ln4GEuTlK8QTmCBguGIbx+3uhYEQBoIghKrXCF9my2+J0++G7isuIplcakqmv2bncDNSL7Mkp6KpsTR9y+IZ0Z9C8OmSuLInVR2rmnGd8lfv0+VoboRTJ4XB3ct45MYhn8UljVmcdPksAieMwpMLY2DAgMBAAECggEAMNK5xUf7s6YHzBY15BJKSXWFYSySamm13yvcyxFI6VRxKN7le54NJgrnkJ4RYAipPQ0BAIeiRuT8wH2B2FRJ/KYynviwSLAwFBe226RJsbV1+S3ftuq/x9nzh/i9G9GbEkmD3AGhUzMZq25x4rwGU0VNC+fHbvP7Iweg9PyF359YQfkzqWytuf/UsssJ4MU/g5ZzoyN/87dPlhvVspdJVRD1MX0LoL9VBIVY0LBiRbp8GIiiyWWQF7NqcE2jor4CH6fZIzMZqlx7I37dFhOcMRNVsvJNjTGikNNhqpMuRsSkhMdh7djPSYUxDKM4KKX1kcQfvBKPyJJ2/1NjBhEowQKBgQD1gi8MzODnCrlq4v2BxI5ybLaYRMXlD1cdhUVlKDWso5pR0FV05pqncYYhEIgXJNQKhUQrouvyaypikoMercnI1VkQjRcASnk3r1QWvLnqoZZre9pTM0x0V2wcRayY/xd+Up/xw7A1CQ28HdjyNq2XScKQjF23sQ5yU4h6D6nkOwKBgQCQ4xPeKHCBV63wcaX5C3JDrAshb7kwHDAwHYIlXspezCZpVAqxm5+VhCjUeC2aPngz4/1bH37ZBQuIL9w9jUVDMG7Cn+4zmePDTA8DZXA8ME7N+sU4vl5aEcN/doMkWYId6HjWKdQdnJPqcd4EwgeG/UdU/GHL8oFxGMqklh1PWQKBgFiwZcTPAnQUaLUXORM26WqmoTPSrFa6OvM8ILyRUQqDs4zYoPZxE+9nUFgDe9Y4hK0kRWMqIOhbFF21pc5gY6O8hsc24NdHEBEwskTgep0rMIa1oEIsJvNkXXa9KMPAa0FEIemZkr8l/SM2+RdO71jW2YWUX4qrWJeuW4AUxn/fAoGAPmInmc4bsvVHpXGpnvO4vT6EhF8Qg5B/hxgNg32u8OZB27Qd7p8tNTl0QxeDuxgOtXkDC4siGNs9PeQtlisPmYBvEEnATGOEWACVrkas7p12MOY6qNX+1hUz8dvbV3latvnznXLhK+bRIW7pw26vwwWnAwawLRo7dbDQ/9DKyfECgYAGZ9NgSXxEjGqyltrXbto9j4t9XagsD7bhDqtlaJuIy9p5RG9f0AhOuvibKbGJYDAulm8Wa41xm9nimAMPlzDc1qLYWPD1rOUSg5hmBz52Y2lEH31iwZxde+gnA/rB1+fQbstmP7eDCFT1s4+Gr+xK7hc8ceexfuo6KO8fI8rSYw==",
                  "NOTION_CLIENT_ID": "48daaa94-6352-4aef-ac2b-8ba6cdfcfc0b",
                  "NOTION_CLIENT_SECRET": "secret_wPW0WE1YOEIAVaUv6PFxscbzZs1A0cY9xUOc22LZiXj",
                  "SEND_OTP_URL": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"SEND_OTP_URL\"]"
                  },
                  "INTEGRATE_URL": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"INTEGRATE_URL\"]"
                  },
                  "OTP_TEMPLATE_NAME": "all-tracker-otp-template-dev",
                  "CONFIGURATION_SET_NAME": "all-tracker-fakeShop-configurationSet-dev"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "LambdaExecutionRole",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "RefreshTokenLogGroup",
              "LambdaExecutionRole"
            ]
          },
          "SendOTPEmailLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/all-tracker/dev/1682874024478-2023-04-30T17:00:24.478Z/all-tracker.zip"
              },
              "Handler": "authentication/sendOTPEmail/index.handler",
              "Runtime": "nodejs14.x",
              "FunctionName": "all-tracker-dev-sendOTPEmail",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "ALL_TRACKER_TABLE_NAME": "dev-all-tracker-table",
                  "ACCESS_TOKEN_SECRET": "d3340691248ce92a2271fe059bfa813fcd7d2dhdhfgabenr58274019ulmgnsqifc9f8eaf48f5a70ada7403a503600243adbb40ed3976d68b75773313ca1ea",
                  "ENCRYPTER": "MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAivL/9KLDKgqIXHhwtM6qzBqq60Fc4ayrvmKVk76Wgeeo0ElxMrAZqKqNFyQsn9bWTvR2FBs+0P1T+KS75WM7pDiN/4DQerxfkGJOY6R0v+mseYc8ZVMYcQ5Py9euDWo4hGL220lMI0R9Yd/dVBCkhbW+HMebk/tPRlWC1J22w3RiK0q3wsMaG1E97Bei9vJZ+BhLk5SvEE5ggYLhiG8ft7oWBEAaCIISq1whfZstvidPvhu4rLiKZXGpKpr9m53AzUi+zJKeiqbE0fcviGdGfQvDpkriyJ1Udq5pxnfJX79PlaG6EUyeFwd3LeOTGIZ/FJY1ZnHT5LAInjMKTC2NgwIDAQAB",
                  "DECRYPTER": "MIIEvAIBADANBgkqhkiG9w0BAQEFAASCBKYwggSiAgEAAoIBAQCK8v/0osMqCohceHC0zqrMGqrrQVzhrKu+YpWTvpaB56jQSXEysBmoqo0XJCyf1tZO9HYUGz7Q/VP4pLvlYzukOI3/gNB6vF+QYk5jpHS/6ax5hzxlUxhxDk/L164NajiEYvbbSUwjRH1h391UEKSFtb4cx5uT+09GVYLUnbbDdGIrSrfCwxobUT3sF6L28ln4GEuTlK8QTmCBguGIbx+3uhYEQBoIghKrXCF9my2+J0++G7isuIplcakqmv2bncDNSL7Mkp6KpsTR9y+IZ0Z9C8OmSuLInVR2rmnGd8lfv0+VoboRTJ4XB3ct45MYhn8UljVmcdPksAieMwpMLY2DAgMBAAECggEAMNK5xUf7s6YHzBY15BJKSXWFYSySamm13yvcyxFI6VRxKN7le54NJgrnkJ4RYAipPQ0BAIeiRuT8wH2B2FRJ/KYynviwSLAwFBe226RJsbV1+S3ftuq/x9nzh/i9G9GbEkmD3AGhUzMZq25x4rwGU0VNC+fHbvP7Iweg9PyF359YQfkzqWytuf/UsssJ4MU/g5ZzoyN/87dPlhvVspdJVRD1MX0LoL9VBIVY0LBiRbp8GIiiyWWQF7NqcE2jor4CH6fZIzMZqlx7I37dFhOcMRNVsvJNjTGikNNhqpMuRsSkhMdh7djPSYUxDKM4KKX1kcQfvBKPyJJ2/1NjBhEowQKBgQD1gi8MzODnCrlq4v2BxI5ybLaYRMXlD1cdhUVlKDWso5pR0FV05pqncYYhEIgXJNQKhUQrouvyaypikoMercnI1VkQjRcASnk3r1QWvLnqoZZre9pTM0x0V2wcRayY/xd+Up/xw7A1CQ28HdjyNq2XScKQjF23sQ5yU4h6D6nkOwKBgQCQ4xPeKHCBV63wcaX5C3JDrAshb7kwHDAwHYIlXspezCZpVAqxm5+VhCjUeC2aPngz4/1bH37ZBQuIL9w9jUVDMG7Cn+4zmePDTA8DZXA8ME7N+sU4vl5aEcN/doMkWYId6HjWKdQdnJPqcd4EwgeG/UdU/GHL8oFxGMqklh1PWQKBgFiwZcTPAnQUaLUXORM26WqmoTPSrFa6OvM8ILyRUQqDs4zYoPZxE+9nUFgDe9Y4hK0kRWMqIOhbFF21pc5gY6O8hsc24NdHEBEwskTgep0rMIa1oEIsJvNkXXa9KMPAa0FEIemZkr8l/SM2+RdO71jW2YWUX4qrWJeuW4AUxn/fAoGAPmInmc4bsvVHpXGpnvO4vT6EhF8Qg5B/hxgNg32u8OZB27Qd7p8tNTl0QxeDuxgOtXkDC4siGNs9PeQtlisPmYBvEEnATGOEWACVrkas7p12MOY6qNX+1hUz8dvbV3latvnznXLhK+bRIW7pw26vwwWnAwawLRo7dbDQ/9DKyfECgYAGZ9NgSXxEjGqyltrXbto9j4t9XagsD7bhDqtlaJuIy9p5RG9f0AhOuvibKbGJYDAulm8Wa41xm9nimAMPlzDc1qLYWPD1rOUSg5hmBz52Y2lEH31iwZxde+gnA/rB1+fQbstmP7eDCFT1s4+Gr+xK7hc8ceexfuo6KO8fI8rSYw==",
                  "NOTION_CLIENT_ID": "48daaa94-6352-4aef-ac2b-8ba6cdfcfc0b",
                  "NOTION_CLIENT_SECRET": "secret_wPW0WE1YOEIAVaUv6PFxscbzZs1A0cY9xUOc22LZiXj",
                  "SEND_OTP_URL": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"SEND_OTP_URL\"]"
                  },
                  "INTEGRATE_URL": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"INTEGRATE_URL\"]"
                  },
                  "OTP_TEMPLATE_NAME": "all-tracker-otp-template-dev",
                  "CONFIGURATION_SET_NAME": "all-tracker-fakeShop-configurationSet-dev"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "sendOTPEmailRole",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "SendOTPEmailLogGroup",
              "sendOTPEmailRole"
            ]
          },
          "ProcessFailedOTPEmailLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/all-tracker/dev/1682874024478-2023-04-30T17:00:24.478Z/all-tracker.zip"
              },
              "Handler": "authentication/processFailedEmail/index.handler",
              "Runtime": "nodejs14.x",
              "FunctionName": "all-tracker-dev-processFailedOTPEmail",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "ALL_TRACKER_TABLE_NAME": "dev-all-tracker-table",
                  "ACCESS_TOKEN_SECRET": "d3340691248ce92a2271fe059bfa813fcd7d2dhdhfgabenr58274019ulmgnsqifc9f8eaf48f5a70ada7403a503600243adbb40ed3976d68b75773313ca1ea",
                  "ENCRYPTER": "MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAivL/9KLDKgqIXHhwtM6qzBqq60Fc4ayrvmKVk76Wgeeo0ElxMrAZqKqNFyQsn9bWTvR2FBs+0P1T+KS75WM7pDiN/4DQerxfkGJOY6R0v+mseYc8ZVMYcQ5Py9euDWo4hGL220lMI0R9Yd/dVBCkhbW+HMebk/tPRlWC1J22w3RiK0q3wsMaG1E97Bei9vJZ+BhLk5SvEE5ggYLhiG8ft7oWBEAaCIISq1whfZstvidPvhu4rLiKZXGpKpr9m53AzUi+zJKeiqbE0fcviGdGfQvDpkriyJ1Udq5pxnfJX79PlaG6EUyeFwd3LeOTGIZ/FJY1ZnHT5LAInjMKTC2NgwIDAQAB",
                  "DECRYPTER": "MIIEvAIBADANBgkqhkiG9w0BAQEFAASCBKYwggSiAgEAAoIBAQCK8v/0osMqCohceHC0zqrMGqrrQVzhrKu+YpWTvpaB56jQSXEysBmoqo0XJCyf1tZO9HYUGz7Q/VP4pLvlYzukOI3/gNB6vF+QYk5jpHS/6ax5hzxlUxhxDk/L164NajiEYvbbSUwjRH1h391UEKSFtb4cx5uT+09GVYLUnbbDdGIrSrfCwxobUT3sF6L28ln4GEuTlK8QTmCBguGIbx+3uhYEQBoIghKrXCF9my2+J0++G7isuIplcakqmv2bncDNSL7Mkp6KpsTR9y+IZ0Z9C8OmSuLInVR2rmnGd8lfv0+VoboRTJ4XB3ct45MYhn8UljVmcdPksAieMwpMLY2DAgMBAAECggEAMNK5xUf7s6YHzBY15BJKSXWFYSySamm13yvcyxFI6VRxKN7le54NJgrnkJ4RYAipPQ0BAIeiRuT8wH2B2FRJ/KYynviwSLAwFBe226RJsbV1+S3ftuq/x9nzh/i9G9GbEkmD3AGhUzMZq25x4rwGU0VNC+fHbvP7Iweg9PyF359YQfkzqWytuf/UsssJ4MU/g5ZzoyN/87dPlhvVspdJVRD1MX0LoL9VBIVY0LBiRbp8GIiiyWWQF7NqcE2jor4CH6fZIzMZqlx7I37dFhOcMRNVsvJNjTGikNNhqpMuRsSkhMdh7djPSYUxDKM4KKX1kcQfvBKPyJJ2/1NjBhEowQKBgQD1gi8MzODnCrlq4v2BxI5ybLaYRMXlD1cdhUVlKDWso5pR0FV05pqncYYhEIgXJNQKhUQrouvyaypikoMercnI1VkQjRcASnk3r1QWvLnqoZZre9pTM0x0V2wcRayY/xd+Up/xw7A1CQ28HdjyNq2XScKQjF23sQ5yU4h6D6nkOwKBgQCQ4xPeKHCBV63wcaX5C3JDrAshb7kwHDAwHYIlXspezCZpVAqxm5+VhCjUeC2aPngz4/1bH37ZBQuIL9w9jUVDMG7Cn+4zmePDTA8DZXA8ME7N+sU4vl5aEcN/doMkWYId6HjWKdQdnJPqcd4EwgeG/UdU/GHL8oFxGMqklh1PWQKBgFiwZcTPAnQUaLUXORM26WqmoTPSrFa6OvM8ILyRUQqDs4zYoPZxE+9nUFgDe9Y4hK0kRWMqIOhbFF21pc5gY6O8hsc24NdHEBEwskTgep0rMIa1oEIsJvNkXXa9KMPAa0FEIemZkr8l/SM2+RdO71jW2YWUX4qrWJeuW4AUxn/fAoGAPmInmc4bsvVHpXGpnvO4vT6EhF8Qg5B/hxgNg32u8OZB27Qd7p8tNTl0QxeDuxgOtXkDC4siGNs9PeQtlisPmYBvEEnATGOEWACVrkas7p12MOY6qNX+1hUz8dvbV3latvnznXLhK+bRIW7pw26vwwWnAwawLRo7dbDQ/9DKyfECgYAGZ9NgSXxEjGqyltrXbto9j4t9XagsD7bhDqtlaJuIy9p5RG9f0AhOuvibKbGJYDAulm8Wa41xm9nimAMPlzDc1qLYWPD1rOUSg5hmBz52Y2lEH31iwZxde+gnA/rB1+fQbstmP7eDCFT1s4+Gr+xK7hc8ceexfuo6KO8fI8rSYw==",
                  "NOTION_CLIENT_ID": "48daaa94-6352-4aef-ac2b-8ba6cdfcfc0b",
                  "NOTION_CLIENT_SECRET": "secret_wPW0WE1YOEIAVaUv6PFxscbzZs1A0cY9xUOc22LZiXj",
                  "SEND_OTP_URL": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"SEND_OTP_URL\"]"
                  },
                  "INTEGRATE_URL": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"INTEGRATE_URL\"]"
                  },
                  "OTP_TEMPLATE_NAME": "all-tracker-otp-template-dev",
                  "CONFIGURATION_SET_NAME": "all-tracker-fakeShop-configurationSet-dev"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "processFailedOTPEmailRole",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ProcessFailedOTPEmailLogGroup",
              "processFailedOTPEmailRole"
            ]
          },
          "HealthInfoLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/all-tracker/dev/1682874024478-2023-04-30T17:00:24.478Z/all-tracker.zip"
              },
              "Handler": "userInfo/healthInfo/index.handler",
              "Runtime": "nodejs14.x",
              "FunctionName": "all-tracker-dev-healthInfo",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "ALL_TRACKER_TABLE_NAME": "dev-all-tracker-table",
                  "ACCESS_TOKEN_SECRET": "d3340691248ce92a2271fe059bfa813fcd7d2dhdhfgabenr58274019ulmgnsqifc9f8eaf48f5a70ada7403a503600243adbb40ed3976d68b75773313ca1ea",
                  "ENCRYPTER": "MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAivL/9KLDKgqIXHhwtM6qzBqq60Fc4ayrvmKVk76Wgeeo0ElxMrAZqKqNFyQsn9bWTvR2FBs+0P1T+KS75WM7pDiN/4DQerxfkGJOY6R0v+mseYc8ZVMYcQ5Py9euDWo4hGL220lMI0R9Yd/dVBCkhbW+HMebk/tPRlWC1J22w3RiK0q3wsMaG1E97Bei9vJZ+BhLk5SvEE5ggYLhiG8ft7oWBEAaCIISq1whfZstvidPvhu4rLiKZXGpKpr9m53AzUi+zJKeiqbE0fcviGdGfQvDpkriyJ1Udq5pxnfJX79PlaG6EUyeFwd3LeOTGIZ/FJY1ZnHT5LAInjMKTC2NgwIDAQAB",
                  "DECRYPTER": "MIIEvAIBADANBgkqhkiG9w0BAQEFAASCBKYwggSiAgEAAoIBAQCK8v/0osMqCohceHC0zqrMGqrrQVzhrKu+YpWTvpaB56jQSXEysBmoqo0XJCyf1tZO9HYUGz7Q/VP4pLvlYzukOI3/gNB6vF+QYk5jpHS/6ax5hzxlUxhxDk/L164NajiEYvbbSUwjRH1h391UEKSFtb4cx5uT+09GVYLUnbbDdGIrSrfCwxobUT3sF6L28ln4GEuTlK8QTmCBguGIbx+3uhYEQBoIghKrXCF9my2+J0++G7isuIplcakqmv2bncDNSL7Mkp6KpsTR9y+IZ0Z9C8OmSuLInVR2rmnGd8lfv0+VoboRTJ4XB3ct45MYhn8UljVmcdPksAieMwpMLY2DAgMBAAECggEAMNK5xUf7s6YHzBY15BJKSXWFYSySamm13yvcyxFI6VRxKN7le54NJgrnkJ4RYAipPQ0BAIeiRuT8wH2B2FRJ/KYynviwSLAwFBe226RJsbV1+S3ftuq/x9nzh/i9G9GbEkmD3AGhUzMZq25x4rwGU0VNC+fHbvP7Iweg9PyF359YQfkzqWytuf/UsssJ4MU/g5ZzoyN/87dPlhvVspdJVRD1MX0LoL9VBIVY0LBiRbp8GIiiyWWQF7NqcE2jor4CH6fZIzMZqlx7I37dFhOcMRNVsvJNjTGikNNhqpMuRsSkhMdh7djPSYUxDKM4KKX1kcQfvBKPyJJ2/1NjBhEowQKBgQD1gi8MzODnCrlq4v2BxI5ybLaYRMXlD1cdhUVlKDWso5pR0FV05pqncYYhEIgXJNQKhUQrouvyaypikoMercnI1VkQjRcASnk3r1QWvLnqoZZre9pTM0x0V2wcRayY/xd+Up/xw7A1CQ28HdjyNq2XScKQjF23sQ5yU4h6D6nkOwKBgQCQ4xPeKHCBV63wcaX5C3JDrAshb7kwHDAwHYIlXspezCZpVAqxm5+VhCjUeC2aPngz4/1bH37ZBQuIL9w9jUVDMG7Cn+4zmePDTA8DZXA8ME7N+sU4vl5aEcN/doMkWYId6HjWKdQdnJPqcd4EwgeG/UdU/GHL8oFxGMqklh1PWQKBgFiwZcTPAnQUaLUXORM26WqmoTPSrFa6OvM8ILyRUQqDs4zYoPZxE+9nUFgDe9Y4hK0kRWMqIOhbFF21pc5gY6O8hsc24NdHEBEwskTgep0rMIa1oEIsJvNkXXa9KMPAa0FEIemZkr8l/SM2+RdO71jW2YWUX4qrWJeuW4AUxn/fAoGAPmInmc4bsvVHpXGpnvO4vT6EhF8Qg5B/hxgNg32u8OZB27Qd7p8tNTl0QxeDuxgOtXkDC4siGNs9PeQtlisPmYBvEEnATGOEWACVrkas7p12MOY6qNX+1hUz8dvbV3latvnznXLhK+bRIW7pw26vwwWnAwawLRo7dbDQ/9DKyfECgYAGZ9NgSXxEjGqyltrXbto9j4t9XagsD7bhDqtlaJuIy9p5RG9f0AhOuvibKbGJYDAulm8Wa41xm9nimAMPlzDc1qLYWPD1rOUSg5hmBz52Y2lEH31iwZxde+gnA/rB1+fQbstmP7eDCFT1s4+Gr+xK7hc8ceexfuo6KO8fI8rSYw==",
                  "NOTION_CLIENT_ID": "48daaa94-6352-4aef-ac2b-8ba6cdfcfc0b",
                  "NOTION_CLIENT_SECRET": "secret_wPW0WE1YOEIAVaUv6PFxscbzZs1A0cY9xUOc22LZiXj",
                  "SEND_OTP_URL": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"SEND_OTP_URL\"]"
                  },
                  "INTEGRATE_URL": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"INTEGRATE_URL\"]"
                  },
                  "OTP_TEMPLATE_NAME": "all-tracker-otp-template-dev",
                  "CONFIGURATION_SET_NAME": "all-tracker-fakeShop-configurationSet-dev"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "LambdaExecutionRole",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "HealthInfoLogGroup",
              "LambdaExecutionRole"
            ]
          },
          "FoodEntriesLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/all-tracker/dev/1682874024478-2023-04-30T17:00:24.478Z/all-tracker.zip"
              },
              "Handler": "tracker-diet/foodEntries/index.handler",
              "Runtime": "nodejs14.x",
              "FunctionName": "all-tracker-dev-foodEntries",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "ALL_TRACKER_TABLE_NAME": "dev-all-tracker-table",
                  "ACCESS_TOKEN_SECRET": "d3340691248ce92a2271fe059bfa813fcd7d2dhdhfgabenr58274019ulmgnsqifc9f8eaf48f5a70ada7403a503600243adbb40ed3976d68b75773313ca1ea",
                  "ENCRYPTER": "MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAivL/9KLDKgqIXHhwtM6qzBqq60Fc4ayrvmKVk76Wgeeo0ElxMrAZqKqNFyQsn9bWTvR2FBs+0P1T+KS75WM7pDiN/4DQerxfkGJOY6R0v+mseYc8ZVMYcQ5Py9euDWo4hGL220lMI0R9Yd/dVBCkhbW+HMebk/tPRlWC1J22w3RiK0q3wsMaG1E97Bei9vJZ+BhLk5SvEE5ggYLhiG8ft7oWBEAaCIISq1whfZstvidPvhu4rLiKZXGpKpr9m53AzUi+zJKeiqbE0fcviGdGfQvDpkriyJ1Udq5pxnfJX79PlaG6EUyeFwd3LeOTGIZ/FJY1ZnHT5LAInjMKTC2NgwIDAQAB",
                  "DECRYPTER": "MIIEvAIBADANBgkqhkiG9w0BAQEFAASCBKYwggSiAgEAAoIBAQCK8v/0osMqCohceHC0zqrMGqrrQVzhrKu+YpWTvpaB56jQSXEysBmoqo0XJCyf1tZO9HYUGz7Q/VP4pLvlYzukOI3/gNB6vF+QYk5jpHS/6ax5hzxlUxhxDk/L164NajiEYvbbSUwjRH1h391UEKSFtb4cx5uT+09GVYLUnbbDdGIrSrfCwxobUT3sF6L28ln4GEuTlK8QTmCBguGIbx+3uhYEQBoIghKrXCF9my2+J0++G7isuIplcakqmv2bncDNSL7Mkp6KpsTR9y+IZ0Z9C8OmSuLInVR2rmnGd8lfv0+VoboRTJ4XB3ct45MYhn8UljVmcdPksAieMwpMLY2DAgMBAAECggEAMNK5xUf7s6YHzBY15BJKSXWFYSySamm13yvcyxFI6VRxKN7le54NJgrnkJ4RYAipPQ0BAIeiRuT8wH2B2FRJ/KYynviwSLAwFBe226RJsbV1+S3ftuq/x9nzh/i9G9GbEkmD3AGhUzMZq25x4rwGU0VNC+fHbvP7Iweg9PyF359YQfkzqWytuf/UsssJ4MU/g5ZzoyN/87dPlhvVspdJVRD1MX0LoL9VBIVY0LBiRbp8GIiiyWWQF7NqcE2jor4CH6fZIzMZqlx7I37dFhOcMRNVsvJNjTGikNNhqpMuRsSkhMdh7djPSYUxDKM4KKX1kcQfvBKPyJJ2/1NjBhEowQKBgQD1gi8MzODnCrlq4v2BxI5ybLaYRMXlD1cdhUVlKDWso5pR0FV05pqncYYhEIgXJNQKhUQrouvyaypikoMercnI1VkQjRcASnk3r1QWvLnqoZZre9pTM0x0V2wcRayY/xd+Up/xw7A1CQ28HdjyNq2XScKQjF23sQ5yU4h6D6nkOwKBgQCQ4xPeKHCBV63wcaX5C3JDrAshb7kwHDAwHYIlXspezCZpVAqxm5+VhCjUeC2aPngz4/1bH37ZBQuIL9w9jUVDMG7Cn+4zmePDTA8DZXA8ME7N+sU4vl5aEcN/doMkWYId6HjWKdQdnJPqcd4EwgeG/UdU/GHL8oFxGMqklh1PWQKBgFiwZcTPAnQUaLUXORM26WqmoTPSrFa6OvM8ILyRUQqDs4zYoPZxE+9nUFgDe9Y4hK0kRWMqIOhbFF21pc5gY6O8hsc24NdHEBEwskTgep0rMIa1oEIsJvNkXXa9KMPAa0FEIemZkr8l/SM2+RdO71jW2YWUX4qrWJeuW4AUxn/fAoGAPmInmc4bsvVHpXGpnvO4vT6EhF8Qg5B/hxgNg32u8OZB27Qd7p8tNTl0QxeDuxgOtXkDC4siGNs9PeQtlisPmYBvEEnATGOEWACVrkas7p12MOY6qNX+1hUz8dvbV3latvnznXLhK+bRIW7pw26vwwWnAwawLRo7dbDQ/9DKyfECgYAGZ9NgSXxEjGqyltrXbto9j4t9XagsD7bhDqtlaJuIy9p5RG9f0AhOuvibKbGJYDAulm8Wa41xm9nimAMPlzDc1qLYWPD1rOUSg5hmBz52Y2lEH31iwZxde+gnA/rB1+fQbstmP7eDCFT1s4+Gr+xK7hc8ceexfuo6KO8fI8rSYw==",
                  "NOTION_CLIENT_ID": "48daaa94-6352-4aef-ac2b-8ba6cdfcfc0b",
                  "NOTION_CLIENT_SECRET": "secret_wPW0WE1YOEIAVaUv6PFxscbzZs1A0cY9xUOc22LZiXj",
                  "SEND_OTP_URL": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"SEND_OTP_URL\"]"
                  },
                  "INTEGRATE_URL": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"INTEGRATE_URL\"]"
                  },
                  "OTP_TEMPLATE_NAME": "all-tracker-otp-template-dev",
                  "CONFIGURATION_SET_NAME": "all-tracker-fakeShop-configurationSet-dev"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "LambdaExecutionRole",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "FoodEntriesLogGroup",
              "LambdaExecutionRole"
            ]
          },
          "FoodItemsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/all-tracker/dev/1682874024478-2023-04-30T17:00:24.478Z/all-tracker.zip"
              },
              "Handler": "tracker-diet/foodItems/index.handler",
              "Runtime": "nodejs14.x",
              "FunctionName": "all-tracker-dev-foodItems",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "ALL_TRACKER_TABLE_NAME": "dev-all-tracker-table",
                  "ACCESS_TOKEN_SECRET": "d3340691248ce92a2271fe059bfa813fcd7d2dhdhfgabenr58274019ulmgnsqifc9f8eaf48f5a70ada7403a503600243adbb40ed3976d68b75773313ca1ea",
                  "ENCRYPTER": "MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAivL/9KLDKgqIXHhwtM6qzBqq60Fc4ayrvmKVk76Wgeeo0ElxMrAZqKqNFyQsn9bWTvR2FBs+0P1T+KS75WM7pDiN/4DQerxfkGJOY6R0v+mseYc8ZVMYcQ5Py9euDWo4hGL220lMI0R9Yd/dVBCkhbW+HMebk/tPRlWC1J22w3RiK0q3wsMaG1E97Bei9vJZ+BhLk5SvEE5ggYLhiG8ft7oWBEAaCIISq1whfZstvidPvhu4rLiKZXGpKpr9m53AzUi+zJKeiqbE0fcviGdGfQvDpkriyJ1Udq5pxnfJX79PlaG6EUyeFwd3LeOTGIZ/FJY1ZnHT5LAInjMKTC2NgwIDAQAB",
                  "DECRYPTER": "MIIEvAIBADANBgkqhkiG9w0BAQEFAASCBKYwggSiAgEAAoIBAQCK8v/0osMqCohceHC0zqrMGqrrQVzhrKu+YpWTvpaB56jQSXEysBmoqo0XJCyf1tZO9HYUGz7Q/VP4pLvlYzukOI3/gNB6vF+QYk5jpHS/6ax5hzxlUxhxDk/L164NajiEYvbbSUwjRH1h391UEKSFtb4cx5uT+09GVYLUnbbDdGIrSrfCwxobUT3sF6L28ln4GEuTlK8QTmCBguGIbx+3uhYEQBoIghKrXCF9my2+J0++G7isuIplcakqmv2bncDNSL7Mkp6KpsTR9y+IZ0Z9C8OmSuLInVR2rmnGd8lfv0+VoboRTJ4XB3ct45MYhn8UljVmcdPksAieMwpMLY2DAgMBAAECggEAMNK5xUf7s6YHzBY15BJKSXWFYSySamm13yvcyxFI6VRxKN7le54NJgrnkJ4RYAipPQ0BAIeiRuT8wH2B2FRJ/KYynviwSLAwFBe226RJsbV1+S3ftuq/x9nzh/i9G9GbEkmD3AGhUzMZq25x4rwGU0VNC+fHbvP7Iweg9PyF359YQfkzqWytuf/UsssJ4MU/g5ZzoyN/87dPlhvVspdJVRD1MX0LoL9VBIVY0LBiRbp8GIiiyWWQF7NqcE2jor4CH6fZIzMZqlx7I37dFhOcMRNVsvJNjTGikNNhqpMuRsSkhMdh7djPSYUxDKM4KKX1kcQfvBKPyJJ2/1NjBhEowQKBgQD1gi8MzODnCrlq4v2BxI5ybLaYRMXlD1cdhUVlKDWso5pR0FV05pqncYYhEIgXJNQKhUQrouvyaypikoMercnI1VkQjRcASnk3r1QWvLnqoZZre9pTM0x0V2wcRayY/xd+Up/xw7A1CQ28HdjyNq2XScKQjF23sQ5yU4h6D6nkOwKBgQCQ4xPeKHCBV63wcaX5C3JDrAshb7kwHDAwHYIlXspezCZpVAqxm5+VhCjUeC2aPngz4/1bH37ZBQuIL9w9jUVDMG7Cn+4zmePDTA8DZXA8ME7N+sU4vl5aEcN/doMkWYId6HjWKdQdnJPqcd4EwgeG/UdU/GHL8oFxGMqklh1PWQKBgFiwZcTPAnQUaLUXORM26WqmoTPSrFa6OvM8ILyRUQqDs4zYoPZxE+9nUFgDe9Y4hK0kRWMqIOhbFF21pc5gY6O8hsc24NdHEBEwskTgep0rMIa1oEIsJvNkXXa9KMPAa0FEIemZkr8l/SM2+RdO71jW2YWUX4qrWJeuW4AUxn/fAoGAPmInmc4bsvVHpXGpnvO4vT6EhF8Qg5B/hxgNg32u8OZB27Qd7p8tNTl0QxeDuxgOtXkDC4siGNs9PeQtlisPmYBvEEnATGOEWACVrkas7p12MOY6qNX+1hUz8dvbV3latvnznXLhK+bRIW7pw26vwwWnAwawLRo7dbDQ/9DKyfECgYAGZ9NgSXxEjGqyltrXbto9j4t9XagsD7bhDqtlaJuIy9p5RG9f0AhOuvibKbGJYDAulm8Wa41xm9nimAMPlzDc1qLYWPD1rOUSg5hmBz52Y2lEH31iwZxde+gnA/rB1+fQbstmP7eDCFT1s4+Gr+xK7hc8ceexfuo6KO8fI8rSYw==",
                  "NOTION_CLIENT_ID": "48daaa94-6352-4aef-ac2b-8ba6cdfcfc0b",
                  "NOTION_CLIENT_SECRET": "secret_wPW0WE1YOEIAVaUv6PFxscbzZs1A0cY9xUOc22LZiXj",
                  "SEND_OTP_URL": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"SEND_OTP_URL\"]"
                  },
                  "INTEGRATE_URL": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"INTEGRATE_URL\"]"
                  },
                  "OTP_TEMPLATE_NAME": "all-tracker-otp-template-dev",
                  "CONFIGURATION_SET_NAME": "all-tracker-fakeShop-configurationSet-dev"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "LambdaExecutionRole",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "FoodItemsLogGroup",
              "LambdaExecutionRole"
            ]
          },
          "HabitsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/all-tracker/dev/1682874024478-2023-04-30T17:00:24.478Z/all-tracker.zip"
              },
              "Handler": "tracker-habit/habits/index.handler",
              "Runtime": "nodejs14.x",
              "FunctionName": "all-tracker-dev-habits",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "ALL_TRACKER_TABLE_NAME": "dev-all-tracker-table",
                  "ACCESS_TOKEN_SECRET": "d3340691248ce92a2271fe059bfa813fcd7d2dhdhfgabenr58274019ulmgnsqifc9f8eaf48f5a70ada7403a503600243adbb40ed3976d68b75773313ca1ea",
                  "ENCRYPTER": "MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAivL/9KLDKgqIXHhwtM6qzBqq60Fc4ayrvmKVk76Wgeeo0ElxMrAZqKqNFyQsn9bWTvR2FBs+0P1T+KS75WM7pDiN/4DQerxfkGJOY6R0v+mseYc8ZVMYcQ5Py9euDWo4hGL220lMI0R9Yd/dVBCkhbW+HMebk/tPRlWC1J22w3RiK0q3wsMaG1E97Bei9vJZ+BhLk5SvEE5ggYLhiG8ft7oWBEAaCIISq1whfZstvidPvhu4rLiKZXGpKpr9m53AzUi+zJKeiqbE0fcviGdGfQvDpkriyJ1Udq5pxnfJX79PlaG6EUyeFwd3LeOTGIZ/FJY1ZnHT5LAInjMKTC2NgwIDAQAB",
                  "DECRYPTER": "MIIEvAIBADANBgkqhkiG9w0BAQEFAASCBKYwggSiAgEAAoIBAQCK8v/0osMqCohceHC0zqrMGqrrQVzhrKu+YpWTvpaB56jQSXEysBmoqo0XJCyf1tZO9HYUGz7Q/VP4pLvlYzukOI3/gNB6vF+QYk5jpHS/6ax5hzxlUxhxDk/L164NajiEYvbbSUwjRH1h391UEKSFtb4cx5uT+09GVYLUnbbDdGIrSrfCwxobUT3sF6L28ln4GEuTlK8QTmCBguGIbx+3uhYEQBoIghKrXCF9my2+J0++G7isuIplcakqmv2bncDNSL7Mkp6KpsTR9y+IZ0Z9C8OmSuLInVR2rmnGd8lfv0+VoboRTJ4XB3ct45MYhn8UljVmcdPksAieMwpMLY2DAgMBAAECggEAMNK5xUf7s6YHzBY15BJKSXWFYSySamm13yvcyxFI6VRxKN7le54NJgrnkJ4RYAipPQ0BAIeiRuT8wH2B2FRJ/KYynviwSLAwFBe226RJsbV1+S3ftuq/x9nzh/i9G9GbEkmD3AGhUzMZq25x4rwGU0VNC+fHbvP7Iweg9PyF359YQfkzqWytuf/UsssJ4MU/g5ZzoyN/87dPlhvVspdJVRD1MX0LoL9VBIVY0LBiRbp8GIiiyWWQF7NqcE2jor4CH6fZIzMZqlx7I37dFhOcMRNVsvJNjTGikNNhqpMuRsSkhMdh7djPSYUxDKM4KKX1kcQfvBKPyJJ2/1NjBhEowQKBgQD1gi8MzODnCrlq4v2BxI5ybLaYRMXlD1cdhUVlKDWso5pR0FV05pqncYYhEIgXJNQKhUQrouvyaypikoMercnI1VkQjRcASnk3r1QWvLnqoZZre9pTM0x0V2wcRayY/xd+Up/xw7A1CQ28HdjyNq2XScKQjF23sQ5yU4h6D6nkOwKBgQCQ4xPeKHCBV63wcaX5C3JDrAshb7kwHDAwHYIlXspezCZpVAqxm5+VhCjUeC2aPngz4/1bH37ZBQuIL9w9jUVDMG7Cn+4zmePDTA8DZXA8ME7N+sU4vl5aEcN/doMkWYId6HjWKdQdnJPqcd4EwgeG/UdU/GHL8oFxGMqklh1PWQKBgFiwZcTPAnQUaLUXORM26WqmoTPSrFa6OvM8ILyRUQqDs4zYoPZxE+9nUFgDe9Y4hK0kRWMqIOhbFF21pc5gY6O8hsc24NdHEBEwskTgep0rMIa1oEIsJvNkXXa9KMPAa0FEIemZkr8l/SM2+RdO71jW2YWUX4qrWJeuW4AUxn/fAoGAPmInmc4bsvVHpXGpnvO4vT6EhF8Qg5B/hxgNg32u8OZB27Qd7p8tNTl0QxeDuxgOtXkDC4siGNs9PeQtlisPmYBvEEnATGOEWACVrkas7p12MOY6qNX+1hUz8dvbV3latvnznXLhK+bRIW7pw26vwwWnAwawLRo7dbDQ/9DKyfECgYAGZ9NgSXxEjGqyltrXbto9j4t9XagsD7bhDqtlaJuIy9p5RG9f0AhOuvibKbGJYDAulm8Wa41xm9nimAMPlzDc1qLYWPD1rOUSg5hmBz52Y2lEH31iwZxde+gnA/rB1+fQbstmP7eDCFT1s4+Gr+xK7hc8ceexfuo6KO8fI8rSYw==",
                  "NOTION_CLIENT_ID": "48daaa94-6352-4aef-ac2b-8ba6cdfcfc0b",
                  "NOTION_CLIENT_SECRET": "secret_wPW0WE1YOEIAVaUv6PFxscbzZs1A0cY9xUOc22LZiXj",
                  "SEND_OTP_URL": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"SEND_OTP_URL\"]"
                  },
                  "INTEGRATE_URL": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"INTEGRATE_URL\"]"
                  },
                  "OTP_TEMPLATE_NAME": "all-tracker-otp-template-dev",
                  "CONFIGURATION_SET_NAME": "all-tracker-fakeShop-configurationSet-dev"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "LambdaExecutionRole",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "HabitsLogGroup",
              "LambdaExecutionRole"
            ]
          },
          "HabitStatusesLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/all-tracker/dev/1682874024478-2023-04-30T17:00:24.478Z/all-tracker.zip"
              },
              "Handler": "tracker-habit/habitStatuses/index.handler",
              "Runtime": "nodejs14.x",
              "FunctionName": "all-tracker-dev-habitStatuses",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "ALL_TRACKER_TABLE_NAME": "dev-all-tracker-table",
                  "ACCESS_TOKEN_SECRET": "d3340691248ce92a2271fe059bfa813fcd7d2dhdhfgabenr58274019ulmgnsqifc9f8eaf48f5a70ada7403a503600243adbb40ed3976d68b75773313ca1ea",
                  "ENCRYPTER": "MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAivL/9KLDKgqIXHhwtM6qzBqq60Fc4ayrvmKVk76Wgeeo0ElxMrAZqKqNFyQsn9bWTvR2FBs+0P1T+KS75WM7pDiN/4DQerxfkGJOY6R0v+mseYc8ZVMYcQ5Py9euDWo4hGL220lMI0R9Yd/dVBCkhbW+HMebk/tPRlWC1J22w3RiK0q3wsMaG1E97Bei9vJZ+BhLk5SvEE5ggYLhiG8ft7oWBEAaCIISq1whfZstvidPvhu4rLiKZXGpKpr9m53AzUi+zJKeiqbE0fcviGdGfQvDpkriyJ1Udq5pxnfJX79PlaG6EUyeFwd3LeOTGIZ/FJY1ZnHT5LAInjMKTC2NgwIDAQAB",
                  "DECRYPTER": "MIIEvAIBADANBgkqhkiG9w0BAQEFAASCBKYwggSiAgEAAoIBAQCK8v/0osMqCohceHC0zqrMGqrrQVzhrKu+YpWTvpaB56jQSXEysBmoqo0XJCyf1tZO9HYUGz7Q/VP4pLvlYzukOI3/gNB6vF+QYk5jpHS/6ax5hzxlUxhxDk/L164NajiEYvbbSUwjRH1h391UEKSFtb4cx5uT+09GVYLUnbbDdGIrSrfCwxobUT3sF6L28ln4GEuTlK8QTmCBguGIbx+3uhYEQBoIghKrXCF9my2+J0++G7isuIplcakqmv2bncDNSL7Mkp6KpsTR9y+IZ0Z9C8OmSuLInVR2rmnGd8lfv0+VoboRTJ4XB3ct45MYhn8UljVmcdPksAieMwpMLY2DAgMBAAECggEAMNK5xUf7s6YHzBY15BJKSXWFYSySamm13yvcyxFI6VRxKN7le54NJgrnkJ4RYAipPQ0BAIeiRuT8wH2B2FRJ/KYynviwSLAwFBe226RJsbV1+S3ftuq/x9nzh/i9G9GbEkmD3AGhUzMZq25x4rwGU0VNC+fHbvP7Iweg9PyF359YQfkzqWytuf/UsssJ4MU/g5ZzoyN/87dPlhvVspdJVRD1MX0LoL9VBIVY0LBiRbp8GIiiyWWQF7NqcE2jor4CH6fZIzMZqlx7I37dFhOcMRNVsvJNjTGikNNhqpMuRsSkhMdh7djPSYUxDKM4KKX1kcQfvBKPyJJ2/1NjBhEowQKBgQD1gi8MzODnCrlq4v2BxI5ybLaYRMXlD1cdhUVlKDWso5pR0FV05pqncYYhEIgXJNQKhUQrouvyaypikoMercnI1VkQjRcASnk3r1QWvLnqoZZre9pTM0x0V2wcRayY/xd+Up/xw7A1CQ28HdjyNq2XScKQjF23sQ5yU4h6D6nkOwKBgQCQ4xPeKHCBV63wcaX5C3JDrAshb7kwHDAwHYIlXspezCZpVAqxm5+VhCjUeC2aPngz4/1bH37ZBQuIL9w9jUVDMG7Cn+4zmePDTA8DZXA8ME7N+sU4vl5aEcN/doMkWYId6HjWKdQdnJPqcd4EwgeG/UdU/GHL8oFxGMqklh1PWQKBgFiwZcTPAnQUaLUXORM26WqmoTPSrFa6OvM8ILyRUQqDs4zYoPZxE+9nUFgDe9Y4hK0kRWMqIOhbFF21pc5gY6O8hsc24NdHEBEwskTgep0rMIa1oEIsJvNkXXa9KMPAa0FEIemZkr8l/SM2+RdO71jW2YWUX4qrWJeuW4AUxn/fAoGAPmInmc4bsvVHpXGpnvO4vT6EhF8Qg5B/hxgNg32u8OZB27Qd7p8tNTl0QxeDuxgOtXkDC4siGNs9PeQtlisPmYBvEEnATGOEWACVrkas7p12MOY6qNX+1hUz8dvbV3latvnznXLhK+bRIW7pw26vwwWnAwawLRo7dbDQ/9DKyfECgYAGZ9NgSXxEjGqyltrXbto9j4t9XagsD7bhDqtlaJuIy9p5RG9f0AhOuvibKbGJYDAulm8Wa41xm9nimAMPlzDc1qLYWPD1rOUSg5hmBz52Y2lEH31iwZxde+gnA/rB1+fQbstmP7eDCFT1s4+Gr+xK7hc8ceexfuo6KO8fI8rSYw==",
                  "NOTION_CLIENT_ID": "48daaa94-6352-4aef-ac2b-8ba6cdfcfc0b",
                  "NOTION_CLIENT_SECRET": "secret_wPW0WE1YOEIAVaUv6PFxscbzZs1A0cY9xUOc22LZiXj",
                  "SEND_OTP_URL": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"SEND_OTP_URL\"]"
                  },
                  "INTEGRATE_URL": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"INTEGRATE_URL\"]"
                  },
                  "OTP_TEMPLATE_NAME": "all-tracker-otp-template-dev",
                  "CONFIGURATION_SET_NAME": "all-tracker-fakeShop-configurationSet-dev"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "LambdaExecutionRole",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "HabitStatusesLogGroup",
              "LambdaExecutionRole"
            ]
          },
          "SleepReportsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/all-tracker/dev/1682874024478-2023-04-30T17:00:24.478Z/all-tracker.zip"
              },
              "Handler": "tracker-wellness/sleepReports/index.handler",
              "Runtime": "nodejs14.x",
              "FunctionName": "all-tracker-dev-sleepReports",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "ALL_TRACKER_TABLE_NAME": "dev-all-tracker-table",
                  "ACCESS_TOKEN_SECRET": "d3340691248ce92a2271fe059bfa813fcd7d2dhdhfgabenr58274019ulmgnsqifc9f8eaf48f5a70ada7403a503600243adbb40ed3976d68b75773313ca1ea",
                  "ENCRYPTER": "MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAivL/9KLDKgqIXHhwtM6qzBqq60Fc4ayrvmKVk76Wgeeo0ElxMrAZqKqNFyQsn9bWTvR2FBs+0P1T+KS75WM7pDiN/4DQerxfkGJOY6R0v+mseYc8ZVMYcQ5Py9euDWo4hGL220lMI0R9Yd/dVBCkhbW+HMebk/tPRlWC1J22w3RiK0q3wsMaG1E97Bei9vJZ+BhLk5SvEE5ggYLhiG8ft7oWBEAaCIISq1whfZstvidPvhu4rLiKZXGpKpr9m53AzUi+zJKeiqbE0fcviGdGfQvDpkriyJ1Udq5pxnfJX79PlaG6EUyeFwd3LeOTGIZ/FJY1ZnHT5LAInjMKTC2NgwIDAQAB",
                  "DECRYPTER": "MIIEvAIBADANBgkqhkiG9w0BAQEFAASCBKYwggSiAgEAAoIBAQCK8v/0osMqCohceHC0zqrMGqrrQVzhrKu+YpWTvpaB56jQSXEysBmoqo0XJCyf1tZO9HYUGz7Q/VP4pLvlYzukOI3/gNB6vF+QYk5jpHS/6ax5hzxlUxhxDk/L164NajiEYvbbSUwjRH1h391UEKSFtb4cx5uT+09GVYLUnbbDdGIrSrfCwxobUT3sF6L28ln4GEuTlK8QTmCBguGIbx+3uhYEQBoIghKrXCF9my2+J0++G7isuIplcakqmv2bncDNSL7Mkp6KpsTR9y+IZ0Z9C8OmSuLInVR2rmnGd8lfv0+VoboRTJ4XB3ct45MYhn8UljVmcdPksAieMwpMLY2DAgMBAAECggEAMNK5xUf7s6YHzBY15BJKSXWFYSySamm13yvcyxFI6VRxKN7le54NJgrnkJ4RYAipPQ0BAIeiRuT8wH2B2FRJ/KYynviwSLAwFBe226RJsbV1+S3ftuq/x9nzh/i9G9GbEkmD3AGhUzMZq25x4rwGU0VNC+fHbvP7Iweg9PyF359YQfkzqWytuf/UsssJ4MU/g5ZzoyN/87dPlhvVspdJVRD1MX0LoL9VBIVY0LBiRbp8GIiiyWWQF7NqcE2jor4CH6fZIzMZqlx7I37dFhOcMRNVsvJNjTGikNNhqpMuRsSkhMdh7djPSYUxDKM4KKX1kcQfvBKPyJJ2/1NjBhEowQKBgQD1gi8MzODnCrlq4v2BxI5ybLaYRMXlD1cdhUVlKDWso5pR0FV05pqncYYhEIgXJNQKhUQrouvyaypikoMercnI1VkQjRcASnk3r1QWvLnqoZZre9pTM0x0V2wcRayY/xd+Up/xw7A1CQ28HdjyNq2XScKQjF23sQ5yU4h6D6nkOwKBgQCQ4xPeKHCBV63wcaX5C3JDrAshb7kwHDAwHYIlXspezCZpVAqxm5+VhCjUeC2aPngz4/1bH37ZBQuIL9w9jUVDMG7Cn+4zmePDTA8DZXA8ME7N+sU4vl5aEcN/doMkWYId6HjWKdQdnJPqcd4EwgeG/UdU/GHL8oFxGMqklh1PWQKBgFiwZcTPAnQUaLUXORM26WqmoTPSrFa6OvM8ILyRUQqDs4zYoPZxE+9nUFgDe9Y4hK0kRWMqIOhbFF21pc5gY6O8hsc24NdHEBEwskTgep0rMIa1oEIsJvNkXXa9KMPAa0FEIemZkr8l/SM2+RdO71jW2YWUX4qrWJeuW4AUxn/fAoGAPmInmc4bsvVHpXGpnvO4vT6EhF8Qg5B/hxgNg32u8OZB27Qd7p8tNTl0QxeDuxgOtXkDC4siGNs9PeQtlisPmYBvEEnATGOEWACVrkas7p12MOY6qNX+1hUz8dvbV3latvnznXLhK+bRIW7pw26vwwWnAwawLRo7dbDQ/9DKyfECgYAGZ9NgSXxEjGqyltrXbto9j4t9XagsD7bhDqtlaJuIy9p5RG9f0AhOuvibKbGJYDAulm8Wa41xm9nimAMPlzDc1qLYWPD1rOUSg5hmBz52Y2lEH31iwZxde+gnA/rB1+fQbstmP7eDCFT1s4+Gr+xK7hc8ceexfuo6KO8fI8rSYw==",
                  "NOTION_CLIENT_ID": "48daaa94-6352-4aef-ac2b-8ba6cdfcfc0b",
                  "NOTION_CLIENT_SECRET": "secret_wPW0WE1YOEIAVaUv6PFxscbzZs1A0cY9xUOc22LZiXj",
                  "SEND_OTP_URL": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"SEND_OTP_URL\"]"
                  },
                  "INTEGRATE_URL": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"INTEGRATE_URL\"]"
                  },
                  "OTP_TEMPLATE_NAME": "all-tracker-otp-template-dev",
                  "CONFIGURATION_SET_NAME": "all-tracker-fakeShop-configurationSet-dev"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "LambdaExecutionRole",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "SleepReportsLogGroup",
              "LambdaExecutionRole"
            ]
          },
          "WellnessReportsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/all-tracker/dev/1682874024478-2023-04-30T17:00:24.478Z/all-tracker.zip"
              },
              "Handler": "tracker-wellness/wellnessReports/index.handler",
              "Runtime": "nodejs14.x",
              "FunctionName": "all-tracker-dev-wellnessReports",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "ALL_TRACKER_TABLE_NAME": "dev-all-tracker-table",
                  "ACCESS_TOKEN_SECRET": "d3340691248ce92a2271fe059bfa813fcd7d2dhdhfgabenr58274019ulmgnsqifc9f8eaf48f5a70ada7403a503600243adbb40ed3976d68b75773313ca1ea",
                  "ENCRYPTER": "MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAivL/9KLDKgqIXHhwtM6qzBqq60Fc4ayrvmKVk76Wgeeo0ElxMrAZqKqNFyQsn9bWTvR2FBs+0P1T+KS75WM7pDiN/4DQerxfkGJOY6R0v+mseYc8ZVMYcQ5Py9euDWo4hGL220lMI0R9Yd/dVBCkhbW+HMebk/tPRlWC1J22w3RiK0q3wsMaG1E97Bei9vJZ+BhLk5SvEE5ggYLhiG8ft7oWBEAaCIISq1whfZstvidPvhu4rLiKZXGpKpr9m53AzUi+zJKeiqbE0fcviGdGfQvDpkriyJ1Udq5pxnfJX79PlaG6EUyeFwd3LeOTGIZ/FJY1ZnHT5LAInjMKTC2NgwIDAQAB",
                  "DECRYPTER": "MIIEvAIBADANBgkqhkiG9w0BAQEFAASCBKYwggSiAgEAAoIBAQCK8v/0osMqCohceHC0zqrMGqrrQVzhrKu+YpWTvpaB56jQSXEysBmoqo0XJCyf1tZO9HYUGz7Q/VP4pLvlYzukOI3/gNB6vF+QYk5jpHS/6ax5hzxlUxhxDk/L164NajiEYvbbSUwjRH1h391UEKSFtb4cx5uT+09GVYLUnbbDdGIrSrfCwxobUT3sF6L28ln4GEuTlK8QTmCBguGIbx+3uhYEQBoIghKrXCF9my2+J0++G7isuIplcakqmv2bncDNSL7Mkp6KpsTR9y+IZ0Z9C8OmSuLInVR2rmnGd8lfv0+VoboRTJ4XB3ct45MYhn8UljVmcdPksAieMwpMLY2DAgMBAAECggEAMNK5xUf7s6YHzBY15BJKSXWFYSySamm13yvcyxFI6VRxKN7le54NJgrnkJ4RYAipPQ0BAIeiRuT8wH2B2FRJ/KYynviwSLAwFBe226RJsbV1+S3ftuq/x9nzh/i9G9GbEkmD3AGhUzMZq25x4rwGU0VNC+fHbvP7Iweg9PyF359YQfkzqWytuf/UsssJ4MU/g5ZzoyN/87dPlhvVspdJVRD1MX0LoL9VBIVY0LBiRbp8GIiiyWWQF7NqcE2jor4CH6fZIzMZqlx7I37dFhOcMRNVsvJNjTGikNNhqpMuRsSkhMdh7djPSYUxDKM4KKX1kcQfvBKPyJJ2/1NjBhEowQKBgQD1gi8MzODnCrlq4v2BxI5ybLaYRMXlD1cdhUVlKDWso5pR0FV05pqncYYhEIgXJNQKhUQrouvyaypikoMercnI1VkQjRcASnk3r1QWvLnqoZZre9pTM0x0V2wcRayY/xd+Up/xw7A1CQ28HdjyNq2XScKQjF23sQ5yU4h6D6nkOwKBgQCQ4xPeKHCBV63wcaX5C3JDrAshb7kwHDAwHYIlXspezCZpVAqxm5+VhCjUeC2aPngz4/1bH37ZBQuIL9w9jUVDMG7Cn+4zmePDTA8DZXA8ME7N+sU4vl5aEcN/doMkWYId6HjWKdQdnJPqcd4EwgeG/UdU/GHL8oFxGMqklh1PWQKBgFiwZcTPAnQUaLUXORM26WqmoTPSrFa6OvM8ILyRUQqDs4zYoPZxE+9nUFgDe9Y4hK0kRWMqIOhbFF21pc5gY6O8hsc24NdHEBEwskTgep0rMIa1oEIsJvNkXXa9KMPAa0FEIemZkr8l/SM2+RdO71jW2YWUX4qrWJeuW4AUxn/fAoGAPmInmc4bsvVHpXGpnvO4vT6EhF8Qg5B/hxgNg32u8OZB27Qd7p8tNTl0QxeDuxgOtXkDC4siGNs9PeQtlisPmYBvEEnATGOEWACVrkas7p12MOY6qNX+1hUz8dvbV3latvnznXLhK+bRIW7pw26vwwWnAwawLRo7dbDQ/9DKyfECgYAGZ9NgSXxEjGqyltrXbto9j4t9XagsD7bhDqtlaJuIy9p5RG9f0AhOuvibKbGJYDAulm8Wa41xm9nimAMPlzDc1qLYWPD1rOUSg5hmBz52Y2lEH31iwZxde+gnA/rB1+fQbstmP7eDCFT1s4+Gr+xK7hc8ceexfuo6KO8fI8rSYw==",
                  "NOTION_CLIENT_ID": "48daaa94-6352-4aef-ac2b-8ba6cdfcfc0b",
                  "NOTION_CLIENT_SECRET": "secret_wPW0WE1YOEIAVaUv6PFxscbzZs1A0cY9xUOc22LZiXj",
                  "SEND_OTP_URL": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"SEND_OTP_URL\"]"
                  },
                  "INTEGRATE_URL": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"INTEGRATE_URL\"]"
                  },
                  "OTP_TEMPLATE_NAME": "all-tracker-otp-template-dev",
                  "CONFIGURATION_SET_NAME": "all-tracker-fakeShop-configurationSet-dev"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "LambdaExecutionRole",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "WellnessReportsLogGroup",
              "LambdaExecutionRole"
            ]
          },
          "TasksLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/all-tracker/dev/1682874024478-2023-04-30T17:00:24.478Z/all-tracker.zip"
              },
              "Handler": "tracker-task/tasks/index.handler",
              "Runtime": "nodejs14.x",
              "FunctionName": "all-tracker-dev-tasks",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "ALL_TRACKER_TABLE_NAME": "dev-all-tracker-table",
                  "ACCESS_TOKEN_SECRET": "d3340691248ce92a2271fe059bfa813fcd7d2dhdhfgabenr58274019ulmgnsqifc9f8eaf48f5a70ada7403a503600243adbb40ed3976d68b75773313ca1ea",
                  "ENCRYPTER": "MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAivL/9KLDKgqIXHhwtM6qzBqq60Fc4ayrvmKVk76Wgeeo0ElxMrAZqKqNFyQsn9bWTvR2FBs+0P1T+KS75WM7pDiN/4DQerxfkGJOY6R0v+mseYc8ZVMYcQ5Py9euDWo4hGL220lMI0R9Yd/dVBCkhbW+HMebk/tPRlWC1J22w3RiK0q3wsMaG1E97Bei9vJZ+BhLk5SvEE5ggYLhiG8ft7oWBEAaCIISq1whfZstvidPvhu4rLiKZXGpKpr9m53AzUi+zJKeiqbE0fcviGdGfQvDpkriyJ1Udq5pxnfJX79PlaG6EUyeFwd3LeOTGIZ/FJY1ZnHT5LAInjMKTC2NgwIDAQAB",
                  "DECRYPTER": "MIIEvAIBADANBgkqhkiG9w0BAQEFAASCBKYwggSiAgEAAoIBAQCK8v/0osMqCohceHC0zqrMGqrrQVzhrKu+YpWTvpaB56jQSXEysBmoqo0XJCyf1tZO9HYUGz7Q/VP4pLvlYzukOI3/gNB6vF+QYk5jpHS/6ax5hzxlUxhxDk/L164NajiEYvbbSUwjRH1h391UEKSFtb4cx5uT+09GVYLUnbbDdGIrSrfCwxobUT3sF6L28ln4GEuTlK8QTmCBguGIbx+3uhYEQBoIghKrXCF9my2+J0++G7isuIplcakqmv2bncDNSL7Mkp6KpsTR9y+IZ0Z9C8OmSuLInVR2rmnGd8lfv0+VoboRTJ4XB3ct45MYhn8UljVmcdPksAieMwpMLY2DAgMBAAECggEAMNK5xUf7s6YHzBY15BJKSXWFYSySamm13yvcyxFI6VRxKN7le54NJgrnkJ4RYAipPQ0BAIeiRuT8wH2B2FRJ/KYynviwSLAwFBe226RJsbV1+S3ftuq/x9nzh/i9G9GbEkmD3AGhUzMZq25x4rwGU0VNC+fHbvP7Iweg9PyF359YQfkzqWytuf/UsssJ4MU/g5ZzoyN/87dPlhvVspdJVRD1MX0LoL9VBIVY0LBiRbp8GIiiyWWQF7NqcE2jor4CH6fZIzMZqlx7I37dFhOcMRNVsvJNjTGikNNhqpMuRsSkhMdh7djPSYUxDKM4KKX1kcQfvBKPyJJ2/1NjBhEowQKBgQD1gi8MzODnCrlq4v2BxI5ybLaYRMXlD1cdhUVlKDWso5pR0FV05pqncYYhEIgXJNQKhUQrouvyaypikoMercnI1VkQjRcASnk3r1QWvLnqoZZre9pTM0x0V2wcRayY/xd+Up/xw7A1CQ28HdjyNq2XScKQjF23sQ5yU4h6D6nkOwKBgQCQ4xPeKHCBV63wcaX5C3JDrAshb7kwHDAwHYIlXspezCZpVAqxm5+VhCjUeC2aPngz4/1bH37ZBQuIL9w9jUVDMG7Cn+4zmePDTA8DZXA8ME7N+sU4vl5aEcN/doMkWYId6HjWKdQdnJPqcd4EwgeG/UdU/GHL8oFxGMqklh1PWQKBgFiwZcTPAnQUaLUXORM26WqmoTPSrFa6OvM8ILyRUQqDs4zYoPZxE+9nUFgDe9Y4hK0kRWMqIOhbFF21pc5gY6O8hsc24NdHEBEwskTgep0rMIa1oEIsJvNkXXa9KMPAa0FEIemZkr8l/SM2+RdO71jW2YWUX4qrWJeuW4AUxn/fAoGAPmInmc4bsvVHpXGpnvO4vT6EhF8Qg5B/hxgNg32u8OZB27Qd7p8tNTl0QxeDuxgOtXkDC4siGNs9PeQtlisPmYBvEEnATGOEWACVrkas7p12MOY6qNX+1hUz8dvbV3latvnznXLhK+bRIW7pw26vwwWnAwawLRo7dbDQ/9DKyfECgYAGZ9NgSXxEjGqyltrXbto9j4t9XagsD7bhDqtlaJuIy9p5RG9f0AhOuvibKbGJYDAulm8Wa41xm9nimAMPlzDc1qLYWPD1rOUSg5hmBz52Y2lEH31iwZxde+gnA/rB1+fQbstmP7eDCFT1s4+Gr+xK7hc8ceexfuo6KO8fI8rSYw==",
                  "NOTION_CLIENT_ID": "48daaa94-6352-4aef-ac2b-8ba6cdfcfc0b",
                  "NOTION_CLIENT_SECRET": "secret_wPW0WE1YOEIAVaUv6PFxscbzZs1A0cY9xUOc22LZiXj",
                  "SEND_OTP_URL": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"SEND_OTP_URL\"]"
                  },
                  "INTEGRATE_URL": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"INTEGRATE_URL\"]"
                  },
                  "OTP_TEMPLATE_NAME": "all-tracker-otp-template-dev",
                  "CONFIGURATION_SET_NAME": "all-tracker-fakeShop-configurationSet-dev"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "LambdaExecutionRole",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "TasksLogGroup",
              "LambdaExecutionRole"
            ]
          },
          "ToDosLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/all-tracker/dev/1682874024478-2023-04-30T17:00:24.478Z/all-tracker.zip"
              },
              "Handler": "tracker-task/toDos/index.handler",
              "Runtime": "nodejs14.x",
              "FunctionName": "all-tracker-dev-toDos",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "ALL_TRACKER_TABLE_NAME": "dev-all-tracker-table",
                  "ACCESS_TOKEN_SECRET": "d3340691248ce92a2271fe059bfa813fcd7d2dhdhfgabenr58274019ulmgnsqifc9f8eaf48f5a70ada7403a503600243adbb40ed3976d68b75773313ca1ea",
                  "ENCRYPTER": "MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAivL/9KLDKgqIXHhwtM6qzBqq60Fc4ayrvmKVk76Wgeeo0ElxMrAZqKqNFyQsn9bWTvR2FBs+0P1T+KS75WM7pDiN/4DQerxfkGJOY6R0v+mseYc8ZVMYcQ5Py9euDWo4hGL220lMI0R9Yd/dVBCkhbW+HMebk/tPRlWC1J22w3RiK0q3wsMaG1E97Bei9vJZ+BhLk5SvEE5ggYLhiG8ft7oWBEAaCIISq1whfZstvidPvhu4rLiKZXGpKpr9m53AzUi+zJKeiqbE0fcviGdGfQvDpkriyJ1Udq5pxnfJX79PlaG6EUyeFwd3LeOTGIZ/FJY1ZnHT5LAInjMKTC2NgwIDAQAB",
                  "DECRYPTER": "MIIEvAIBADANBgkqhkiG9w0BAQEFAASCBKYwggSiAgEAAoIBAQCK8v/0osMqCohceHC0zqrMGqrrQVzhrKu+YpWTvpaB56jQSXEysBmoqo0XJCyf1tZO9HYUGz7Q/VP4pLvlYzukOI3/gNB6vF+QYk5jpHS/6ax5hzxlUxhxDk/L164NajiEYvbbSUwjRH1h391UEKSFtb4cx5uT+09GVYLUnbbDdGIrSrfCwxobUT3sF6L28ln4GEuTlK8QTmCBguGIbx+3uhYEQBoIghKrXCF9my2+J0++G7isuIplcakqmv2bncDNSL7Mkp6KpsTR9y+IZ0Z9C8OmSuLInVR2rmnGd8lfv0+VoboRTJ4XB3ct45MYhn8UljVmcdPksAieMwpMLY2DAgMBAAECggEAMNK5xUf7s6YHzBY15BJKSXWFYSySamm13yvcyxFI6VRxKN7le54NJgrnkJ4RYAipPQ0BAIeiRuT8wH2B2FRJ/KYynviwSLAwFBe226RJsbV1+S3ftuq/x9nzh/i9G9GbEkmD3AGhUzMZq25x4rwGU0VNC+fHbvP7Iweg9PyF359YQfkzqWytuf/UsssJ4MU/g5ZzoyN/87dPlhvVspdJVRD1MX0LoL9VBIVY0LBiRbp8GIiiyWWQF7NqcE2jor4CH6fZIzMZqlx7I37dFhOcMRNVsvJNjTGikNNhqpMuRsSkhMdh7djPSYUxDKM4KKX1kcQfvBKPyJJ2/1NjBhEowQKBgQD1gi8MzODnCrlq4v2BxI5ybLaYRMXlD1cdhUVlKDWso5pR0FV05pqncYYhEIgXJNQKhUQrouvyaypikoMercnI1VkQjRcASnk3r1QWvLnqoZZre9pTM0x0V2wcRayY/xd+Up/xw7A1CQ28HdjyNq2XScKQjF23sQ5yU4h6D6nkOwKBgQCQ4xPeKHCBV63wcaX5C3JDrAshb7kwHDAwHYIlXspezCZpVAqxm5+VhCjUeC2aPngz4/1bH37ZBQuIL9w9jUVDMG7Cn+4zmePDTA8DZXA8ME7N+sU4vl5aEcN/doMkWYId6HjWKdQdnJPqcd4EwgeG/UdU/GHL8oFxGMqklh1PWQKBgFiwZcTPAnQUaLUXORM26WqmoTPSrFa6OvM8ILyRUQqDs4zYoPZxE+9nUFgDe9Y4hK0kRWMqIOhbFF21pc5gY6O8hsc24NdHEBEwskTgep0rMIa1oEIsJvNkXXa9KMPAa0FEIemZkr8l/SM2+RdO71jW2YWUX4qrWJeuW4AUxn/fAoGAPmInmc4bsvVHpXGpnvO4vT6EhF8Qg5B/hxgNg32u8OZB27Qd7p8tNTl0QxeDuxgOtXkDC4siGNs9PeQtlisPmYBvEEnATGOEWACVrkas7p12MOY6qNX+1hUz8dvbV3latvnznXLhK+bRIW7pw26vwwWnAwawLRo7dbDQ/9DKyfECgYAGZ9NgSXxEjGqyltrXbto9j4t9XagsD7bhDqtlaJuIy9p5RG9f0AhOuvibKbGJYDAulm8Wa41xm9nimAMPlzDc1qLYWPD1rOUSg5hmBz52Y2lEH31iwZxde+gnA/rB1+fQbstmP7eDCFT1s4+Gr+xK7hc8ceexfuo6KO8fI8rSYw==",
                  "NOTION_CLIENT_ID": "48daaa94-6352-4aef-ac2b-8ba6cdfcfc0b",
                  "NOTION_CLIENT_SECRET": "secret_wPW0WE1YOEIAVaUv6PFxscbzZs1A0cY9xUOc22LZiXj",
                  "SEND_OTP_URL": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"SEND_OTP_URL\"]"
                  },
                  "INTEGRATE_URL": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"INTEGRATE_URL\"]"
                  },
                  "OTP_TEMPLATE_NAME": "all-tracker-otp-template-dev",
                  "CONFIGURATION_SET_NAME": "all-tracker-fakeShop-configurationSet-dev"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "LambdaExecutionRole",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ToDosLogGroup",
              "LambdaExecutionRole"
            ]
          },
          "ExerciseEntriesLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/all-tracker/dev/1682874024478-2023-04-30T17:00:24.478Z/all-tracker.zip"
              },
              "Handler": "tracker-fitness/exerciseEntries/index.handler",
              "Runtime": "nodejs14.x",
              "FunctionName": "all-tracker-dev-exerciseEntries",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "ALL_TRACKER_TABLE_NAME": "dev-all-tracker-table",
                  "ACCESS_TOKEN_SECRET": "d3340691248ce92a2271fe059bfa813fcd7d2dhdhfgabenr58274019ulmgnsqifc9f8eaf48f5a70ada7403a503600243adbb40ed3976d68b75773313ca1ea",
                  "ENCRYPTER": "MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAivL/9KLDKgqIXHhwtM6qzBqq60Fc4ayrvmKVk76Wgeeo0ElxMrAZqKqNFyQsn9bWTvR2FBs+0P1T+KS75WM7pDiN/4DQerxfkGJOY6R0v+mseYc8ZVMYcQ5Py9euDWo4hGL220lMI0R9Yd/dVBCkhbW+HMebk/tPRlWC1J22w3RiK0q3wsMaG1E97Bei9vJZ+BhLk5SvEE5ggYLhiG8ft7oWBEAaCIISq1whfZstvidPvhu4rLiKZXGpKpr9m53AzUi+zJKeiqbE0fcviGdGfQvDpkriyJ1Udq5pxnfJX79PlaG6EUyeFwd3LeOTGIZ/FJY1ZnHT5LAInjMKTC2NgwIDAQAB",
                  "DECRYPTER": "MIIEvAIBADANBgkqhkiG9w0BAQEFAASCBKYwggSiAgEAAoIBAQCK8v/0osMqCohceHC0zqrMGqrrQVzhrKu+YpWTvpaB56jQSXEysBmoqo0XJCyf1tZO9HYUGz7Q/VP4pLvlYzukOI3/gNB6vF+QYk5jpHS/6ax5hzxlUxhxDk/L164NajiEYvbbSUwjRH1h391UEKSFtb4cx5uT+09GVYLUnbbDdGIrSrfCwxobUT3sF6L28ln4GEuTlK8QTmCBguGIbx+3uhYEQBoIghKrXCF9my2+J0++G7isuIplcakqmv2bncDNSL7Mkp6KpsTR9y+IZ0Z9C8OmSuLInVR2rmnGd8lfv0+VoboRTJ4XB3ct45MYhn8UljVmcdPksAieMwpMLY2DAgMBAAECggEAMNK5xUf7s6YHzBY15BJKSXWFYSySamm13yvcyxFI6VRxKN7le54NJgrnkJ4RYAipPQ0BAIeiRuT8wH2B2FRJ/KYynviwSLAwFBe226RJsbV1+S3ftuq/x9nzh/i9G9GbEkmD3AGhUzMZq25x4rwGU0VNC+fHbvP7Iweg9PyF359YQfkzqWytuf/UsssJ4MU/g5ZzoyN/87dPlhvVspdJVRD1MX0LoL9VBIVY0LBiRbp8GIiiyWWQF7NqcE2jor4CH6fZIzMZqlx7I37dFhOcMRNVsvJNjTGikNNhqpMuRsSkhMdh7djPSYUxDKM4KKX1kcQfvBKPyJJ2/1NjBhEowQKBgQD1gi8MzODnCrlq4v2BxI5ybLaYRMXlD1cdhUVlKDWso5pR0FV05pqncYYhEIgXJNQKhUQrouvyaypikoMercnI1VkQjRcASnk3r1QWvLnqoZZre9pTM0x0V2wcRayY/xd+Up/xw7A1CQ28HdjyNq2XScKQjF23sQ5yU4h6D6nkOwKBgQCQ4xPeKHCBV63wcaX5C3JDrAshb7kwHDAwHYIlXspezCZpVAqxm5+VhCjUeC2aPngz4/1bH37ZBQuIL9w9jUVDMG7Cn+4zmePDTA8DZXA8ME7N+sU4vl5aEcN/doMkWYId6HjWKdQdnJPqcd4EwgeG/UdU/GHL8oFxGMqklh1PWQKBgFiwZcTPAnQUaLUXORM26WqmoTPSrFa6OvM8ILyRUQqDs4zYoPZxE+9nUFgDe9Y4hK0kRWMqIOhbFF21pc5gY6O8hsc24NdHEBEwskTgep0rMIa1oEIsJvNkXXa9KMPAa0FEIemZkr8l/SM2+RdO71jW2YWUX4qrWJeuW4AUxn/fAoGAPmInmc4bsvVHpXGpnvO4vT6EhF8Qg5B/hxgNg32u8OZB27Qd7p8tNTl0QxeDuxgOtXkDC4siGNs9PeQtlisPmYBvEEnATGOEWACVrkas7p12MOY6qNX+1hUz8dvbV3latvnznXLhK+bRIW7pw26vwwWnAwawLRo7dbDQ/9DKyfECgYAGZ9NgSXxEjGqyltrXbto9j4t9XagsD7bhDqtlaJuIy9p5RG9f0AhOuvibKbGJYDAulm8Wa41xm9nimAMPlzDc1qLYWPD1rOUSg5hmBz52Y2lEH31iwZxde+gnA/rB1+fQbstmP7eDCFT1s4+Gr+xK7hc8ceexfuo6KO8fI8rSYw==",
                  "NOTION_CLIENT_ID": "48daaa94-6352-4aef-ac2b-8ba6cdfcfc0b",
                  "NOTION_CLIENT_SECRET": "secret_wPW0WE1YOEIAVaUv6PFxscbzZs1A0cY9xUOc22LZiXj",
                  "SEND_OTP_URL": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"SEND_OTP_URL\"]"
                  },
                  "INTEGRATE_URL": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"INTEGRATE_URL\"]"
                  },
                  "OTP_TEMPLATE_NAME": "all-tracker-otp-template-dev",
                  "CONFIGURATION_SET_NAME": "all-tracker-fakeShop-configurationSet-dev"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "LambdaExecutionRole",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ExerciseEntriesLogGroup",
              "LambdaExecutionRole"
            ]
          },
          "ExercisesLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/all-tracker/dev/1682874024478-2023-04-30T17:00:24.478Z/all-tracker.zip"
              },
              "Handler": "tracker-fitness/exercises/index.handler",
              "Runtime": "nodejs14.x",
              "FunctionName": "all-tracker-dev-exercises",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "ALL_TRACKER_TABLE_NAME": "dev-all-tracker-table",
                  "ACCESS_TOKEN_SECRET": "d3340691248ce92a2271fe059bfa813fcd7d2dhdhfgabenr58274019ulmgnsqifc9f8eaf48f5a70ada7403a503600243adbb40ed3976d68b75773313ca1ea",
                  "ENCRYPTER": "MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAivL/9KLDKgqIXHhwtM6qzBqq60Fc4ayrvmKVk76Wgeeo0ElxMrAZqKqNFyQsn9bWTvR2FBs+0P1T+KS75WM7pDiN/4DQerxfkGJOY6R0v+mseYc8ZVMYcQ5Py9euDWo4hGL220lMI0R9Yd/dVBCkhbW+HMebk/tPRlWC1J22w3RiK0q3wsMaG1E97Bei9vJZ+BhLk5SvEE5ggYLhiG8ft7oWBEAaCIISq1whfZstvidPvhu4rLiKZXGpKpr9m53AzUi+zJKeiqbE0fcviGdGfQvDpkriyJ1Udq5pxnfJX79PlaG6EUyeFwd3LeOTGIZ/FJY1ZnHT5LAInjMKTC2NgwIDAQAB",
                  "DECRYPTER": "MIIEvAIBADANBgkqhkiG9w0BAQEFAASCBKYwggSiAgEAAoIBAQCK8v/0osMqCohceHC0zqrMGqrrQVzhrKu+YpWTvpaB56jQSXEysBmoqo0XJCyf1tZO9HYUGz7Q/VP4pLvlYzukOI3/gNB6vF+QYk5jpHS/6ax5hzxlUxhxDk/L164NajiEYvbbSUwjRH1h391UEKSFtb4cx5uT+09GVYLUnbbDdGIrSrfCwxobUT3sF6L28ln4GEuTlK8QTmCBguGIbx+3uhYEQBoIghKrXCF9my2+J0++G7isuIplcakqmv2bncDNSL7Mkp6KpsTR9y+IZ0Z9C8OmSuLInVR2rmnGd8lfv0+VoboRTJ4XB3ct45MYhn8UljVmcdPksAieMwpMLY2DAgMBAAECggEAMNK5xUf7s6YHzBY15BJKSXWFYSySamm13yvcyxFI6VRxKN7le54NJgrnkJ4RYAipPQ0BAIeiRuT8wH2B2FRJ/KYynviwSLAwFBe226RJsbV1+S3ftuq/x9nzh/i9G9GbEkmD3AGhUzMZq25x4rwGU0VNC+fHbvP7Iweg9PyF359YQfkzqWytuf/UsssJ4MU/g5ZzoyN/87dPlhvVspdJVRD1MX0LoL9VBIVY0LBiRbp8GIiiyWWQF7NqcE2jor4CH6fZIzMZqlx7I37dFhOcMRNVsvJNjTGikNNhqpMuRsSkhMdh7djPSYUxDKM4KKX1kcQfvBKPyJJ2/1NjBhEowQKBgQD1gi8MzODnCrlq4v2BxI5ybLaYRMXlD1cdhUVlKDWso5pR0FV05pqncYYhEIgXJNQKhUQrouvyaypikoMercnI1VkQjRcASnk3r1QWvLnqoZZre9pTM0x0V2wcRayY/xd+Up/xw7A1CQ28HdjyNq2XScKQjF23sQ5yU4h6D6nkOwKBgQCQ4xPeKHCBV63wcaX5C3JDrAshb7kwHDAwHYIlXspezCZpVAqxm5+VhCjUeC2aPngz4/1bH37ZBQuIL9w9jUVDMG7Cn+4zmePDTA8DZXA8ME7N+sU4vl5aEcN/doMkWYId6HjWKdQdnJPqcd4EwgeG/UdU/GHL8oFxGMqklh1PWQKBgFiwZcTPAnQUaLUXORM26WqmoTPSrFa6OvM8ILyRUQqDs4zYoPZxE+9nUFgDe9Y4hK0kRWMqIOhbFF21pc5gY6O8hsc24NdHEBEwskTgep0rMIa1oEIsJvNkXXa9KMPAa0FEIemZkr8l/SM2+RdO71jW2YWUX4qrWJeuW4AUxn/fAoGAPmInmc4bsvVHpXGpnvO4vT6EhF8Qg5B/hxgNg32u8OZB27Qd7p8tNTl0QxeDuxgOtXkDC4siGNs9PeQtlisPmYBvEEnATGOEWACVrkas7p12MOY6qNX+1hUz8dvbV3latvnznXLhK+bRIW7pw26vwwWnAwawLRo7dbDQ/9DKyfECgYAGZ9NgSXxEjGqyltrXbto9j4t9XagsD7bhDqtlaJuIy9p5RG9f0AhOuvibKbGJYDAulm8Wa41xm9nimAMPlzDc1qLYWPD1rOUSg5hmBz52Y2lEH31iwZxde+gnA/rB1+fQbstmP7eDCFT1s4+Gr+xK7hc8ceexfuo6KO8fI8rSYw==",
                  "NOTION_CLIENT_ID": "48daaa94-6352-4aef-ac2b-8ba6cdfcfc0b",
                  "NOTION_CLIENT_SECRET": "secret_wPW0WE1YOEIAVaUv6PFxscbzZs1A0cY9xUOc22LZiXj",
                  "SEND_OTP_URL": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"SEND_OTP_URL\"]"
                  },
                  "INTEGRATE_URL": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"INTEGRATE_URL\"]"
                  },
                  "OTP_TEMPLATE_NAME": "all-tracker-otp-template-dev",
                  "CONFIGURATION_SET_NAME": "all-tracker-fakeShop-configurationSet-dev"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "LambdaExecutionRole",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ExercisesLogGroup",
              "LambdaExecutionRole"
            ]
          },
          "WorkoutEntriesLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/all-tracker/dev/1682874024478-2023-04-30T17:00:24.478Z/all-tracker.zip"
              },
              "Handler": "tracker-fitness/workoutEntries/index.handler",
              "Runtime": "nodejs14.x",
              "FunctionName": "all-tracker-dev-workoutEntries",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "ALL_TRACKER_TABLE_NAME": "dev-all-tracker-table",
                  "ACCESS_TOKEN_SECRET": "d3340691248ce92a2271fe059bfa813fcd7d2dhdhfgabenr58274019ulmgnsqifc9f8eaf48f5a70ada7403a503600243adbb40ed3976d68b75773313ca1ea",
                  "ENCRYPTER": "MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAivL/9KLDKgqIXHhwtM6qzBqq60Fc4ayrvmKVk76Wgeeo0ElxMrAZqKqNFyQsn9bWTvR2FBs+0P1T+KS75WM7pDiN/4DQerxfkGJOY6R0v+mseYc8ZVMYcQ5Py9euDWo4hGL220lMI0R9Yd/dVBCkhbW+HMebk/tPRlWC1J22w3RiK0q3wsMaG1E97Bei9vJZ+BhLk5SvEE5ggYLhiG8ft7oWBEAaCIISq1whfZstvidPvhu4rLiKZXGpKpr9m53AzUi+zJKeiqbE0fcviGdGfQvDpkriyJ1Udq5pxnfJX79PlaG6EUyeFwd3LeOTGIZ/FJY1ZnHT5LAInjMKTC2NgwIDAQAB",
                  "DECRYPTER": "MIIEvAIBADANBgkqhkiG9w0BAQEFAASCBKYwggSiAgEAAoIBAQCK8v/0osMqCohceHC0zqrMGqrrQVzhrKu+YpWTvpaB56jQSXEysBmoqo0XJCyf1tZO9HYUGz7Q/VP4pLvlYzukOI3/gNB6vF+QYk5jpHS/6ax5hzxlUxhxDk/L164NajiEYvbbSUwjRH1h391UEKSFtb4cx5uT+09GVYLUnbbDdGIrSrfCwxobUT3sF6L28ln4GEuTlK8QTmCBguGIbx+3uhYEQBoIghKrXCF9my2+J0++G7isuIplcakqmv2bncDNSL7Mkp6KpsTR9y+IZ0Z9C8OmSuLInVR2rmnGd8lfv0+VoboRTJ4XB3ct45MYhn8UljVmcdPksAieMwpMLY2DAgMBAAECggEAMNK5xUf7s6YHzBY15BJKSXWFYSySamm13yvcyxFI6VRxKN7le54NJgrnkJ4RYAipPQ0BAIeiRuT8wH2B2FRJ/KYynviwSLAwFBe226RJsbV1+S3ftuq/x9nzh/i9G9GbEkmD3AGhUzMZq25x4rwGU0VNC+fHbvP7Iweg9PyF359YQfkzqWytuf/UsssJ4MU/g5ZzoyN/87dPlhvVspdJVRD1MX0LoL9VBIVY0LBiRbp8GIiiyWWQF7NqcE2jor4CH6fZIzMZqlx7I37dFhOcMRNVsvJNjTGikNNhqpMuRsSkhMdh7djPSYUxDKM4KKX1kcQfvBKPyJJ2/1NjBhEowQKBgQD1gi8MzODnCrlq4v2BxI5ybLaYRMXlD1cdhUVlKDWso5pR0FV05pqncYYhEIgXJNQKhUQrouvyaypikoMercnI1VkQjRcASnk3r1QWvLnqoZZre9pTM0x0V2wcRayY/xd+Up/xw7A1CQ28HdjyNq2XScKQjF23sQ5yU4h6D6nkOwKBgQCQ4xPeKHCBV63wcaX5C3JDrAshb7kwHDAwHYIlXspezCZpVAqxm5+VhCjUeC2aPngz4/1bH37ZBQuIL9w9jUVDMG7Cn+4zmePDTA8DZXA8ME7N+sU4vl5aEcN/doMkWYId6HjWKdQdnJPqcd4EwgeG/UdU/GHL8oFxGMqklh1PWQKBgFiwZcTPAnQUaLUXORM26WqmoTPSrFa6OvM8ILyRUQqDs4zYoPZxE+9nUFgDe9Y4hK0kRWMqIOhbFF21pc5gY6O8hsc24NdHEBEwskTgep0rMIa1oEIsJvNkXXa9KMPAa0FEIemZkr8l/SM2+RdO71jW2YWUX4qrWJeuW4AUxn/fAoGAPmInmc4bsvVHpXGpnvO4vT6EhF8Qg5B/hxgNg32u8OZB27Qd7p8tNTl0QxeDuxgOtXkDC4siGNs9PeQtlisPmYBvEEnATGOEWACVrkas7p12MOY6qNX+1hUz8dvbV3latvnznXLhK+bRIW7pw26vwwWnAwawLRo7dbDQ/9DKyfECgYAGZ9NgSXxEjGqyltrXbto9j4t9XagsD7bhDqtlaJuIy9p5RG9f0AhOuvibKbGJYDAulm8Wa41xm9nimAMPlzDc1qLYWPD1rOUSg5hmBz52Y2lEH31iwZxde+gnA/rB1+fQbstmP7eDCFT1s4+Gr+xK7hc8ceexfuo6KO8fI8rSYw==",
                  "NOTION_CLIENT_ID": "48daaa94-6352-4aef-ac2b-8ba6cdfcfc0b",
                  "NOTION_CLIENT_SECRET": "secret_wPW0WE1YOEIAVaUv6PFxscbzZs1A0cY9xUOc22LZiXj",
                  "SEND_OTP_URL": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"SEND_OTP_URL\"]"
                  },
                  "INTEGRATE_URL": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"INTEGRATE_URL\"]"
                  },
                  "OTP_TEMPLATE_NAME": "all-tracker-otp-template-dev",
                  "CONFIGURATION_SET_NAME": "all-tracker-fakeShop-configurationSet-dev"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "LambdaExecutionRole",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "WorkoutEntriesLogGroup",
              "LambdaExecutionRole"
            ]
          },
          "WorkoutPlansLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/all-tracker/dev/1682874024478-2023-04-30T17:00:24.478Z/all-tracker.zip"
              },
              "Handler": "tracker-fitness/workoutPlans/index.handler",
              "Runtime": "nodejs14.x",
              "FunctionName": "all-tracker-dev-workoutPlans",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "ALL_TRACKER_TABLE_NAME": "dev-all-tracker-table",
                  "ACCESS_TOKEN_SECRET": "d3340691248ce92a2271fe059bfa813fcd7d2dhdhfgabenr58274019ulmgnsqifc9f8eaf48f5a70ada7403a503600243adbb40ed3976d68b75773313ca1ea",
                  "ENCRYPTER": "MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAivL/9KLDKgqIXHhwtM6qzBqq60Fc4ayrvmKVk76Wgeeo0ElxMrAZqKqNFyQsn9bWTvR2FBs+0P1T+KS75WM7pDiN/4DQerxfkGJOY6R0v+mseYc8ZVMYcQ5Py9euDWo4hGL220lMI0R9Yd/dVBCkhbW+HMebk/tPRlWC1J22w3RiK0q3wsMaG1E97Bei9vJZ+BhLk5SvEE5ggYLhiG8ft7oWBEAaCIISq1whfZstvidPvhu4rLiKZXGpKpr9m53AzUi+zJKeiqbE0fcviGdGfQvDpkriyJ1Udq5pxnfJX79PlaG6EUyeFwd3LeOTGIZ/FJY1ZnHT5LAInjMKTC2NgwIDAQAB",
                  "DECRYPTER": "MIIEvAIBADANBgkqhkiG9w0BAQEFAASCBKYwggSiAgEAAoIBAQCK8v/0osMqCohceHC0zqrMGqrrQVzhrKu+YpWTvpaB56jQSXEysBmoqo0XJCyf1tZO9HYUGz7Q/VP4pLvlYzukOI3/gNB6vF+QYk5jpHS/6ax5hzxlUxhxDk/L164NajiEYvbbSUwjRH1h391UEKSFtb4cx5uT+09GVYLUnbbDdGIrSrfCwxobUT3sF6L28ln4GEuTlK8QTmCBguGIbx+3uhYEQBoIghKrXCF9my2+J0++G7isuIplcakqmv2bncDNSL7Mkp6KpsTR9y+IZ0Z9C8OmSuLInVR2rmnGd8lfv0+VoboRTJ4XB3ct45MYhn8UljVmcdPksAieMwpMLY2DAgMBAAECggEAMNK5xUf7s6YHzBY15BJKSXWFYSySamm13yvcyxFI6VRxKN7le54NJgrnkJ4RYAipPQ0BAIeiRuT8wH2B2FRJ/KYynviwSLAwFBe226RJsbV1+S3ftuq/x9nzh/i9G9GbEkmD3AGhUzMZq25x4rwGU0VNC+fHbvP7Iweg9PyF359YQfkzqWytuf/UsssJ4MU/g5ZzoyN/87dPlhvVspdJVRD1MX0LoL9VBIVY0LBiRbp8GIiiyWWQF7NqcE2jor4CH6fZIzMZqlx7I37dFhOcMRNVsvJNjTGikNNhqpMuRsSkhMdh7djPSYUxDKM4KKX1kcQfvBKPyJJ2/1NjBhEowQKBgQD1gi8MzODnCrlq4v2BxI5ybLaYRMXlD1cdhUVlKDWso5pR0FV05pqncYYhEIgXJNQKhUQrouvyaypikoMercnI1VkQjRcASnk3r1QWvLnqoZZre9pTM0x0V2wcRayY/xd+Up/xw7A1CQ28HdjyNq2XScKQjF23sQ5yU4h6D6nkOwKBgQCQ4xPeKHCBV63wcaX5C3JDrAshb7kwHDAwHYIlXspezCZpVAqxm5+VhCjUeC2aPngz4/1bH37ZBQuIL9w9jUVDMG7Cn+4zmePDTA8DZXA8ME7N+sU4vl5aEcN/doMkWYId6HjWKdQdnJPqcd4EwgeG/UdU/GHL8oFxGMqklh1PWQKBgFiwZcTPAnQUaLUXORM26WqmoTPSrFa6OvM8ILyRUQqDs4zYoPZxE+9nUFgDe9Y4hK0kRWMqIOhbFF21pc5gY6O8hsc24NdHEBEwskTgep0rMIa1oEIsJvNkXXa9KMPAa0FEIemZkr8l/SM2+RdO71jW2YWUX4qrWJeuW4AUxn/fAoGAPmInmc4bsvVHpXGpnvO4vT6EhF8Qg5B/hxgNg32u8OZB27Qd7p8tNTl0QxeDuxgOtXkDC4siGNs9PeQtlisPmYBvEEnATGOEWACVrkas7p12MOY6qNX+1hUz8dvbV3latvnznXLhK+bRIW7pw26vwwWnAwawLRo7dbDQ/9DKyfECgYAGZ9NgSXxEjGqyltrXbto9j4t9XagsD7bhDqtlaJuIy9p5RG9f0AhOuvibKbGJYDAulm8Wa41xm9nimAMPlzDc1qLYWPD1rOUSg5hmBz52Y2lEH31iwZxde+gnA/rB1+fQbstmP7eDCFT1s4+Gr+xK7hc8ceexfuo6KO8fI8rSYw==",
                  "NOTION_CLIENT_ID": "48daaa94-6352-4aef-ac2b-8ba6cdfcfc0b",
                  "NOTION_CLIENT_SECRET": "secret_wPW0WE1YOEIAVaUv6PFxscbzZs1A0cY9xUOc22LZiXj",
                  "SEND_OTP_URL": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"SEND_OTP_URL\"]"
                  },
                  "INTEGRATE_URL": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"INTEGRATE_URL\"]"
                  },
                  "OTP_TEMPLATE_NAME": "all-tracker-otp-template-dev",
                  "CONFIGURATION_SET_NAME": "all-tracker-fakeShop-configurationSet-dev"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "LambdaExecutionRole",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "WorkoutPlansLogGroup",
              "LambdaExecutionRole"
            ]
          },
          "InitiateIntegrationLambdaVersionnCwKjBT28xO1fIq81P85TvRy4XW8YXtoCmMlkA": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "InitiateIntegrationLambdaFunction"
              },
              "CodeSha256": "0cTs2hqVt64VDGFfDm+lPDNGYCq5lfIj0aRtrNKW4oA="
            }
          },
          "IntegrateLambdaVersionOxYH4qSjuYLIgLHbOmr4k2WP0JgHOi9Upb7CKTQEPE": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "IntegrateLambdaFunction"
              },
              "CodeSha256": "0cTs2hqVt64VDGFfDm+lPDNGYCq5lfIj0aRtrNKW4oA="
            }
          },
          "CheckIntegrationLambdaVersion6EPTxXzSRn4OUwZ32ERwvVV69gUfTziqWRBsJfe3dM": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CheckIntegrationLambdaFunction"
              },
              "CodeSha256": "0cTs2hqVt64VDGFfDm+lPDNGYCq5lfIj0aRtrNKW4oA="
            }
          },
          "CreateEntryLambdaVersionC81HvXgF9xTCKbALTI5oKpt81N1TZTcFfdb7B6ngHoI": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreateEntryLambdaFunction"
              },
              "CodeSha256": "0cTs2hqVt64VDGFfDm+lPDNGYCq5lfIj0aRtrNKW4oA="
            }
          },
          "LoginAppleLambdaVersionMtjUsGqM5Bn9wRbTUQqjfDlkMm2j48tNk8gyaxwEr6U": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "LoginAppleLambdaFunction"
              },
              "CodeSha256": "0cTs2hqVt64VDGFfDm+lPDNGYCq5lfIj0aRtrNKW4oA="
            }
          },
          "LoginGoogleLambdaVersion0BSggAtKx3yd5s8sWQKB9IjxE6pkZcG20xzNKOnw": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "LoginGoogleLambdaFunction"
              },
              "CodeSha256": "0cTs2hqVt64VDGFfDm+lPDNGYCq5lfIj0aRtrNKW4oA="
            }
          },
          "LoginOTPLambdaVersion9WTHGeYTZTefQPXYI2ysAcrkSzRCBXySqUUpyLdCwiA": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "LoginOTPLambdaFunction"
              },
              "CodeSha256": "0cTs2hqVt64VDGFfDm+lPDNGYCq5lfIj0aRtrNKW4oA="
            }
          },
          "RequestOTPLambdaVersionDMnzYZa0Yxivou5qaTgX2nkdwKiEmsegKZu1tSwVaVc": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "RequestOTPLambdaFunction"
              },
              "CodeSha256": "0cTs2hqVt64VDGFfDm+lPDNGYCq5lfIj0aRtrNKW4oA="
            }
          },
          "UserExistsLambdaVersionJqzNqQ8FtVHcjuPzDTU1WqXbuOSktMNUOH8vPRgtLE": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UserExistsLambdaFunction"
              },
              "CodeSha256": "0cTs2hqVt64VDGFfDm+lPDNGYCq5lfIj0aRtrNKW4oA="
            }
          },
          "RefreshTokenLambdaVersionEKLziZj4SuUhZZ18tBZe96uOgEjKcs1DYCFQOsgeA": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "RefreshTokenLambdaFunction"
              },
              "CodeSha256": "0cTs2hqVt64VDGFfDm+lPDNGYCq5lfIj0aRtrNKW4oA="
            }
          },
          "SendOTPEmailLambdaVersiondE2PQmlY4QU97jz7QRBhCCPxV92KCudlmvRYqrcBd8U": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "SendOTPEmailLambdaFunction"
              },
              "CodeSha256": "0cTs2hqVt64VDGFfDm+lPDNGYCq5lfIj0aRtrNKW4oA="
            }
          },
          "ProcessFailedOTPEmailLambdaVersionkbWf3zUkKdZQ2Ixb1IdlyieJQ6lZi99OxHGa6JZFDg": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ProcessFailedOTPEmailLambdaFunction"
              },
              "CodeSha256": "0cTs2hqVt64VDGFfDm+lPDNGYCq5lfIj0aRtrNKW4oA="
            }
          },
          "HealthInfoLambdaVersionE20q79YLwJzjVbC5YLSHGo8YA6sSkLB4D0plDSjtfE": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "HealthInfoLambdaFunction"
              },
              "CodeSha256": "0cTs2hqVt64VDGFfDm+lPDNGYCq5lfIj0aRtrNKW4oA="
            }
          },
          "FoodEntriesLambdaVersionRFlH1AWruTjtxZrFzGeJEWd8ix6itjz0Gsx0b52Y": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "FoodEntriesLambdaFunction"
              },
              "CodeSha256": "0cTs2hqVt64VDGFfDm+lPDNGYCq5lfIj0aRtrNKW4oA="
            }
          },
          "FoodItemsLambdaVersion0yDm4KtCNSXiOr4B2ig2Vd0nWVWYgUDRpWSwWY2NBY": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "FoodItemsLambdaFunction"
              },
              "CodeSha256": "0cTs2hqVt64VDGFfDm+lPDNGYCq5lfIj0aRtrNKW4oA="
            }
          },
          "HabitsLambdaVersionGK6svvKPSECSLUvyXUWD6GKEcMcfMN0yiKIonABQjo": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "HabitsLambdaFunction"
              },
              "CodeSha256": "0cTs2hqVt64VDGFfDm+lPDNGYCq5lfIj0aRtrNKW4oA="
            }
          },
          "HabitStatusesLambdaVersionOIz1BViX4MDJK93wDjxuENpzmmi2G3iwFrfokba0Wl0": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "HabitStatusesLambdaFunction"
              },
              "CodeSha256": "0cTs2hqVt64VDGFfDm+lPDNGYCq5lfIj0aRtrNKW4oA="
            }
          },
          "SleepReportsLambdaVersiont86A1Pwir97Eaby8Kn0lQUgcWJlMeE72P6hzaSIHQ": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "SleepReportsLambdaFunction"
              },
              "CodeSha256": "0cTs2hqVt64VDGFfDm+lPDNGYCq5lfIj0aRtrNKW4oA="
            }
          },
          "WellnessReportsLambdaVersionb03Nc8jL7gAXz2RNtDqiudzJOZjAAWn7l1QvoBCN0": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "WellnessReportsLambdaFunction"
              },
              "CodeSha256": "0cTs2hqVt64VDGFfDm+lPDNGYCq5lfIj0aRtrNKW4oA="
            }
          },
          "TasksLambdaVersion5dzl8NGyOtG1mP4uNzAJHrKUzng4WwNcZ6jIO7wGhwQ": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "TasksLambdaFunction"
              },
              "CodeSha256": "0cTs2hqVt64VDGFfDm+lPDNGYCq5lfIj0aRtrNKW4oA="
            }
          },
          "ToDosLambdaVersionPqcnEnYmSP7i00RErIS71M0fMxq9GSaJlzDMnTgXEcU": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ToDosLambdaFunction"
              },
              "CodeSha256": "0cTs2hqVt64VDGFfDm+lPDNGYCq5lfIj0aRtrNKW4oA="
            }
          },
          "ExerciseEntriesLambdaVersionm7YytbKwkIxzPOPsn5cTfj64sR8uXLVGrr3TnMao": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ExerciseEntriesLambdaFunction"
              },
              "CodeSha256": "0cTs2hqVt64VDGFfDm+lPDNGYCq5lfIj0aRtrNKW4oA="
            }
          },
          "ExercisesLambdaVersionbTe5ytNanv2svtUgvGCvWtsGYeVTCmCNF57BiB6jcU": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ExercisesLambdaFunction"
              },
              "CodeSha256": "0cTs2hqVt64VDGFfDm+lPDNGYCq5lfIj0aRtrNKW4oA="
            }
          },
          "WorkoutEntriesLambdaVersionxcaNoXnBeXf2DxveU9h4MqHXQ1DiqOsteecEsOZupU": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "WorkoutEntriesLambdaFunction"
              },
              "CodeSha256": "0cTs2hqVt64VDGFfDm+lPDNGYCq5lfIj0aRtrNKW4oA="
            }
          },
          "WorkoutPlansLambdaVersionYmOL8f8EiIDs4aJuZBb3yFh5giHdsnD1SzwsgZM1cWM": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "WorkoutPlansLambdaFunction"
              },
              "CodeSha256": "0cTs2hqVt64VDGFfDm+lPDNGYCq5lfIj0aRtrNKW4oA="
            }
          },
          "ApiGatewayRestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
              "Name": "dev-all-tracker",
              "EndpointConfiguration": {
                "Types": [
                  "EDGE"
                ]
              },
              "Policy": ""
            }
          },
          "ApiGatewayResourceNotion": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "notion",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceNotionInitiateintegration": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceNotion"
              },
              "PathPart": "initiateIntegration",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceNotionCheckintegration": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceNotion"
              },
              "PathPart": "checkIntegration",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceNotionCreateentry": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceNotion"
              },
              "PathPart": "createEntry",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceAuthentication": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "authentication",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceAuthenticationLoginapple": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceAuthentication"
              },
              "PathPart": "loginApple",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceAuthenticationLogingoogle": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceAuthentication"
              },
              "PathPart": "loginGoogle",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceAuthenticationLoginotp": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceAuthentication"
              },
              "PathPart": "loginOTP",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceAuthenticationRequestotp": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceAuthentication"
              },
              "PathPart": "requestOTP",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceAuthenticationUserexists": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceAuthentication"
              },
              "PathPart": "userExists",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceAuthenticationRefreshtoken": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceAuthentication"
              },
              "PathPart": "refreshToken",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceHealthinfo": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "healthInfo",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceFoodentries": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "foodEntries",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceFoodentriesFoodentryidVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceFoodentries"
              },
              "PathPart": "{foodEntryID}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceFooditems": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "foodItems",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceFooditemsFooditemidVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceFooditems"
              },
              "PathPart": "{foodItemID}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceHabits": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "habits",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceHabitsHabitidVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceHabits"
              },
              "PathPart": "{habitID}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceHabitstatuses": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "habitStatuses",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceHabitstatusesHabitstatusidVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceHabitstatuses"
              },
              "PathPart": "{habitStatusID}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceSleepreports": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "sleepReports",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceSleepreportsSleepreportidVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceSleepreports"
              },
              "PathPart": "{sleepReportID}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceWellnessreports": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "wellnessReports",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceWellnessreportsWellnessreportidVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceWellnessreports"
              },
              "PathPart": "{wellnessReportID}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceTasks": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "tasks",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceTasksTaskidVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceTasks"
              },
              "PathPart": "{taskID}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceTodos": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "toDos",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceTodosTodoidVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceTodos"
              },
              "PathPart": "{toDoID}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceExerciseentries": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "exerciseEntries",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceExerciseentriesExerciseentryidVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceExerciseentries"
              },
              "PathPart": "{exerciseEntryID}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceExercises": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "exercises",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceExercisesExerciseidVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceExercises"
              },
              "PathPart": "{exerciseID}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceWorkoutentries": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "workoutEntries",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceWorkoutentriesWorkoutentryidVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceWorkoutentries"
              },
              "PathPart": "{workoutEntryID}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceWorkoutplans": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "workoutPlans",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceWorkoutplansWorkoutplanidVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceWorkoutplans"
              },
              "PathPart": "{workoutPlanID}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodNotionInitiateintegrationOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceNotionInitiateintegration"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodNotionCheckintegrationOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceNotionCheckintegration"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodNotionCreateentryOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceNotionCreateentry"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodAuthenticationLoginappleOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceAuthenticationLoginapple"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodAuthenticationLogingoogleOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceAuthenticationLogingoogle"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodAuthenticationLoginotpOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceAuthenticationLoginotp"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodAuthenticationRequestotpOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceAuthenticationRequestotp"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodAuthenticationUserexistsOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceAuthenticationUserexists"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodAuthenticationRefreshtokenOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceAuthenticationRefreshtoken"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodHealthinfoOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,PUT,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceHealthinfo"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodFoodentriesOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceFoodentries"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodFoodentriesFoodentryidVarOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE,PUT'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceFoodentriesFoodentryidVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodFooditemsOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceFooditems"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodFooditemsFooditemidVarOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE,PUT,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceFooditemsFooditemidVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodHabitsOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceHabits"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodHabitsHabitidVarOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE,PUT'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceHabitsHabitidVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodHabitstatusesOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceHabitstatuses"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodHabitstatusesHabitstatusidVarOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE,PUT'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceHabitstatusesHabitstatusidVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodSleepreportsOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceSleepreports"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodSleepreportsSleepreportidVarOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE,PUT'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceSleepreportsSleepreportidVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodWellnessreportsOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceWellnessreports"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodWellnessreportsWellnessreportidVarOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE,PUT'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceWellnessreportsWellnessreportidVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodTasksOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceTasks"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodTasksTaskidVarOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE,PUT'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceTasksTaskidVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodTodosOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceTodos"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodTodosTodoidVarOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE,PUT'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceTodosTodoidVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodExerciseentriesOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceExerciseentries"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodExerciseentriesExerciseentryidVarOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE,PUT'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceExerciseentriesExerciseentryidVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodExercisesOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceExercises"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodExercisesExerciseidVarOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE,PUT'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceExercisesExerciseidVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodWorkoutentriesOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceWorkoutentries"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodWorkoutentriesWorkoutentryidVarOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE,PUT'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceWorkoutentriesWorkoutentryidVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodWorkoutplansOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceWorkoutplans"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodWorkoutplansWorkoutplanidVarOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE,PUT'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceWorkoutplansWorkoutplanidVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodNotionInitiateintegrationPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceNotionInitiateintegration"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "InitiateIntegrationLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "InitiateIntegrationLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodNotionCheckintegrationPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceNotionCheckintegration"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "CheckIntegrationLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "CheckIntegrationLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodNotionCreateentryPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceNotionCreateentry"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "CreateEntryLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "CreateEntryLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodAuthenticationLoginapplePost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceAuthenticationLoginapple"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "LoginAppleLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "LoginAppleLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodAuthenticationLogingooglePost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceAuthenticationLogingoogle"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "LoginGoogleLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "LoginGoogleLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodAuthenticationLoginotpPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceAuthenticationLoginotp"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "LoginOTPLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "LoginOTPLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodAuthenticationRequestotpPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceAuthenticationRequestotp"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "RequestOTPLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "RequestOTPLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodAuthenticationUserexistsPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceAuthenticationUserexists"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "UserExistsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "UserExistsLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodAuthenticationRefreshtokenPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceAuthenticationRefreshtoken"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "RefreshTokenLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "RefreshTokenLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodHealthinfoGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceHealthinfo"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "HealthInfoLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "HealthInfoLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodHealthinfoPut": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "PUT",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceHealthinfo"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "HealthInfoLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "HealthInfoLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodFoodentriesGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceFoodentries"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "FoodEntriesLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "FoodEntriesLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodFoodentriesPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceFoodentries"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "FoodEntriesLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "FoodEntriesLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodFoodentriesFoodentryidVarPut": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "PUT",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceFoodentriesFoodentryidVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "FoodEntriesLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "FoodEntriesLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodFoodentriesFoodentryidVarDelete": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "DELETE",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceFoodentriesFoodentryidVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "FoodEntriesLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "FoodEntriesLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodFooditemsGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceFooditems"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "FoodItemsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "FoodItemsLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodFooditemsFooditemidVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceFooditemsFooditemidVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "FoodItemsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "FoodItemsLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodFooditemsPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceFooditems"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "FoodItemsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "FoodItemsLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodFooditemsFooditemidVarPut": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "PUT",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceFooditemsFooditemidVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "FoodItemsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "FoodItemsLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodFooditemsFooditemidVarDelete": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "DELETE",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceFooditemsFooditemidVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "FoodItemsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "FoodItemsLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodHabitsGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceHabits"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "HabitsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "HabitsLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodHabitsPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceHabits"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "HabitsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "HabitsLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodHabitsHabitidVarPut": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "PUT",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceHabitsHabitidVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "HabitsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "HabitsLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodHabitsHabitidVarDelete": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "DELETE",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceHabitsHabitidVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "HabitsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "HabitsLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodHabitstatusesGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceHabitstatuses"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "HabitStatusesLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "HabitStatusesLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodHabitstatusesPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceHabitstatuses"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "HabitStatusesLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "HabitStatusesLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodHabitstatusesHabitstatusidVarPut": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "PUT",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceHabitstatusesHabitstatusidVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "HabitStatusesLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "HabitStatusesLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodHabitstatusesHabitstatusidVarDelete": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "DELETE",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceHabitstatusesHabitstatusidVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "HabitStatusesLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "HabitStatusesLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodSleepreportsGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceSleepreports"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "SleepReportsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "SleepReportsLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodSleepreportsPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceSleepreports"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "SleepReportsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "SleepReportsLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodSleepreportsSleepreportidVarPut": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "PUT",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceSleepreportsSleepreportidVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "SleepReportsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "SleepReportsLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodSleepreportsSleepreportidVarDelete": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "DELETE",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceSleepreportsSleepreportidVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "SleepReportsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "SleepReportsLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodWellnessreportsGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceWellnessreports"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "WellnessReportsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "WellnessReportsLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodWellnessreportsPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceWellnessreports"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "WellnessReportsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "WellnessReportsLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodWellnessreportsWellnessreportidVarPut": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "PUT",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceWellnessreportsWellnessreportidVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "WellnessReportsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "WellnessReportsLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodWellnessreportsWellnessreportidVarDelete": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "DELETE",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceWellnessreportsWellnessreportidVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "WellnessReportsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "WellnessReportsLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodTasksGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceTasks"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "TasksLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "TasksLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodTasksPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceTasks"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "TasksLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "TasksLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodTasksTaskidVarPut": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "PUT",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceTasksTaskidVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "TasksLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "TasksLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodTasksTaskidVarDelete": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "DELETE",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceTasksTaskidVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "TasksLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "TasksLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodTodosGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceTodos"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "ToDosLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "ToDosLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodTodosPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceTodos"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "ToDosLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "ToDosLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodTodosTodoidVarPut": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "PUT",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceTodosTodoidVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "ToDosLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "ToDosLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodTodosTodoidVarDelete": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "DELETE",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceTodosTodoidVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "ToDosLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "ToDosLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodExerciseentriesGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceExerciseentries"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "ExerciseEntriesLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "ExerciseEntriesLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodExerciseentriesPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceExerciseentries"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "ExerciseEntriesLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "ExerciseEntriesLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodExerciseentriesExerciseentryidVarPut": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "PUT",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceExerciseentriesExerciseentryidVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "ExerciseEntriesLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "ExerciseEntriesLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodExerciseentriesExerciseentryidVarDelete": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "DELETE",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceExerciseentriesExerciseentryidVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "ExerciseEntriesLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "ExerciseEntriesLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodExercisesGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceExercises"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "ExercisesLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "ExercisesLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodExercisesPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceExercises"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "ExercisesLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "ExercisesLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodExercisesExerciseidVarPut": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "PUT",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceExercisesExerciseidVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "ExercisesLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "ExercisesLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodExercisesExerciseidVarDelete": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "DELETE",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceExercisesExerciseidVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "ExercisesLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "ExercisesLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodWorkoutentriesGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceWorkoutentries"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "WorkoutEntriesLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "WorkoutEntriesLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodWorkoutentriesPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceWorkoutentries"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "WorkoutEntriesLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "WorkoutEntriesLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodWorkoutentriesWorkoutentryidVarPut": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "PUT",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceWorkoutentriesWorkoutentryidVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "WorkoutEntriesLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "WorkoutEntriesLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodWorkoutentriesWorkoutentryidVarDelete": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "DELETE",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceWorkoutentriesWorkoutentryidVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "WorkoutEntriesLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "WorkoutEntriesLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodWorkoutplansGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceWorkoutplans"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "WorkoutPlansLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "WorkoutPlansLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodWorkoutplansPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceWorkoutplans"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "WorkoutPlansLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "WorkoutPlansLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodWorkoutplansWorkoutplanidVarPut": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "PUT",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceWorkoutplansWorkoutplanidVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "WorkoutPlansLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "WorkoutPlansLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodWorkoutplansWorkoutplanidVarDelete": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "DELETE",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceWorkoutplansWorkoutplanidVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "WorkoutPlansLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "WorkoutPlansLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayDeployment1682874006340": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "StageName": "dev"
            },
            "DependsOn": [
              "ApiGatewayMethodNotionInitiateintegrationOptions",
              "ApiGatewayMethodNotionCheckintegrationOptions",
              "ApiGatewayMethodNotionCreateentryOptions",
              "ApiGatewayMethodAuthenticationLoginappleOptions",
              "ApiGatewayMethodAuthenticationLogingoogleOptions",
              "ApiGatewayMethodAuthenticationLoginotpOptions",
              "ApiGatewayMethodAuthenticationRequestotpOptions",
              "ApiGatewayMethodAuthenticationUserexistsOptions",
              "ApiGatewayMethodAuthenticationRefreshtokenOptions",
              "ApiGatewayMethodHealthinfoOptions",
              "ApiGatewayMethodFoodentriesOptions",
              "ApiGatewayMethodFoodentriesFoodentryidVarOptions",
              "ApiGatewayMethodFooditemsOptions",
              "ApiGatewayMethodFooditemsFooditemidVarOptions",
              "ApiGatewayMethodHabitsOptions",
              "ApiGatewayMethodHabitsHabitidVarOptions",
              "ApiGatewayMethodHabitstatusesOptions",
              "ApiGatewayMethodHabitstatusesHabitstatusidVarOptions",
              "ApiGatewayMethodSleepreportsOptions",
              "ApiGatewayMethodSleepreportsSleepreportidVarOptions",
              "ApiGatewayMethodWellnessreportsOptions",
              "ApiGatewayMethodWellnessreportsWellnessreportidVarOptions",
              "ApiGatewayMethodTasksOptions",
              "ApiGatewayMethodTasksTaskidVarOptions",
              "ApiGatewayMethodTodosOptions",
              "ApiGatewayMethodTodosTodoidVarOptions",
              "ApiGatewayMethodExerciseentriesOptions",
              "ApiGatewayMethodExerciseentriesExerciseentryidVarOptions",
              "ApiGatewayMethodExercisesOptions",
              "ApiGatewayMethodExercisesExerciseidVarOptions",
              "ApiGatewayMethodWorkoutentriesOptions",
              "ApiGatewayMethodWorkoutentriesWorkoutentryidVarOptions",
              "ApiGatewayMethodWorkoutplansOptions",
              "ApiGatewayMethodWorkoutplansWorkoutplanidVarOptions",
              "ApiGatewayMethodNotionInitiateintegrationPost",
              "ApiGatewayMethodNotionCheckintegrationPost",
              "ApiGatewayMethodNotionCreateentryPost",
              "ApiGatewayMethodAuthenticationLoginapplePost",
              "ApiGatewayMethodAuthenticationLogingooglePost",
              "ApiGatewayMethodAuthenticationLoginotpPost",
              "ApiGatewayMethodAuthenticationRequestotpPost",
              "ApiGatewayMethodAuthenticationUserexistsPost",
              "ApiGatewayMethodAuthenticationRefreshtokenPost",
              "ApiGatewayMethodHealthinfoGet",
              "ApiGatewayMethodHealthinfoPut",
              "ApiGatewayMethodFoodentriesGet",
              "ApiGatewayMethodFoodentriesPost",
              "ApiGatewayMethodFoodentriesFoodentryidVarPut",
              "ApiGatewayMethodFoodentriesFoodentryidVarDelete",
              "ApiGatewayMethodFooditemsGet",
              "ApiGatewayMethodFooditemsFooditemidVarGet",
              "ApiGatewayMethodFooditemsPost",
              "ApiGatewayMethodFooditemsFooditemidVarPut",
              "ApiGatewayMethodFooditemsFooditemidVarDelete",
              "ApiGatewayMethodHabitsGet",
              "ApiGatewayMethodHabitsPost",
              "ApiGatewayMethodHabitsHabitidVarPut",
              "ApiGatewayMethodHabitsHabitidVarDelete",
              "ApiGatewayMethodHabitstatusesGet",
              "ApiGatewayMethodHabitstatusesPost",
              "ApiGatewayMethodHabitstatusesHabitstatusidVarPut",
              "ApiGatewayMethodHabitstatusesHabitstatusidVarDelete",
              "ApiGatewayMethodSleepreportsGet",
              "ApiGatewayMethodSleepreportsPost",
              "ApiGatewayMethodSleepreportsSleepreportidVarPut",
              "ApiGatewayMethodSleepreportsSleepreportidVarDelete",
              "ApiGatewayMethodWellnessreportsGet",
              "ApiGatewayMethodWellnessreportsPost",
              "ApiGatewayMethodWellnessreportsWellnessreportidVarPut",
              "ApiGatewayMethodWellnessreportsWellnessreportidVarDelete",
              "ApiGatewayMethodTasksGet",
              "ApiGatewayMethodTasksPost",
              "ApiGatewayMethodTasksTaskidVarPut",
              "ApiGatewayMethodTasksTaskidVarDelete",
              "ApiGatewayMethodTodosGet",
              "ApiGatewayMethodTodosPost",
              "ApiGatewayMethodTodosTodoidVarPut",
              "ApiGatewayMethodTodosTodoidVarDelete",
              "ApiGatewayMethodExerciseentriesGet",
              "ApiGatewayMethodExerciseentriesPost",
              "ApiGatewayMethodExerciseentriesExerciseentryidVarPut",
              "ApiGatewayMethodExerciseentriesExerciseentryidVarDelete",
              "ApiGatewayMethodExercisesGet",
              "ApiGatewayMethodExercisesPost",
              "ApiGatewayMethodExercisesExerciseidVarPut",
              "ApiGatewayMethodExercisesExerciseidVarDelete",
              "ApiGatewayMethodWorkoutentriesGet",
              "ApiGatewayMethodWorkoutentriesPost",
              "ApiGatewayMethodWorkoutentriesWorkoutentryidVarPut",
              "ApiGatewayMethodWorkoutentriesWorkoutentryidVarDelete",
              "ApiGatewayMethodWorkoutplansGet",
              "ApiGatewayMethodWorkoutplansPost",
              "ApiGatewayMethodWorkoutplansWorkoutplanidVarPut",
              "ApiGatewayMethodWorkoutplansWorkoutplanidVarDelete"
            ]
          },
          "InitiateIntegrationLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "InitiateIntegrationLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "CheckIntegrationLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CheckIntegrationLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "CreateEntryLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreateEntryLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "LoginAppleLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "LoginAppleLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "LoginGoogleLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "LoginGoogleLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "LoginOTPLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "LoginOTPLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "RequestOTPLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "RequestOTPLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "UserExistsLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UserExistsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "RefreshTokenLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "RefreshTokenLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "HealthInfoLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "HealthInfoLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "FoodEntriesLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "FoodEntriesLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "FoodItemsLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "FoodItemsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "HabitsLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "HabitsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "HabitStatusesLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "HabitStatusesLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "SleepReportsLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "SleepReportsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "WellnessReportsLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "WellnessReportsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "TasksLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "TasksLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "ToDosLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ToDosLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "ExerciseEntriesLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ExerciseEntriesLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "ExercisesLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ExercisesLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "WorkoutEntriesLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "WorkoutEntriesLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "WorkoutPlansLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "WorkoutPlansLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "IntegrateEventSourceMappingSQSIntegrationQueue": {
            "Type": "AWS::Lambda::EventSourceMapping",
            "DependsOn": [
              "integrateRole"
            ],
            "Properties": {
              "BatchSize": 10,
              "EventSourceArn": {
                "Fn::GetAtt": [
                  "integrationQueue",
                  "Arn"
                ]
              },
              "FunctionName": {
                "Fn::GetAtt": [
                  "IntegrateLambdaFunction",
                  "Arn"
                ]
              },
              "Enabled": true
            }
          },
          "SendOTPEmailEventSourceMappingSQSSendOTPEmailQueue": {
            "Type": "AWS::Lambda::EventSourceMapping",
            "DependsOn": [
              "sendOTPEmailRole"
            ],
            "Properties": {
              "BatchSize": 10,
              "EventSourceArn": {
                "Fn::GetAtt": [
                  "sendOTPEmailQueue",
                  "Arn"
                ]
              },
              "FunctionName": {
                "Fn::GetAtt": [
                  "SendOTPEmailLambdaFunction",
                  "Arn"
                ]
              },
              "Enabled": true
            }
          },
          "ProcessFailedOTPEmailEventSourceMappingSQSFailedOtpQueue": {
            "Type": "AWS::Lambda::EventSourceMapping",
            "DependsOn": [
              "processFailedOTPEmailRole"
            ],
            "Properties": {
              "BatchSize": 10,
              "EventSourceArn": {
                "Fn::GetAtt": [
                  "failedOtpQueue",
                  "Arn"
                ]
              },
              "FunctionName": {
                "Fn::GetAtt": [
                  "ProcessFailedOTPEmailLambdaFunction",
                  "Arn"
                ]
              },
              "Enabled": true
            }
          },
          "trackerTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "dev-all-tracker-table",
              "AttributeDefinitions": [
                {
                  "AttributeName": "PK",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "SK",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "PK",
                  "KeyType": "HASH"
                },
                {
                  "AttributeName": "SK",
                  "KeyType": "RANGE"
                }
              ],
              "ProvisionedThroughput": {
                "ReadCapacityUnits": 1,
                "WriteCapacityUnits": 1
              }
            }
          },
          "LambdaExecutionRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": "DynamoDBAccess",
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "dynamodb:*"
                        ],
                        "Resource": {
                          "Fn::GetAtt": [
                            "trackerTable",
                            "Arn"
                          ]
                        }
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogGroup",
                          "logs:CreateLogStream",
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Join": [
                              ":",
                              [
                                "arn:aws:logs",
                                {
                                  "Ref": "AWS::Region"
                                },
                                {
                                  "Ref": "AWS::AccountId"
                                },
                                "log-group:/aws/lambda/*:*:*"
                              ]
                            ]
                          }
                        ]
                      }
                    ]
                  }
                }
              ]
            }
          },
          "sendOTPEmailQueue": {
            "Type": "AWS::SQS::Queue",
            "Properties": {
              "QueueName": "sendOTPEmailQueue-dev",
              "RedrivePolicy": {
                "deadLetterTargetArn": {
                  "Fn::GetAtt": [
                    "OTPEmailDLQ",
                    "Arn"
                  ]
                },
                "maxReceiveCount": 5
              }
            }
          },
          "OTPEmailDLQ": {
            "Type": "AWS::SQS::Queue",
            "Properties": {
              "QueueName": "OTPEmailDLQ-dev"
            }
          },
          "integrationQueue": {
            "Type": "AWS::SQS::Queue",
            "Properties": {
              "QueueName": "integrationQueue-dev",
              "VisibilityTimeout": 150,
              "RedrivePolicy": {
                "deadLetterTargetArn": {
                  "Fn::GetAtt": [
                    "integrationDLQ",
                    "Arn"
                  ]
                },
                "maxReceiveCount": 5
              }
            }
          },
          "integrationDLQ": {
            "Type": "AWS::SQS::Queue",
            "Properties": {
              "QueueName": "integrationDLQ-dev"
            }
          },
          "failedOtpQueue": {
            "Type": "AWS::SQS::Queue",
            "Properties": {
              "QueueName": "failedOtpQueue-dev",
              "RedrivePolicy": {
                "deadLetterTargetArn": {
                  "Fn::GetAtt": [
                    "failedOtpDLQ",
                    "Arn"
                  ]
                },
                "maxReceiveCount": 5
              }
            }
          },
          "failedOtpDLQ": {
            "Type": "AWS::SQS::Queue",
            "Properties": {
              "QueueName": "failedOtpDLQ-dev"
            }
          },
          "bouncesAndComplaintsTopicOTP": {
            "Type": "AWS::SNS::Topic",
            "Properties": {
              "TopicName": "bouncesAndComplaintsTopicOTP-dev",
              "Subscription": [
                {
                  "Protocol": "sqs",
                  "Endpoint": {
                    "Fn::GetAtt": [
                      "failedOtpQueue",
                      "Arn"
                    ]
                  }
                }
              ]
            }
          },
          "sendOTPEmailRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "RoleName": "sendOTPEmailRole-dev",
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": "Policy-sendOTPEmailRole-dev",
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "sqs:*"
                        ],
                        "Resource": {
                          "Fn::GetAtt": [
                            "sendOTPEmailQueue",
                            "Arn"
                          ]
                        }
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "ses:SendTemplatedEmail"
                        ],
                        "Resource": "arn:aws:ses:ca-central-1:815127904764:*"
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "dynamodb:Query"
                        ],
                        "Resource": {
                          "Fn::GetAtt": [
                            "trackerTable",
                            "Arn"
                          ]
                        }
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogGroup",
                          "logs:CreateLogStream",
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Join": [
                              ":",
                              [
                                "arn:aws:logs",
                                {
                                  "Ref": "AWS::Region"
                                },
                                {
                                  "Ref": "AWS::AccountId"
                                },
                                "log-group:/aws/lambda/*:*:*"
                              ]
                            ]
                          }
                        ]
                      }
                    ]
                  }
                }
              ]
            }
          },
          "processFailedOTPEmailRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "RoleName": "processFailedOTPEmailRole-dev",
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": "Policy-processFailedOTPEmailRole-dev",
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "sqs:*"
                        ],
                        "Resource": {
                          "Fn::GetAtt": [
                            "failedOtpQueue",
                            "Arn"
                          ]
                        }
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "dynamodb:PutItem"
                        ],
                        "Resource": {
                          "Fn::GetAtt": [
                            "trackerTable",
                            "Arn"
                          ]
                        }
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogGroup",
                          "logs:CreateLogStream",
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Join": [
                              ":",
                              [
                                "arn:aws:logs",
                                {
                                  "Ref": "AWS::Region"
                                },
                                {
                                  "Ref": "AWS::AccountId"
                                },
                                "log-group:/aws/lambda/*:*:*"
                              ]
                            ]
                          }
                        ]
                      }
                    ]
                  }
                }
              ]
            }
          },
          "requestOTPRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "RoleName": "requestOTPRole-dev",
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": "Policy-requestOTPRole-dev",
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "sqs:SendMessage"
                        ],
                        "Resource": {
                          "Fn::GetAtt": [
                            "sendOTPEmailQueue",
                            "Arn"
                          ]
                        }
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "dynamodb:PutItem"
                        ],
                        "Resource": {
                          "Fn::GetAtt": [
                            "trackerTable",
                            "Arn"
                          ]
                        }
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogGroup",
                          "logs:CreateLogStream",
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Join": [
                              ":",
                              [
                                "arn:aws:logs",
                                {
                                  "Ref": "AWS::Region"
                                },
                                {
                                  "Ref": "AWS::AccountId"
                                },
                                "log-group:/aws/lambda/*:*:*"
                              ]
                            ]
                          }
                        ]
                      }
                    ]
                  }
                }
              ]
            }
          },
          "sqsFailedOTPEmailPolicy": {
            "Type": "AWS::SQS::QueuePolicy",
            "Properties": {
              "Queues": [
                {
                  "Ref": "failedOtpQueue"
                }
              ],
              "PolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Action": "sqs:SendMessage",
                    "Resource": {
                      "Fn::GetAtt": [
                        "failedOtpQueue",
                        "Arn"
                      ]
                    },
                    "Effect": "Allow",
                    "Condition": {
                      "ArnEquals": {
                        "aws:SourceArn": {
                          "Ref": "bouncesAndComplaintsTopicOTP"
                        }
                      }
                    },
                    "Principal": {
                      "Service": "sns.amazonaws.com"
                    }
                  }
                ]
              }
            }
          },
          "initiateIntegrationRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "RoleName": "initiateIntegrationRole-dev",
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": "Policy-initiateIntegrationRole-dev",
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "sqs:*"
                        ],
                        "Resource": {
                          "Fn::GetAtt": [
                            "integrationQueue",
                            "Arn"
                          ]
                        }
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "dynamodb:*"
                        ],
                        "Resource": {
                          "Fn::GetAtt": [
                            "trackerTable",
                            "Arn"
                          ]
                        }
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogGroup",
                          "logs:CreateLogStream",
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Join": [
                              ":",
                              [
                                "arn:aws:logs",
                                {
                                  "Ref": "AWS::Region"
                                },
                                {
                                  "Ref": "AWS::AccountId"
                                },
                                "log-group:/aws/lambda/*:*:*"
                              ]
                            ]
                          }
                        ]
                      }
                    ]
                  }
                }
              ]
            }
          },
          "integrateRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "RoleName": "integrateRole-dev",
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": "Policy-integrateRole-dev",
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "sqs:*"
                        ],
                        "Resource": {
                          "Fn::GetAtt": [
                            "integrationQueue",
                            "Arn"
                          ]
                        }
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "dynamodb:*"
                        ],
                        "Resource": {
                          "Fn::GetAtt": [
                            "trackerTable",
                            "Arn"
                          ]
                        }
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogGroup",
                          "logs:CreateLogStream",
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Join": [
                              ":",
                              [
                                "arn:aws:logs",
                                {
                                  "Ref": "AWS::Region"
                                },
                                {
                                  "Ref": "AWS::AccountId"
                                },
                                "log-group:/aws/lambda/*:*:*"
                              ]
                            ]
                          }
                        ]
                      }
                    ]
                  }
                }
              ]
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            },
            "Export": {
              "Name": "sls-all-tracker-dev-ServerlessDeploymentBucketName"
            }
          },
          "InitiateIntegrationLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "InitiateIntegrationLambdaVersionnCwKjBT28xO1fIq81P85TvRy4XW8YXtoCmMlkA"
            },
            "Export": {
              "Name": "sls-all-tracker-dev-InitiateIntegrationLambdaFunctionQualifiedArn"
            }
          },
          "IntegrateLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "IntegrateLambdaVersionOxYH4qSjuYLIgLHbOmr4k2WP0JgHOi9Upb7CKTQEPE"
            },
            "Export": {
              "Name": "sls-all-tracker-dev-IntegrateLambdaFunctionQualifiedArn"
            }
          },
          "CheckIntegrationLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CheckIntegrationLambdaVersion6EPTxXzSRn4OUwZ32ERwvVV69gUfTziqWRBsJfe3dM"
            },
            "Export": {
              "Name": "sls-all-tracker-dev-CheckIntegrationLambdaFunctionQualifiedArn"
            }
          },
          "CreateEntryLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreateEntryLambdaVersionC81HvXgF9xTCKbALTI5oKpt81N1TZTcFfdb7B6ngHoI"
            },
            "Export": {
              "Name": "sls-all-tracker-dev-CreateEntryLambdaFunctionQualifiedArn"
            }
          },
          "LoginAppleLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "LoginAppleLambdaVersionMtjUsGqM5Bn9wRbTUQqjfDlkMm2j48tNk8gyaxwEr6U"
            },
            "Export": {
              "Name": "sls-all-tracker-dev-LoginAppleLambdaFunctionQualifiedArn"
            }
          },
          "LoginGoogleLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "LoginGoogleLambdaVersion0BSggAtKx3yd5s8sWQKB9IjxE6pkZcG20xzNKOnw"
            },
            "Export": {
              "Name": "sls-all-tracker-dev-LoginGoogleLambdaFunctionQualifiedArn"
            }
          },
          "LoginOTPLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "LoginOTPLambdaVersion9WTHGeYTZTefQPXYI2ysAcrkSzRCBXySqUUpyLdCwiA"
            },
            "Export": {
              "Name": "sls-all-tracker-dev-LoginOTPLambdaFunctionQualifiedArn"
            }
          },
          "RequestOTPLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "RequestOTPLambdaVersionDMnzYZa0Yxivou5qaTgX2nkdwKiEmsegKZu1tSwVaVc"
            },
            "Export": {
              "Name": "sls-all-tracker-dev-RequestOTPLambdaFunctionQualifiedArn"
            }
          },
          "UserExistsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UserExistsLambdaVersionJqzNqQ8FtVHcjuPzDTU1WqXbuOSktMNUOH8vPRgtLE"
            },
            "Export": {
              "Name": "sls-all-tracker-dev-UserExistsLambdaFunctionQualifiedArn"
            }
          },
          "RefreshTokenLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "RefreshTokenLambdaVersionEKLziZj4SuUhZZ18tBZe96uOgEjKcs1DYCFQOsgeA"
            },
            "Export": {
              "Name": "sls-all-tracker-dev-RefreshTokenLambdaFunctionQualifiedArn"
            }
          },
          "SendOTPEmailLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "SendOTPEmailLambdaVersiondE2PQmlY4QU97jz7QRBhCCPxV92KCudlmvRYqrcBd8U"
            },
            "Export": {
              "Name": "sls-all-tracker-dev-SendOTPEmailLambdaFunctionQualifiedArn"
            }
          },
          "ProcessFailedOTPEmailLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ProcessFailedOTPEmailLambdaVersionkbWf3zUkKdZQ2Ixb1IdlyieJQ6lZi99OxHGa6JZFDg"
            },
            "Export": {
              "Name": "sls-all-tracker-dev-ProcessFailedOTPEmailLambdaFunctionQualifiedArn"
            }
          },
          "HealthInfoLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "HealthInfoLambdaVersionE20q79YLwJzjVbC5YLSHGo8YA6sSkLB4D0plDSjtfE"
            },
            "Export": {
              "Name": "sls-all-tracker-dev-HealthInfoLambdaFunctionQualifiedArn"
            }
          },
          "FoodEntriesLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "FoodEntriesLambdaVersionRFlH1AWruTjtxZrFzGeJEWd8ix6itjz0Gsx0b52Y"
            },
            "Export": {
              "Name": "sls-all-tracker-dev-FoodEntriesLambdaFunctionQualifiedArn"
            }
          },
          "FoodItemsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "FoodItemsLambdaVersion0yDm4KtCNSXiOr4B2ig2Vd0nWVWYgUDRpWSwWY2NBY"
            },
            "Export": {
              "Name": "sls-all-tracker-dev-FoodItemsLambdaFunctionQualifiedArn"
            }
          },
          "HabitsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "HabitsLambdaVersionGK6svvKPSECSLUvyXUWD6GKEcMcfMN0yiKIonABQjo"
            },
            "Export": {
              "Name": "sls-all-tracker-dev-HabitsLambdaFunctionQualifiedArn"
            }
          },
          "HabitStatusesLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "HabitStatusesLambdaVersionOIz1BViX4MDJK93wDjxuENpzmmi2G3iwFrfokba0Wl0"
            },
            "Export": {
              "Name": "sls-all-tracker-dev-HabitStatusesLambdaFunctionQualifiedArn"
            }
          },
          "SleepReportsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "SleepReportsLambdaVersiont86A1Pwir97Eaby8Kn0lQUgcWJlMeE72P6hzaSIHQ"
            },
            "Export": {
              "Name": "sls-all-tracker-dev-SleepReportsLambdaFunctionQualifiedArn"
            }
          },
          "WellnessReportsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "WellnessReportsLambdaVersionb03Nc8jL7gAXz2RNtDqiudzJOZjAAWn7l1QvoBCN0"
            },
            "Export": {
              "Name": "sls-all-tracker-dev-WellnessReportsLambdaFunctionQualifiedArn"
            }
          },
          "TasksLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "TasksLambdaVersion5dzl8NGyOtG1mP4uNzAJHrKUzng4WwNcZ6jIO7wGhwQ"
            },
            "Export": {
              "Name": "sls-all-tracker-dev-TasksLambdaFunctionQualifiedArn"
            }
          },
          "ToDosLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ToDosLambdaVersionPqcnEnYmSP7i00RErIS71M0fMxq9GSaJlzDMnTgXEcU"
            },
            "Export": {
              "Name": "sls-all-tracker-dev-ToDosLambdaFunctionQualifiedArn"
            }
          },
          "ExerciseEntriesLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ExerciseEntriesLambdaVersionm7YytbKwkIxzPOPsn5cTfj64sR8uXLVGrr3TnMao"
            },
            "Export": {
              "Name": "sls-all-tracker-dev-ExerciseEntriesLambdaFunctionQualifiedArn"
            }
          },
          "ExercisesLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ExercisesLambdaVersionbTe5ytNanv2svtUgvGCvWtsGYeVTCmCNF57BiB6jcU"
            },
            "Export": {
              "Name": "sls-all-tracker-dev-ExercisesLambdaFunctionQualifiedArn"
            }
          },
          "WorkoutEntriesLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "WorkoutEntriesLambdaVersionxcaNoXnBeXf2DxveU9h4MqHXQ1DiqOsteecEsOZupU"
            },
            "Export": {
              "Name": "sls-all-tracker-dev-WorkoutEntriesLambdaFunctionQualifiedArn"
            }
          },
          "WorkoutPlansLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "WorkoutPlansLambdaVersionYmOL8f8EiIDs4aJuZBb3yFh5giHdsnD1SzwsgZM1cWM"
            },
            "Export": {
              "Name": "sls-all-tracker-dev-WorkoutPlansLambdaFunctionQualifiedArn"
            }
          },
          "ServiceEndpoint": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/dev"
                ]
              ]
            },
            "Export": {
              "Name": "sls-all-tracker-dev-ServiceEndpoint"
            }
          }
        }
      },
      "coreCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          }
        }
      },
      "vpc": {}
    },
    "pluginsData": {},
    "functions": {
      "initiateIntegration": {
        "handler": "notion/initiateIntegration/index.handler",
        "role": {
          "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"InitiateIntegrationLambdaFunction\"][\"Properties\"][\"Role\"]"
        },
        "events": [
          {
            "http": {
              "path": "notion/initiateIntegration",
              "method": "post",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "all-tracker-dev-initiateIntegration",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "InitiateIntegrationLambdaVersionnCwKjBT28xO1fIq81P85TvRy4XW8YXtoCmMlkA"
      },
      "integrate": {
        "handler": "notion/integrate/index.handler",
        "timeout": 150,
        "role": {
          "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"IntegrateLambdaFunction\"][\"Properties\"][\"Role\"]"
        },
        "events": [
          {
            "sqs": {
              "arn": {
                "Fn::GetAtt": [
                  "integrationQueue",
                  "Arn"
                ]
              }
            }
          }
        ],
        "name": "all-tracker-dev-integrate",
        "package": {},
        "memory": 1024,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "IntegrateLambdaVersionOxYH4qSjuYLIgLHbOmr4k2WP0JgHOi9Upb7CKTQEPE"
      },
      "checkIntegration": {
        "handler": "notion/checkIntegration/index.handler",
        "role": {
          "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"CheckIntegrationLambdaFunction\"][\"Properties\"][\"Role\"]"
        },
        "events": [
          {
            "http": {
              "path": "notion/checkIntegration",
              "method": "post",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "all-tracker-dev-checkIntegration",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "CheckIntegrationLambdaVersion6EPTxXzSRn4OUwZ32ERwvVV69gUfTziqWRBsJfe3dM"
      },
      "createEntry": {
        "handler": "notion/createEntry/index.handler",
        "role": {
          "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"CreateEntryLambdaFunction\"][\"Properties\"][\"Role\"]"
        },
        "events": [
          {
            "http": {
              "path": "notion/createEntry",
              "method": "post",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "all-tracker-dev-createEntry",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "CreateEntryLambdaVersionC81HvXgF9xTCKbALTI5oKpt81N1TZTcFfdb7B6ngHoI"
      },
      "loginApple": {
        "handler": "authentication/loginApple/index.handler",
        "role": {
          "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"LoginAppleLambdaFunction\"][\"Properties\"][\"Role\"]"
        },
        "events": [
          {
            "http": {
              "path": "authentication/loginApple",
              "method": "post",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "all-tracker-dev-loginApple",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "LoginAppleLambdaVersionMtjUsGqM5Bn9wRbTUQqjfDlkMm2j48tNk8gyaxwEr6U"
      },
      "loginGoogle": {
        "handler": "authentication/loginGoogle/index.handler",
        "role": {
          "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"LoginGoogleLambdaFunction\"][\"Properties\"][\"Role\"]"
        },
        "events": [
          {
            "http": {
              "path": "authentication/loginGoogle",
              "method": "post",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "all-tracker-dev-loginGoogle",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "LoginGoogleLambdaVersion0BSggAtKx3yd5s8sWQKB9IjxE6pkZcG20xzNKOnw"
      },
      "loginOTP": {
        "handler": "authentication/loginOTP/index.handler",
        "role": {
          "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"LoginOTPLambdaFunction\"][\"Properties\"][\"Role\"]"
        },
        "events": [
          {
            "http": {
              "path": "authentication/loginOTP",
              "method": "post",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "all-tracker-dev-loginOTP",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "LoginOTPLambdaVersion9WTHGeYTZTefQPXYI2ysAcrkSzRCBXySqUUpyLdCwiA"
      },
      "requestOTP": {
        "handler": "authentication/requestOTP/index.handler",
        "role": {
          "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"RequestOTPLambdaFunction\"][\"Properties\"][\"Role\"]"
        },
        "events": [
          {
            "http": {
              "path": "authentication/requestOTP",
              "method": "post",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "all-tracker-dev-requestOTP",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "RequestOTPLambdaVersionDMnzYZa0Yxivou5qaTgX2nkdwKiEmsegKZu1tSwVaVc"
      },
      "userExists": {
        "handler": "authentication/userExists/index.handler",
        "role": {
          "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"UserExistsLambdaFunction\"][\"Properties\"][\"Role\"]"
        },
        "events": [
          {
            "http": {
              "path": "authentication/userExists",
              "method": "post",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "all-tracker-dev-userExists",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "UserExistsLambdaVersionJqzNqQ8FtVHcjuPzDTU1WqXbuOSktMNUOH8vPRgtLE"
      },
      "refreshToken": {
        "handler": "authentication/refreshToken/index.handler",
        "role": {
          "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"RefreshTokenLambdaFunction\"][\"Properties\"][\"Role\"]"
        },
        "events": [
          {
            "http": {
              "path": "authentication/refreshToken",
              "method": "post",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "all-tracker-dev-refreshToken",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "RefreshTokenLambdaVersionEKLziZj4SuUhZZ18tBZe96uOgEjKcs1DYCFQOsgeA"
      },
      "sendOTPEmail": {
        "handler": "authentication/sendOTPEmail/index.handler",
        "role": {
          "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"SendOTPEmailLambdaFunction\"][\"Properties\"][\"Role\"]"
        },
        "events": [
          {
            "sqs": {
              "arn": {
                "Fn::GetAtt": [
                  "sendOTPEmailQueue",
                  "Arn"
                ]
              }
            }
          }
        ],
        "name": "all-tracker-dev-sendOTPEmail",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "SendOTPEmailLambdaVersiondE2PQmlY4QU97jz7QRBhCCPxV92KCudlmvRYqrcBd8U"
      },
      "processFailedOTPEmail": {
        "handler": "authentication/processFailedEmail/index.handler",
        "role": {
          "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ProcessFailedOTPEmailLambdaFunction\"][\"Properties\"][\"Role\"]"
        },
        "events": [
          {
            "sqs": {
              "arn": {
                "Fn::GetAtt": [
                  "failedOtpQueue",
                  "Arn"
                ]
              }
            }
          }
        ],
        "name": "all-tracker-dev-processFailedOTPEmail",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "ProcessFailedOTPEmailLambdaVersionkbWf3zUkKdZQ2Ixb1IdlyieJQ6lZi99OxHGa6JZFDg"
      },
      "healthInfo": {
        "handler": "userInfo/healthInfo/index.handler",
        "role": {
          "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"HealthInfoLambdaFunction\"][\"Properties\"][\"Role\"]"
        },
        "events": [
          {
            "http": {
              "path": "healthInfo",
              "method": "get",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          },
          {
            "http": {
              "path": "healthInfo",
              "method": "put",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "PUT"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "all-tracker-dev-healthInfo",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "HealthInfoLambdaVersionE20q79YLwJzjVbC5YLSHGo8YA6sSkLB4D0plDSjtfE"
      },
      "foodEntries": {
        "handler": "tracker-diet/foodEntries/index.handler",
        "role": {
          "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"FoodEntriesLambdaFunction\"][\"Properties\"][\"Role\"]"
        },
        "events": [
          {
            "http": {
              "path": "foodEntries",
              "method": "get",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          },
          {
            "http": {
              "path": "foodEntries",
              "method": "post",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          },
          {
            "http": {
              "path": "foodEntries/{foodEntryID}",
              "method": "put",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "PUT"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          },
          {
            "http": {
              "path": "foodEntries/{foodEntryID}",
              "method": "delete",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "DELETE"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "all-tracker-dev-foodEntries",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "FoodEntriesLambdaVersionRFlH1AWruTjtxZrFzGeJEWd8ix6itjz0Gsx0b52Y"
      },
      "foodItems": {
        "handler": "tracker-diet/foodItems/index.handler",
        "role": {
          "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"FoodItemsLambdaFunction\"][\"Properties\"][\"Role\"]"
        },
        "events": [
          {
            "http": {
              "path": "foodItems",
              "method": "get",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          },
          {
            "http": {
              "path": "foodItems/{foodItemID}",
              "method": "get",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          },
          {
            "http": {
              "path": "foodItems",
              "method": "post",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          },
          {
            "http": {
              "path": "foodItems/{foodItemID}",
              "method": "put",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "PUT"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          },
          {
            "http": {
              "path": "foodItems/{foodItemID}",
              "method": "delete",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "DELETE"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "all-tracker-dev-foodItems",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "FoodItemsLambdaVersion0yDm4KtCNSXiOr4B2ig2Vd0nWVWYgUDRpWSwWY2NBY"
      },
      "habits": {
        "handler": "tracker-habit/habits/index.handler",
        "role": {
          "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"HabitsLambdaFunction\"][\"Properties\"][\"Role\"]"
        },
        "events": [
          {
            "http": {
              "path": "habits",
              "method": "get",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          },
          {
            "http": {
              "path": "habits",
              "method": "post",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          },
          {
            "http": {
              "path": "habits/{habitID}",
              "method": "put",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "PUT"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          },
          {
            "http": {
              "path": "habits/{habitID}",
              "method": "delete",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "DELETE"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "all-tracker-dev-habits",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "HabitsLambdaVersionGK6svvKPSECSLUvyXUWD6GKEcMcfMN0yiKIonABQjo"
      },
      "habitStatuses": {
        "handler": "tracker-habit/habitStatuses/index.handler",
        "role": {
          "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"HabitStatusesLambdaFunction\"][\"Properties\"][\"Role\"]"
        },
        "events": [
          {
            "http": {
              "path": "habitStatuses",
              "method": "get",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          },
          {
            "http": {
              "path": "habitStatuses",
              "method": "post",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          },
          {
            "http": {
              "path": "habitStatuses/{habitStatusID}",
              "method": "put",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "PUT"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          },
          {
            "http": {
              "path": "habitStatuses/{habitStatusID}",
              "method": "delete",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "DELETE"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "all-tracker-dev-habitStatuses",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "HabitStatusesLambdaVersionOIz1BViX4MDJK93wDjxuENpzmmi2G3iwFrfokba0Wl0"
      },
      "sleepReports": {
        "handler": "tracker-wellness/sleepReports/index.handler",
        "role": {
          "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"SleepReportsLambdaFunction\"][\"Properties\"][\"Role\"]"
        },
        "events": [
          {
            "http": {
              "path": "sleepReports",
              "method": "get",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          },
          {
            "http": {
              "path": "sleepReports",
              "method": "post",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          },
          {
            "http": {
              "path": "sleepReports/{sleepReportID}",
              "method": "put",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "PUT"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          },
          {
            "http": {
              "path": "sleepReports/{sleepReportID}",
              "method": "delete",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "DELETE"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "all-tracker-dev-sleepReports",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "SleepReportsLambdaVersiont86A1Pwir97Eaby8Kn0lQUgcWJlMeE72P6hzaSIHQ"
      },
      "wellnessReports": {
        "handler": "tracker-wellness/wellnessReports/index.handler",
        "role": {
          "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"WellnessReportsLambdaFunction\"][\"Properties\"][\"Role\"]"
        },
        "events": [
          {
            "http": {
              "path": "wellnessReports",
              "method": "get",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          },
          {
            "http": {
              "path": "wellnessReports",
              "method": "post",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          },
          {
            "http": {
              "path": "wellnessReports/{wellnessReportID}",
              "method": "put",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "PUT"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          },
          {
            "http": {
              "path": "wellnessReports/{wellnessReportID}",
              "method": "delete",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "DELETE"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "all-tracker-dev-wellnessReports",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "WellnessReportsLambdaVersionb03Nc8jL7gAXz2RNtDqiudzJOZjAAWn7l1QvoBCN0"
      },
      "tasks": {
        "handler": "tracker-task/tasks/index.handler",
        "role": {
          "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"TasksLambdaFunction\"][\"Properties\"][\"Role\"]"
        },
        "events": [
          {
            "http": {
              "path": "tasks",
              "method": "get",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          },
          {
            "http": {
              "path": "tasks",
              "method": "post",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          },
          {
            "http": {
              "path": "tasks/{taskID}",
              "method": "put",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "PUT"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          },
          {
            "http": {
              "path": "tasks/{taskID}",
              "method": "delete",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "DELETE"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "all-tracker-dev-tasks",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "TasksLambdaVersion5dzl8NGyOtG1mP4uNzAJHrKUzng4WwNcZ6jIO7wGhwQ"
      },
      "toDos": {
        "handler": "tracker-task/toDos/index.handler",
        "role": {
          "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ToDosLambdaFunction\"][\"Properties\"][\"Role\"]"
        },
        "events": [
          {
            "http": {
              "path": "toDos",
              "method": "get",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          },
          {
            "http": {
              "path": "toDos",
              "method": "post",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          },
          {
            "http": {
              "path": "toDos/{toDoID}",
              "method": "put",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "PUT"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          },
          {
            "http": {
              "path": "toDos/{toDoID}",
              "method": "delete",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "DELETE"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "all-tracker-dev-toDos",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "ToDosLambdaVersionPqcnEnYmSP7i00RErIS71M0fMxq9GSaJlzDMnTgXEcU"
      },
      "exerciseEntries": {
        "handler": "tracker-fitness/exerciseEntries/index.handler",
        "role": {
          "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ExerciseEntriesLambdaFunction\"][\"Properties\"][\"Role\"]"
        },
        "events": [
          {
            "http": {
              "path": "exerciseEntries",
              "method": "get",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          },
          {
            "http": {
              "path": "exerciseEntries",
              "method": "post",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          },
          {
            "http": {
              "path": "exerciseEntries/{exerciseEntryID}",
              "method": "put",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "PUT"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          },
          {
            "http": {
              "path": "exerciseEntries/{exerciseEntryID}",
              "method": "delete",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "DELETE"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "all-tracker-dev-exerciseEntries",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "ExerciseEntriesLambdaVersionm7YytbKwkIxzPOPsn5cTfj64sR8uXLVGrr3TnMao"
      },
      "exercises": {
        "handler": "tracker-fitness/exercises/index.handler",
        "role": {
          "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ExercisesLambdaFunction\"][\"Properties\"][\"Role\"]"
        },
        "events": [
          {
            "http": {
              "path": "exercises",
              "method": "get",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          },
          {
            "http": {
              "path": "exercises",
              "method": "post",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          },
          {
            "http": {
              "path": "exercises/{exerciseID}",
              "method": "put",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "PUT"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          },
          {
            "http": {
              "path": "exercises/{exerciseID}",
              "method": "delete",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "DELETE"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "all-tracker-dev-exercises",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "ExercisesLambdaVersionbTe5ytNanv2svtUgvGCvWtsGYeVTCmCNF57BiB6jcU"
      },
      "workoutEntries": {
        "handler": "tracker-fitness/workoutEntries/index.handler",
        "role": {
          "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"WorkoutEntriesLambdaFunction\"][\"Properties\"][\"Role\"]"
        },
        "events": [
          {
            "http": {
              "path": "workoutEntries",
              "method": "get",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          },
          {
            "http": {
              "path": "workoutEntries",
              "method": "post",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          },
          {
            "http": {
              "path": "workoutEntries/{workoutEntryID}",
              "method": "put",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "PUT"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          },
          {
            "http": {
              "path": "workoutEntries/{workoutEntryID}",
              "method": "delete",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "DELETE"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "all-tracker-dev-workoutEntries",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "WorkoutEntriesLambdaVersionxcaNoXnBeXf2DxveU9h4MqHXQ1DiqOsteecEsOZupU"
      },
      "workoutPlans": {
        "handler": "tracker-fitness/workoutPlans/index.handler",
        "role": {
          "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"WorkoutPlansLambdaFunction\"][\"Properties\"][\"Role\"]"
        },
        "events": [
          {
            "http": {
              "path": "workoutPlans",
              "method": "get",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          },
          {
            "http": {
              "path": "workoutPlans",
              "method": "post",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          },
          {
            "http": {
              "path": "workoutPlans/{workoutPlanID}",
              "method": "put",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "PUT"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          },
          {
            "http": {
              "path": "workoutPlans/{workoutPlanID}",
              "method": "delete",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "DELETE"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "all-tracker-dev-workoutPlans",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "WorkoutPlansLambdaVersionYmOL8f8EiIDs4aJuZBb3yFh5giHdsnD1SzwsgZM1cWM"
      }
    },
    "resources": {
      "Resources": {
        "trackerTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "dev-all-tracker-table",
            "AttributeDefinitions": [
              {
                "AttributeName": "PK",
                "AttributeType": "S"
              },
              {
                "AttributeName": "SK",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "PK",
                "KeyType": "HASH"
              },
              {
                "AttributeName": "SK",
                "KeyType": "RANGE"
              }
            ],
            "ProvisionedThroughput": {
              "ReadCapacityUnits": 1,
              "WriteCapacityUnits": 1
            }
          }
        },
        "LambdaExecutionRole": {
          "Type": "AWS::IAM::Role",
          "Properties": {
            "AssumeRolePolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": {
                    "Service": [
                      "lambda.amazonaws.com"
                    ]
                  },
                  "Action": [
                    "sts:AssumeRole"
                  ]
                }
              ]
            },
            "Policies": [
              {
                "PolicyName": "DynamoDBAccess",
                "PolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Action": [
                        "dynamodb:*"
                      ],
                      "Resource": {
                        "Fn::GetAtt": [
                          "trackerTable",
                          "Arn"
                        ]
                      }
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "logs:CreateLogGroup",
                        "logs:CreateLogStream",
                        "logs:PutLogEvents"
                      ],
                      "Resource": [
                        {
                          "Fn::Join": [
                            ":",
                            [
                              "arn:aws:logs",
                              {
                                "Ref": "AWS::Region"
                              },
                              {
                                "Ref": "AWS::AccountId"
                              },
                              "log-group:/aws/lambda/*:*:*"
                            ]
                          ]
                        }
                      ]
                    }
                  ]
                }
              }
            ]
          }
        },
        "sendOTPEmailQueue": {
          "Type": "AWS::SQS::Queue",
          "Properties": {
            "QueueName": "sendOTPEmailQueue-dev",
            "RedrivePolicy": {
              "deadLetterTargetArn": {
                "Fn::GetAtt": [
                  "OTPEmailDLQ",
                  "Arn"
                ]
              },
              "maxReceiveCount": 5
            }
          }
        },
        "OTPEmailDLQ": {
          "Type": "AWS::SQS::Queue",
          "Properties": {
            "QueueName": "OTPEmailDLQ-dev"
          }
        },
        "integrationQueue": {
          "Type": "AWS::SQS::Queue",
          "Properties": {
            "QueueName": "integrationQueue-dev",
            "VisibilityTimeout": 150,
            "RedrivePolicy": {
              "deadLetterTargetArn": {
                "Fn::GetAtt": [
                  "integrationDLQ",
                  "Arn"
                ]
              },
              "maxReceiveCount": 5
            }
          }
        },
        "integrationDLQ": {
          "Type": "AWS::SQS::Queue",
          "Properties": {
            "QueueName": "integrationDLQ-dev"
          }
        },
        "failedOtpQueue": {
          "Type": "AWS::SQS::Queue",
          "Properties": {
            "QueueName": "failedOtpQueue-dev",
            "RedrivePolicy": {
              "deadLetterTargetArn": {
                "Fn::GetAtt": [
                  "failedOtpDLQ",
                  "Arn"
                ]
              },
              "maxReceiveCount": 5
            }
          }
        },
        "failedOtpDLQ": {
          "Type": "AWS::SQS::Queue",
          "Properties": {
            "QueueName": "failedOtpDLQ-dev"
          }
        },
        "bouncesAndComplaintsTopicOTP": {
          "Type": "AWS::SNS::Topic",
          "Properties": {
            "TopicName": "bouncesAndComplaintsTopicOTP-dev",
            "Subscription": [
              {
                "Protocol": "sqs",
                "Endpoint": {
                  "Fn::GetAtt": [
                    "failedOtpQueue",
                    "Arn"
                  ]
                }
              }
            ]
          }
        },
        "sendOTPEmailRole": {
          "Type": "AWS::IAM::Role",
          "Properties": {
            "RoleName": "sendOTPEmailRole-dev",
            "AssumeRolePolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": {
                    "Service": [
                      "lambda.amazonaws.com"
                    ]
                  },
                  "Action": [
                    "sts:AssumeRole"
                  ]
                }
              ]
            },
            "Policies": [
              {
                "PolicyName": "Policy-sendOTPEmailRole-dev",
                "PolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Action": [
                        "sqs:*"
                      ],
                      "Resource": {
                        "Fn::GetAtt": [
                          "sendOTPEmailQueue",
                          "Arn"
                        ]
                      }
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "ses:SendTemplatedEmail"
                      ],
                      "Resource": "arn:aws:ses:ca-central-1:815127904764:*"
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "dynamodb:Query"
                      ],
                      "Resource": {
                        "Fn::GetAtt": [
                          "trackerTable",
                          "Arn"
                        ]
                      }
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "logs:CreateLogGroup",
                        "logs:CreateLogStream",
                        "logs:PutLogEvents"
                      ],
                      "Resource": [
                        {
                          "Fn::Join": [
                            ":",
                            [
                              "arn:aws:logs",
                              {
                                "Ref": "AWS::Region"
                              },
                              {
                                "Ref": "AWS::AccountId"
                              },
                              "log-group:/aws/lambda/*:*:*"
                            ]
                          ]
                        }
                      ]
                    }
                  ]
                }
              }
            ]
          }
        },
        "processFailedOTPEmailRole": {
          "Type": "AWS::IAM::Role",
          "Properties": {
            "RoleName": "processFailedOTPEmailRole-dev",
            "AssumeRolePolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": {
                    "Service": [
                      "lambda.amazonaws.com"
                    ]
                  },
                  "Action": [
                    "sts:AssumeRole"
                  ]
                }
              ]
            },
            "Policies": [
              {
                "PolicyName": "Policy-processFailedOTPEmailRole-dev",
                "PolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Action": [
                        "sqs:*"
                      ],
                      "Resource": {
                        "Fn::GetAtt": [
                          "failedOtpQueue",
                          "Arn"
                        ]
                      }
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "dynamodb:PutItem"
                      ],
                      "Resource": {
                        "Fn::GetAtt": [
                          "trackerTable",
                          "Arn"
                        ]
                      }
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "logs:CreateLogGroup",
                        "logs:CreateLogStream",
                        "logs:PutLogEvents"
                      ],
                      "Resource": [
                        {
                          "Fn::Join": [
                            ":",
                            [
                              "arn:aws:logs",
                              {
                                "Ref": "AWS::Region"
                              },
                              {
                                "Ref": "AWS::AccountId"
                              },
                              "log-group:/aws/lambda/*:*:*"
                            ]
                          ]
                        }
                      ]
                    }
                  ]
                }
              }
            ]
          }
        },
        "requestOTPRole": {
          "Type": "AWS::IAM::Role",
          "Properties": {
            "RoleName": "requestOTPRole-dev",
            "AssumeRolePolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": {
                    "Service": [
                      "lambda.amazonaws.com"
                    ]
                  },
                  "Action": [
                    "sts:AssumeRole"
                  ]
                }
              ]
            },
            "Policies": [
              {
                "PolicyName": "Policy-requestOTPRole-dev",
                "PolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Action": [
                        "sqs:SendMessage"
                      ],
                      "Resource": {
                        "Fn::GetAtt": [
                          "sendOTPEmailQueue",
                          "Arn"
                        ]
                      }
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "dynamodb:PutItem"
                      ],
                      "Resource": {
                        "Fn::GetAtt": [
                          "trackerTable",
                          "Arn"
                        ]
                      }
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "logs:CreateLogGroup",
                        "logs:CreateLogStream",
                        "logs:PutLogEvents"
                      ],
                      "Resource": [
                        {
                          "Fn::Join": [
                            ":",
                            [
                              "arn:aws:logs",
                              {
                                "Ref": "AWS::Region"
                              },
                              {
                                "Ref": "AWS::AccountId"
                              },
                              "log-group:/aws/lambda/*:*:*"
                            ]
                          ]
                        }
                      ]
                    }
                  ]
                }
              }
            ]
          }
        },
        "sqsFailedOTPEmailPolicy": {
          "Type": "AWS::SQS::QueuePolicy",
          "Properties": {
            "Queues": [
              {
                "Ref": "failedOtpQueue"
              }
            ],
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Action": "sqs:SendMessage",
                  "Resource": {
                    "Fn::GetAtt": [
                      "failedOtpQueue",
                      "Arn"
                    ]
                  },
                  "Effect": "Allow",
                  "Condition": {
                    "ArnEquals": {
                      "aws:SourceArn": {
                        "Ref": "bouncesAndComplaintsTopicOTP"
                      }
                    }
                  },
                  "Principal": {
                    "Service": "sns.amazonaws.com"
                  }
                }
              ]
            }
          }
        },
        "initiateIntegrationRole": {
          "Type": "AWS::IAM::Role",
          "Properties": {
            "RoleName": "initiateIntegrationRole-dev",
            "AssumeRolePolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": {
                    "Service": [
                      "lambda.amazonaws.com"
                    ]
                  },
                  "Action": [
                    "sts:AssumeRole"
                  ]
                }
              ]
            },
            "Policies": [
              {
                "PolicyName": "Policy-initiateIntegrationRole-dev",
                "PolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Action": [
                        "sqs:*"
                      ],
                      "Resource": {
                        "Fn::GetAtt": [
                          "integrationQueue",
                          "Arn"
                        ]
                      }
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "dynamodb:*"
                      ],
                      "Resource": {
                        "Fn::GetAtt": [
                          "trackerTable",
                          "Arn"
                        ]
                      }
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "logs:CreateLogGroup",
                        "logs:CreateLogStream",
                        "logs:PutLogEvents"
                      ],
                      "Resource": [
                        {
                          "Fn::Join": [
                            ":",
                            [
                              "arn:aws:logs",
                              {
                                "Ref": "AWS::Region"
                              },
                              {
                                "Ref": "AWS::AccountId"
                              },
                              "log-group:/aws/lambda/*:*:*"
                            ]
                          ]
                        }
                      ]
                    }
                  ]
                }
              }
            ]
          }
        },
        "integrateRole": {
          "Type": "AWS::IAM::Role",
          "Properties": {
            "RoleName": "integrateRole-dev",
            "AssumeRolePolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": {
                    "Service": [
                      "lambda.amazonaws.com"
                    ]
                  },
                  "Action": [
                    "sts:AssumeRole"
                  ]
                }
              ]
            },
            "Policies": [
              {
                "PolicyName": "Policy-integrateRole-dev",
                "PolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Action": [
                        "sqs:*"
                      ],
                      "Resource": {
                        "Fn::GetAtt": [
                          "integrationQueue",
                          "Arn"
                        ]
                      }
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "dynamodb:*"
                      ],
                      "Resource": {
                        "Fn::GetAtt": [
                          "trackerTable",
                          "Arn"
                        ]
                      }
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "logs:CreateLogGroup",
                        "logs:CreateLogStream",
                        "logs:PutLogEvents"
                      ],
                      "Resource": [
                        {
                          "Fn::Join": [
                            ":",
                            [
                              "arn:aws:logs",
                              {
                                "Ref": "AWS::Region"
                              },
                              {
                                "Ref": "AWS::AccountId"
                              },
                              "log-group:/aws/lambda/*:*:*"
                            ]
                          ]
                        }
                      ]
                    }
                  ]
                }
              }
            ]
          }
        }
      },
      "Outputs": {}
    },
    "configValidationMode": "warn",
    "serviceFilename": "serverless.yml",
    "initialServerlessConfig": {
      "service": "all-tracker",
      "provider": {
        "$ref": "$[\"service\"][\"provider\"]"
      },
      "functions": {
        "$ref": "$[\"service\"][\"functions\"]"
      },
      "resources": {
        "$ref": "$[\"service\"][\"resources\"]"
      }
    },
    "layers": {},
    "isDashboardMonitoringPreconfigured": false,
    "artifact": "/Users/aidanandrew-hodgert/Documents/coding/all-tracker/backend/.serverless/all-tracker.zip"
  },
  "package": {
    "artifactDirectoryName": "serverless/all-tracker/dev/1682874024478-2023-04-30T17:00:24.478Z",
    "artifact": "all-tracker.zip"
  }
}