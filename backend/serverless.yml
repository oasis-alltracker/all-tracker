service: all-tracker

provider:
  name: aws
  runtime: nodejs18.x
  region: ca-central-1
  environment: 
    ALL_TRACKER_TABLE_NAME: ${opt:stage, 'dev'}-all-tracker-table
    ACCESS_TOKEN_SECRET: ${file(./config.yml):ACCESS_TOKEN_SECRET}
    NOTION_CLIENT_ID: ${file(./config.yml):NOTION_CLIENT_ID}
    NOTION_CLIENT_SECRET: ${file(./config.yml):NOTION_CLIENT_SECRET}
    SEND_OTP_URL: !Ref sendOTPEmailQueue
    INTEGRATE_URL: !Ref integrationQueue
    OTP_TEMPLATE_NAME: all-tracker-otp-template
    TEMP_PASSWAORD_TEMPLATE_NAME: all-tracker-tempPassword-template
    CONFIGURATION_SET_NAME: all-tracker-configurationSet


############## F U N C T I O N S ##############
functions:

##### N O T I O N #####
  initiateIntegration:
    handler: notion/initiateIntegration/index.handler
    role: 
      Fn::GetAtt:
        - initiateIntegrationRole
        - Arn
    events:
      - http:
          path: v1/notion/initiateIntegration
          method: post
          cors: true

  integrate:
    handler: notion/integrate/index.handler
    timeout: 150
    role: 
      Fn::GetAtt:
        - integrateRole
        - Arn
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - integrationQueue
              - Arn
    
  checkIntegration:
    handler: notion/checkIntegration/index.handler
    role: 
      Fn::GetAtt:
        - LambdaExecutionRole
        - Arn
    events:
      - http:
          path: v1/notion/checkIntegration
          method: post
          cors: true

  createEntry:
    handler: notion/createEntry/index.handler
    role: 
      Fn::GetAtt:
        - LambdaExecutionRole
        - Arn
    events:
      - http:
          path: v1/notion/createEntry
          method: post
          cors: true

##### A U T H #####
  loginApple:
    handler: authentication/loginApple/index.handler
    role: 
      Fn::GetAtt:
        - LambdaExecutionRole
        - Arn
    events:
      - http:
          path: v1/authentication/loginApple
          method: post
          cors: true
  loginGoogle:
    handler: authentication/loginGoogle/index.handler
    role: 
      Fn::GetAtt:
        - LambdaExecutionRole
        - Arn
    events:
      - http:
          path: v1/authentication/loginGoogle
          method: post
          cors: true
  loginOTP:
    handler: authentication/loginOTP/index.handler
    role:
      Fn::GetAtt:
        - LambdaExecutionRole
        - Arn
    events:
      - http:
          path: v1/authentication/loginOTP
          method: post
          cors: true
  verifyTempPassword:
    handler: authentication/verifyTempPassword/index.handler
    role:
      Fn::GetAtt:
        - LambdaExecutionRole
        - Arn
    events:
      - http:
          path: v1/authentication/verifyTempPassword
          method: post
          cors: true
  createNewPassword:
    handler: authentication/createNewPassword/index.handler
    role:
      Fn::GetAtt:
        - LambdaExecutionRole
        - Arn
    events:
      - http:
          path: v1/authentication/createNewPassword
          method: post
          cors: true
  requestOTP:
    handler: authentication/requestOTP/index.handler
    role: 
      Fn::GetAtt:
        - requestOTPRole
        - Arn
    events:
      - http:
          path: v1/authentication/requestOTP
          method: post
          cors: true
  requestNewPassword:
    handler: authentication/requestNewPassword/index.handler
    role: 
      Fn::GetAtt:
        - requestOTPRole
        - Arn
    events:
      - http:
          path: v1/authentication/requestNewPassword
          method: post
          cors: true
  userExists:
    handler: authentication/userExists/index.handler
    role: 
      Fn::GetAtt:
        - LambdaExecutionRole
        - Arn
    events:
      - http:
          path: v1/authentication/userExists
          method: post
          cors: true
  refreshToken:
    handler: authentication/refreshToken/index.handler
    role: 
      Fn::GetAtt:
        - LambdaExecutionRole
        - Arn
    events:
      - http:
          path: v1/authentication/refreshToken
          method: post
          cors: true
  sendOTPEmail:
    handler: authentication/sendOTPEmail/index.handler
    role: 
      Fn::GetAtt:
        - sendOTPEmailRole
        - Arn
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - sendOTPEmailQueue
              - Arn

  processFailedOTPEmail:
    handler: authentication/processFailedEmail/index.handler
    role: 
      Fn::GetAtt:
        - processFailedOTPEmailRole
        - Arn
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - failedOtpQueue
              - Arn


##### U S E R - I N F O #####
##Health Info##
  healthInfo:
    handler: userInfo/healthInfo/index.handler
    role: 
      Fn::GetAtt:
        - LambdaExecutionRole
        - Arn
    events:
      - http:
          path: v1/healthInfo
          method: get
          cors: true
      - http:
          path: v1/healthInfo
          method: put
          cors: true 

##Health Info##
  user:
    handler: userInfo/user/index.handler
    role: 
      Fn::GetAtt:
        - LambdaExecutionRole
        - Arn
    events:
      - http:
          path: v1/user
          method: get
          cors: true
      - http:
          path: v1/user
          method: put
          cors: true


##### N O T I F I C A T I O N S #####
  notifications:
    handler: notifications/index.handler
    role: 
      Fn::GetAtt:
        - LambdaExecutionRole
        - Arn
    events:
      - http:
          path: v1/notifications
          method: get
          cors: true
      - http:
          path: v1/notifications/{notificationID}
          method: get
          cors: true
      - http:
          path: v1/notifications/{notificationID}
          method: put
          cors: true 
      - http:
          path: v1/notifications/{notificationID}
          method: delete
          cors: true

##### F O O D #####
##Food Entries##
  foodEntries:
    handler: tracker-diet/foodEntries/index.handler
    role: 
      Fn::GetAtt:
        - LambdaExecutionRole
        - Arn
    events:
      - http:
          path: v1/foodEntries
          method: get
          cors: true
      - http:
          path: v1/foodEntries
          method: post
          cors: true
      - http:
          path: v1/foodEntries/{foodEntryID}
          method: put
          cors: true 
      - http:
          path: v1/foodEntries/{foodEntryID}
          method: delete
          cors: true

##FoodItems##
  foodItems:
    handler: tracker-diet/foodItems/index.handler
    role: 
      Fn::GetAtt:
        - LambdaExecutionRole
        - Arn
    events:
      - http:
          path: v1/foodItems
          method: get
          cors: true
      - http:
          path: v1/foodItems/{foodItemID}
          method: get
          cors: true
      - http:
          path: v1/foodItems
          method: post
          cors: true
      - http:
          path: v1/foodItems/{foodItemID}
          method: put
          cors: true
      - http:
          path: v1/foodItems/{foodItemID}
          method: delete
          cors: true


##### H A B I T S #####
##Habits##
  habits:
    handler: tracker-habit/habits/index.handler
    role: 
      Fn::GetAtt:
        - LambdaExecutionRole
        - Arn
    events:
      - http:
          path: v1/habits
          method: get
          cors: true
      - http:
          path: v1/habits
          method: post
          cors: true
      - http:
          path: v1/habits/{habitID}
          method: put
          cors: true
      - http:
          path: v1/habits/{habitID}
          method: delete
          cors: true

##HabitStatuses##
  habitStatuses:
    handler: tracker-habit/habitStatuses/index.handler
    role: 
      Fn::GetAtt:
        - LambdaExecutionRole
        - Arn
    events:
      - http:
          path: v1/habitStatuses
          method: get
          cors: true
      - http:
          path: v1/habitStatuses
          method: post
          cors: true
      - http:
          path: v1/habitStatuses/{habitStatusID}
          method: put
          cors: true
      - http:
          path: v1/habitStatuses/{habitStatusID}
          method: delete
          cors: true


##### W E L L N E S S #####
##SleepReports##
  sleepReports:
    handler: tracker-wellness/sleepReports/index.handler
    role: 
      Fn::GetAtt:
        - LambdaExecutionRole
        - Arn
    events:
      - http:
          path: v1/sleepReports
          method: get
          cors: true
      - http:
          path: v1/sleepReports
          method: post
          cors: true
      - http:
          path: v1/sleepReports/{sleepReportID}
          method: put
          cors: true
      - http:
          path: v1/sleepReports/{sleepReportID}
          method: delete
          cors: true

##WellnessReports##
  wellnessReports:
    handler: tracker-wellness/wellnessReports/index.handler
    role: 
      Fn::GetAtt:
        - LambdaExecutionRole
        - Arn
    events:
      - http:
          path: v1/wellnessReports
          method: get
          cors: true
      - http:
          path: v1/wellnessReports
          method: post
          cors: true
      - http:
          path: v1/wellnessReports/{wellnessReportID}
          method: put
          cors: true
      - http:
          path: v1/wellnessReports/{wellnessReportID}
          method: delete
          cors: true


##### T A S K S #####
##tasks##
  tasks:
    handler: tracker-task/tasks/index.handler
    role: 
      Fn::GetAtt:
        - LambdaExecutionRole
        - Arn
    events:
      - http:
          path: v1/tasks
          method: get
          cors: true
      - http:
          path: v1/tasks
          method: post
          cors: true
      - http:
          path: v1/tasks/{taskID}
          method: put
          cors: true
      - http:
          path: v1/tasks/{taskID}
          method: delete
          cors: true    

##to-dos##
  toDos:
    handler: tracker-task/toDos/index.handler
    role: 
      Fn::GetAtt:
        - LambdaExecutionRole
        - Arn
    events:
      - http:
          path: v1/toDos
          method: get
          cors: true
      - http:
          path: v1/toDos
          method: post
          cors: true
      - http:
          path: v1/toDos/{toDoID}
          method: put
          cors: true
      - http:
          path: v1/toDos/{toDoID}
          method: delete
          cors: true


##### F I T N E S S #####
##Exercise Entries##
  exerciseEntries:
    handler: tracker-fitness/exerciseEntries/index.handler
    role: 
      Fn::GetAtt:
        - LambdaExecutionRole
        - Arn
    events:
      - http:
          path: v1/exerciseEntries
          method: get
          cors: true
      - http:
          path: v1/exerciseEntries
          method: post
          cors: true
      - http:
          path: v1/exerciseEntries/{exerciseEntryID}
          method: put
          cors: true
      - http:
          path: v1/exerciseEntries/{exerciseEntryID}
          method: delete
          cors: true 

##Exercises##
  exercises:
    handler: tracker-fitness/exercises/index.handler
    role: 
      Fn::GetAtt:
        - LambdaExecutionRole
        - Arn
    events:
      - http:
          path: v1/exercises
          method: get
          cors: true
      - http:
          path: v1/exercises
          method: post
          cors: true
      - http:
          path: v1/exercises/{exerciseID}
          method: put
          cors: true
      - http:
          path: v1/exercises/{exerciseID}
          method: delete
          cors: true


##Workout Entries##
  workoutEntries:
    handler: tracker-fitness/workoutEntries/index.handler
    role: 
      Fn::GetAtt:
        - LambdaExecutionRole
        - Arn
    events:
      - http:
          path: v1/workoutEntries
          method: get
          cors: true
      - http:
          path: v1/workoutEntries
          method: post
          cors: true
      - http:
          path: v1/workoutEntries/{workoutEntryID}
          method: put
          cors: true
      - http:
          path: v1/workoutEntries/{workoutEntryID}
          method: delete
          cors: true

##Workout Plans##
  workoutPlans:
    handler: tracker-fitness/workoutPlans/index.handler
    role: 
      Fn::GetAtt:
        - LambdaExecutionRole
        - Arn
    events:
      - http:
          path: v1/workoutPlans
          method: get
          cors: true
      - http:
          path: v1/workoutPlans
          method: post
          cors: true
      - http:
          path: v1/workoutPlans/{workoutPlanID}
          method: put
          cors: true
      - http:
          path: v1/workoutPlans/{workoutPlanID}
          method: delete
          cors: true


############## R E S O U R C E S ##############
resources:
  Resources:
    
    trackerTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        TableName: ${self:provider.environment.ALL_TRACKER_TABLE_NAME}
        AttributeDefinitions:
        - AttributeName: "PK"
          AttributeType: "S"
        - AttributeName: "SK"
          AttributeType: "S"
        KeySchema:
        - AttributeName: "PK"
          KeyType: "HASH"
        - AttributeName: "SK"
          KeyType: "RANGE"
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
  
    LambdaExecutionRole:
      Type: 'AWS::IAM::Role'
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: 'Allow'
              Principal:
                Service:
                  - 'lambda.amazonaws.com'
              Action:
                - 'sts:AssumeRole'
        Policies:
          - PolicyName: 'DynamoDBAccess'
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: 'Allow'
                  Action:
                    - 'dynamodb:*'
                  Resource:
                    Fn::GetAtt:
                      - trackerTable
                      - Arn
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - 'Fn::Join':
                        - ':'
                        - - 'arn:aws:logs'
                          - Ref: 'AWS::Region'
                          - Ref: 'AWS::AccountId'
                          - 'log-group:/aws/lambda/*:*:*'

    sendOTPEmailQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: sendOTPEmailQueue-${opt:stage, 'dev'}
        RedrivePolicy:
          deadLetterTargetArn:
            Fn::GetAtt:
              - 'OTPEmailDLQ'
              - 'Arn'
          maxReceiveCount: 5
    OTPEmailDLQ:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: OTPEmailDLQ-${opt:stage, 'dev'}
    
    integrationQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: integrationQueue-${opt:stage, 'dev'}
        VisibilityTimeout: 150
        RedrivePolicy:
          deadLetterTargetArn:
            Fn::GetAtt:
              - 'integrationDLQ'
              - 'Arn'
          maxReceiveCount: 5
    integrationDLQ:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: integrationDLQ-${opt:stage, 'dev'}
    
    failedOtpQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: failedOtpQueue-${opt:stage, 'dev'}
        RedrivePolicy:
          deadLetterTargetArn:
            Fn::GetAtt:
              - 'failedOtpDLQ'
              - 'Arn'
          maxReceiveCount: 5
    failedOtpDLQ:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: failedOtpDLQ-${opt:stage, 'dev'}

    bouncesAndComplaintsTopicOTP:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: bouncesAndComplaintsTopicOTP-${opt:stage, 'dev'}
        Subscription:
          - Protocol: sqs
            Endpoint: !GetAtt failedOtpQueue.Arn                         



##IAM ROLES AND POLICIES
############################################
    sendOTPEmailRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: sendOTPEmailRole-${opt:stage, 'dev'}
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action:
                - sts:AssumeRole
        Policies:
          - PolicyName: Policy-sendOTPEmailRole-${opt:stage, 'dev'}
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - sqs:*
                  Resource: 
                    Fn::GetAtt:
                      - sendOTPEmailQueue
                      - Arn
                - Effect: 'Allow'
                  Action:
                    - ses:SendTemplatedEmail
                  Resource: arn:aws:ses:ca-central-1:815127904764:*
                - Effect: 'Allow'
                  Action:
                    - dynamodb:Query
                  Resource:
                    Fn::GetAtt:
                      - trackerTable
                      - Arn
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - 'Fn::Join':
                        - ':'
                        - - 'arn:aws:logs'
                          - Ref: 'AWS::Region'
                          - Ref: 'AWS::AccountId'
                          - 'log-group:/aws/lambda/*:*:*'

    processFailedOTPEmailRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: processFailedOTPEmailRole-${opt:stage, 'dev'}
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action:
                - sts:AssumeRole
        Policies:
          - PolicyName: Policy-processFailedOTPEmailRole-${opt:stage, 'dev'}
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - sqs:*
                  Resource: 
                    Fn::GetAtt:
                      - failedOtpQueue
                      - Arn
                - Effect: 'Allow'
                  Action:
                    - dynamodb:PutItem
                  Resource:
                    Fn::GetAtt:
                      - trackerTable
                      - Arn
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - 'Fn::Join':
                        - ':'
                        - - 'arn:aws:logs'
                          - Ref: 'AWS::Region'
                          - Ref: 'AWS::AccountId'
                          - 'log-group:/aws/lambda/*:*:*'

    requestOTPRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: requestOTPRole-${opt:stage, 'dev'}
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action:
                - sts:AssumeRole
        Policies:
          - PolicyName: Policy-requestOTPRole-${opt:stage, 'dev'}
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - sqs:SendMessage
                  Resource: 
                    Fn::GetAtt:
                      - sendOTPEmailQueue
                      - Arn
                - Effect: 'Allow'
                  Action:
                    - dynamodb:UpdateItem
                    - dynamodb:PutItem
                    - dynamodb:Query
                    - dynamodb:GetItem
                  Resource:
                    Fn::GetAtt:
                      - trackerTable
                      - Arn
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - 'Fn::Join':
                        - ':'
                        - - 'arn:aws:logs'
                          - Ref: 'AWS::Region'
                          - Ref: 'AWS::AccountId'
                          - 'log-group:/aws/lambda/*:*:*'

    sqsFailedOTPEmailPolicy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        Queues:
          - !Ref failedOtpQueue
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Action: 'sqs:SendMessage'
              Resource: !GetAtt failedOtpQueue.Arn
              Effect: 'Allow'
              Condition:
                ArnEquals:
                  aws:SourceArn: !Ref bouncesAndComplaintsTopicOTP
              Principal:
                Service: 'sns.amazonaws.com'

    initiateIntegrationRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: initiateIntegrationRole-${opt:stage, 'dev'}
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action:
                - sts:AssumeRole
        Policies:
          - PolicyName: Policy-initiateIntegrationRole-${opt:stage, 'dev'}
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - sqs:*
                  Resource: 
                    Fn::GetAtt:
                      - integrationQueue
                      - Arn
                - Effect: 'Allow'
                  Action:
                    - dynamodb:*
                  Resource:
                    Fn::GetAtt:
                      - trackerTable
                      - Arn
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - 'Fn::Join':
                        - ':'
                        - - 'arn:aws:logs'
                          - Ref: 'AWS::Region'
                          - Ref: 'AWS::AccountId'
                          - 'log-group:/aws/lambda/*:*:*'
                        
    integrateRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: integrateRole-${opt:stage, 'dev'}
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action:
                - sts:AssumeRole
        Policies:
          - PolicyName: Policy-integrateRole-${opt:stage, 'dev'}
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - sqs:*
                  Resource: 
                    Fn::GetAtt:
                      - integrationQueue
                      - Arn
                - Effect: 'Allow'
                  Action:
                    - dynamodb:*
                  Resource:
                    Fn::GetAtt:
                      - trackerTable
                      - Arn
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - 'Fn::Join':
                        - ':'
                        - - 'arn:aws:logs'
                          - Ref: 'AWS::Region'
                          - Ref: 'AWS::AccountId'
                          - 'log-group:/aws/lambda/*:*:*'
plugins:
  - serverless-prune-plugin
